<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冲鸭</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zcy-fover.github.io/"/>
  <updated>2020-03-27T03:51:48.000Z</updated>
  <id>https://zcy-fover.github.io/</id>
  
  <author>
    <name>zcy-fover</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据存储/MySQL/06慢查询及优化</title>
    <link href="https://zcy-fover.github.io/2020/03/27/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL/06%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%8F%8A%E4%BC%98%E5%8C%96/"/>
    <id>https://zcy-fover.github.io/2020/03/27/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL/06%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%8F%8A%E4%BC%98%E5%8C%96/</id>
    <published>2020-03-27T03:51:48.000Z</published>
    <updated>2020-03-27T03:51:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="慢查询及优化"><a href="#慢查询及优化" class="headerlink" title="慢查询及优化"></a>慢查询及优化</h2><p>查询的执行过程：客户端，到服务端后：会话连接、SQL分析、SQL 优化、生成执行计划、执行后返回结果。执行是整个生命周期最重要的阶段。</p><h3 id="查询分析-EXPLAIN"><a href="#查询分析-EXPLAIN" class="headerlink" title="查询分析 EXPLAIN"></a>查询分析 EXPLAIN</h3><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>查询中执行 select 子句或操作表的顺序，Id 相同执行顺序由上向下；id 越大优先级越高越先执行</td></tr><tr><td>select_type</td><td>select 子句查询类型，主要区别普通查询、联合查询、子查询等复杂查询</td></tr><tr><td>table</td><td>数据库中表名称，行数据是关于哪张表，可能不一定是真实的表名称</td></tr><tr><td>partitions</td><td>分区表命中的分区情况，非分区表该字段为空</td></tr><tr><td>type</td><td>访问类型，对表的访问方式</td></tr><tr><td>possible_keys</td><td>使用哪个索引能找到记录即该查询可以利用的索引。查询的列上若存在索引会被列出。如果没有则显示 NULL</td></tr><tr><td>key</td><td>实际查询过程中用到的索引，一定包含在 possible_keys 中，如果没有则显示 NULL</td></tr><tr><td>key_len</td><td>索引使用的字节数，如果是单列索引则是整个索引长度；如果是多列索引，则具体用到多少列索引就算多少</td></tr><tr><td>ref</td><td>列与索引的比较，表的连接匹配条件，哪些列或常量被用于查找索引列上的值</td></tr><tr><td>rows</td><td>估算结果集行数</td></tr><tr><td>filtered</td><td>返回的结果行和需要扫描读到的行数的比值</td></tr><tr><td>Extra</td><td>解决查询的详细信息</td></tr></tbody></table><h4 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h4><ul><li><strong>simple</strong>：简单的 select 查询，查询中不包含子查询或者 union</li><li><strong>primary</strong>：子查询中最外层查询，查询中包含任何复杂的子部分，最外层被标记</li><li><strong>subquery</strong>：在 select 或 where 列表中包含子查询，结果不依赖外部查询</li><li><strong>dependent subquery</strong>：子查询中第一个 select，依赖外部查询</li><li><strong>uncacheable subquery</strong>：一个子查询的结果不能被缓存，必须重新评估外链接第一行</li><li><strong>derived</strong>：在 from 列表中的子查询，MySQL 会递归执行这些子查询，然后把结果集放在临时表中</li><li><strong>union</strong>：如果第二个 select 出现在 union 之后，则被标记为 union；如果 union 包含在 from 子句的子查询中，外层 select 被标记为 derived</li><li><strong>union result</strong>：union 的结果，union 语句中第二个 select 后面的所有的 select</li><li><strong>dependent union</strong>：union 中第二个或后面的 select 语句</li></ul><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><ul><li><strong>system</strong>：表中仅有一行，const 连接类型的特殊情况</li><li><strong>const</strong>：通过索引一次就找到，const 用于比较主键索引和唯一索引，如果将主键放在了 where 条件中，MySQL 可以将其转换为常量</li><li><strong>eq_ref</strong>：唯一性索引扫描，对于每个索引键表中只会有一行记录与之匹配</li><li><strong>ref</strong>：非唯一性索引扫描，返回匹配某个单独值的所有行，本质上也是一种索引访问，它返回所有匹配某个单独值的行，可能会找多个符合条件的行，属于查找和扫描的混合体</li><li><strong>ref_or_null</strong>：与 ref 类似，增加了 null 值比较</li><li><strong>range</strong>：使用索引的范围扫描，见于使用 =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, IS NULL, &lt;=&gt;, BETWEEN, IN()或者like等运算符的查询中</li><li><strong>index</strong>：遍历索引树，不需要读取数据行，例如只通过覆盖索引就查找到目标数据</li><li><strong>all</strong>：全表扫描，然后在服务层根据条件过滤返回需要的记录</li><li><strong>fulltext</strong>：全文索引，优先级较高，如果全文索引和普通索引同时存在，MySQL 会优先使用全文索引</li><li><strong>index_merge</strong>：查询使用了两个以上的索引，最后取交集或者并集</li><li><strong>unique_subquery</strong>：用于 where 中的 in 形式子查询，子查询返回不重复唯一值</li><li><strong>index_subquery</strong>：用于 in 形式的子查询使用到了辅助索引或常数列表，子查询可能返回重复值，可以使用索引将子查询去重</li></ul><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><p>常数等值查询显示 const，连接表查询显示驱动表的关联字段，使用了表达式、函数、条件列发生内部隐式转换显示 func</p><h4 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h4><ul><li><strong>distinct</strong>：在 select 使用了 distinct 关键字</li><li><strong>no table used</strong>：不带 from 子句的查询或者 from dual</li><li>使用 not in() 形式子查询或者 not exist 连接查询，这种叫做反连接。一般连接查询是先查内表再查外表，这种是先查外表再查内表</li><li><strong>using filesort</strong>：排序时无法使用到索引，常见于 ORDER BY 和  GROUP BY 语句中</li><li><strong>using index</strong>：查询时不需要回表，直接通过索引就可以查询</li><li><strong>using where</strong>：存储引擎返回的记录不满足查询条件，需要在服务层通过条件过滤</li><li><strong>using join buffer</strong>：使用了连接缓存，减少内表的循环数量以及顺序的扫描查询</li><li><strong>using sort_union</strong>：表示使用 and 的各个索引的条件时，该信息表示是从处理结果获取交集</li><li><strong>using_union</strong>：表示使用 or 连接各个使用索引的条件时，该信息表示从处理结果获取并集</li><li><strong>using sort_union</strong>：表示使用 and 连接查询信息量大时，先查询主键，然后进行排序合并后，才能读取记录并返回。</li><li><strong>using sort_intersection</strong>：表示使用 or 连接查询信息量大时，先查询主键，然后进行排序合并后，才能读取记录并返回。</li><li><strong>firstmatch(td_name)</strong>：常见于 where 子句还有 in() 类查询，内表数据量大可能出现</li><li><strong>loosescan(m…n)</strong>：在 in() 类型的子查询中，子查询返回的可能有重复记录</li></ul><h3 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h3><p>查询性能最基本的原因是访问不必要或者太多的数据。主要通过两个步骤来分析：应用是否检索了大量超过实际需要的数据，包括太多的行数据或者列数据；服务层是否在分析大量超过实际需要的行。</p><h4 id="不需要的数据"><a href="#不需要的数据" class="headerlink" title="不需要的数据"></a>不需要的数据</h4><ul><li><strong>查询不需要的记录：</strong>利用 <code>limit</code> 优化自己需要的记录行</li><li><strong>多表关联时返回全部列：</strong>注意多表关联的情况，一般可能只需要关联表的某个字段而不是全部字段</li><li><strong>取出全部列：</strong>使用了 <code>SELECT *</code>，可能情况比较少。使用 * 会让优化器无法利用覆盖索引完成优化，取出实际需要的列即可</li><li><strong>重复查询相同的数据：</strong>执行相同的查询、返回相同的数据。考虑合理利用缓存</li></ul><h4 id="扫描额外的记录"><a href="#扫描额外的记录" class="headerlink" title="扫描额外的记录"></a>扫描额外的记录</h4><p>主要是在查询执行过程中是否扫描了过多的行数据，考虑是否可以优化</p><ul><li><strong>响应时间：</strong>响应时间主要包括两部分：服务时间和排队时间，服务时间是指数据库处理这个查询花费的具体时间，排队时间是服务器要等待某些资源没有没有执行查询的时间</li><li><strong>扫描的行数和返回的行数：</strong>最好的情况就是扫描的行就是需要的返回的行，避免无用的行扫描</li><li><strong>扫描的行数和访问类型：</strong>EXPLAIN 的 type 列反映了访问类型(全表扫描、索引扫描、范围扫描、唯一索引扫描、常数引用)。所以可以让 MySQL 以高效、扫描行数少的方式找到需要的记录</li></ul><p>MySQL 应用 WHERE 条件的场景：</p><ul><li>在索引中使用 WHERE 条件在存储引擎层过滤不匹配的记录</li><li>使用索引覆盖扫描来返回记录，在 EXTRA (using index) 。直接从索引中返回结果这是在服务器层完成不需要回表查询</li><li>从数据表中返回结果，过滤不满足条件的记录，在 EXTRA (using where) 。在服务层完成，先从数据表读出记录然后过滤</li></ul><p>如果发现需要扫描大量的行但是只返回少量的数据，可以从下面几个方面考虑优化：</p><ul><li>是否可以优化为从覆盖索引扫描，把需要的列放在覆盖索引中，查询索引时直接返回</li><li>优化数据库、表结构</li><li>优化查询 SQL</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;慢查询及优化&quot;&gt;&lt;a href=&quot;#慢查询及优化&quot; class=&quot;headerlink&quot; title=&quot;慢查询及优化&quot;&gt;&lt;/a&gt;慢查询及优化&lt;/h2&gt;&lt;p&gt;查询的执行过程：客户端，到服务端后：会话连接、SQL分析、SQL 优化、生成执行计划、执行后返回结果。执行是
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据存储/MySQL/05高性能索引</title>
    <link href="https://zcy-fover.github.io/2020/03/27/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL/05%E9%AB%98%E6%80%A7%E8%83%BD%E7%B4%A2%E5%BC%95/"/>
    <id>https://zcy-fover.github.io/2020/03/27/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL/05%E9%AB%98%E6%80%A7%E8%83%BD%E7%B4%A2%E5%BC%95/</id>
    <published>2020-03-27T02:13:08.000Z</published>
    <updated>2020-03-27T02:13:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>方便存储引擎快速查找，索引可以包含一列或多列。</p><h3 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h3><h4 id="B-Tree-索引"><a href="#B-Tree-索引" class="headerlink" title="B-Tree 索引"></a>B-Tree 索引</h4><p>即是 <code>BTree</code>，在不同的存储引擎底层可会有不同的实现，NDB 存储引擎内部使用 <code>T-Tree</code> 结构存储；<code>InnoDB</code> 使用的是 <code>B+Tree</code>。 <code>BTree</code>对索引列是顺序存储的， <code>BTree</code>可以加快访问数据的速度，使存储引擎不在需要全表扫描，从索引的根节点开始搜索。</p><h5 id="可以使用-BTree-索引的查询类型"><a href="#可以使用-BTree-索引的查询类型" class="headerlink" title="可以使用  BTree 索引的查询类型"></a>可以使用  <code>BTree</code> 索引的查询类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table index_test(</span><br><span class="line">    aa varchar(10) not null,</span><br><span class="line">    bb varchar(10) not null,</span><br><span class="line">    cc varchar(10) not null,</span><br><span class="line">    dd varchar(10) not null,</span><br><span class="line">    key(aa, bb, cc)</span><br><span class="line">);</span><br><span class="line">insert into index_test(aa, bb, cc, dd) </span><br><span class="line">values(&quot;a1&quot;, &quot;b1&quot;, &quot;c1&quot;, &quot;d1&quot;),(&quot;a2&quot;, &quot;b2&quot;, &quot;c2&quot;, &quot;d2&quot;),(&quot;a3&quot;, &quot;b3&quot;, &quot;c3&quot;, &quot;d3&quot;);</span><br></pre></td></tr></table></figure><ul><li>全值匹配：和索引中的所有列进行匹配；上述索引可以用于查找 <code>aa=a1,bb=b1,cc=c1</code> 的行</li><li>匹配最左前缀：即组合索引中使用索引的第一列；可以查找 <code>aa=a1</code> 的行</li><li>匹配列前缀：匹配某一列值的开头部分；可以查找 <code>aa</code> 列以 a 开头的行</li><li>匹配范围值：查找 <code>aa</code> 在 a1 和 a3 之间的行</li><li>精确匹配某一列并范围匹配另外一列：可以查找 <code>aa=a1 AND bb=&#39;%b&#39;</code> 的行</li><li>只访问索引的查询：</li></ul><h5 id="BTree索引限制"><a href="#BTree索引限制" class="headerlink" title="BTree索引限制"></a><code>BTree</code>索引限制</h5><ul><li>如果不是按照索引的最左列开始查找则无法使用索引；无法使用索引查找 <code>cc=c3</code> 的行</li><li>不能跳过索引的列；例如 <code>aa=a1 AND cc=c1</code> 则只使用了第一列索引，第三列索引未使用</li><li>查询中有某个列的范围查询则其右边的列都无法使用索引查询，例如 <code>WHERE aa=&quot;a1&quot; AND BB = &quot;%1&quot; AND cc=&quot;c1&quot;</code> 中 <code>CC</code> 这里只能使用索引的前两列</li></ul><p>在实际的业务项目中给那些列加索引需要重点分析，在编码过程中 <code>WHERE</code> 列的匹配顺序也很重要。</p><h4 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h4><p>基于哈希表实现，只有精确匹配索引所有列的查询才有效，存储引擎会给每一行的索引列计算一个哈希码，不同键值的行计算出的哈希码不一样，哈希索引将所有的哈希吗存储在索引中并在哈希表中保存了索引指向每一行数据的指针。如果哈希码计算产生了哈希冲突，哈希索引会以链表的方式存储在一个哈希条目中。</p><p>在具体的查询中，先计算查询条件的哈希值，然后在哈希索引中查找对应索引然后根据数据指针找到对应的数据行比对数据是否是要查询的数据</p><h5 id="哈希索引的限制"><a href="#哈希索引的限制" class="headerlink" title="哈希索引的限制"></a>哈希索引的限制</h5><ul><li>哈希索引中只存索引值和行数据指针，所以不能根据索引直接比对数据，需要定位到对应的行</li><li>哈希索引并不是按照索引值排序存储的，也就无法用于排序</li><li>哈希索引不支持部分索引列匹配查找，哈希索引是根据索引列的全部内容来计算索引值的，在<code>hash(aa, bb)</code>上建立哈希索引，如果只是用 <code>aa</code>列查找则无法使用索引</li><li>由于哈希索引的计算和存储格式，只能支持等值<code>(= IN &lt;=&gt;)</code>查找不支持范围查找</li><li>哈希冲突较少时，哈希索引的访问速度非常快；哈希冲突多的时候会造成索引维护成本变高，也会造成查询效率变低</li></ul><p>InnoDB 的<strong>自适应性哈希索引</strong>会在某个索引被频繁使用时，在 <code>B-Tree</code> 索引之上在建立一个哈希索引。</p><h4 id="空间数据索引-R-Tree"><a href="#空间数据索引-R-Tree" class="headerlink" title="空间数据索引(R-Tree)"></a>空间数据索引(R-Tree)</h4><p>MyISAM 支持空间索引，可以做地理数据存储。可以从所有维度来索引数据，可以从任意维度组合索引查询。但是必须使用 MySQL 的 GIS 相关函数 <code>MBRCONTAINS()</code> 来维护数据，在这个方面 PostgreSQL 支持的较好。</p><h4 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h4><p>适合查找文本中的关键字，而不是比较索引中的值。全文索引更适合做搜索引擎。</p><h4 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h4><p>将数据与索引放在一起存储，避免数据冗余存储所以一个表只有一个聚簇索引。聚簇索引默认使用主键作为 key，没有主键使用唯一键，还没有的话使用 6 字节的 rowId。</p><h3 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h3><ul><li>大大减少服务需要扫描的数据量</li><li>索引可以帮助服务器避免排序和建立临时表</li><li>将随机 IO 变为顺序 IO</li></ul><p>索引为查询提供了很好的性能，但是当表的数据量特别大时，维护索引的代价也会增加。</p><h3 id="索引策略"><a href="#索引策略" class="headerlink" title="索引策略"></a>索引策略</h3><h4 id="独立的列"><a href="#独立的列" class="headerlink" title="独立的列"></a>独立的列</h4><p>查询条件中的列需要是独立的，列不能是表达式的一部分，也不能是函数的参数</p><h4 id="前缀索引和索引选择性"><a href="#前缀索引和索引选择性" class="headerlink" title="前缀索引和索引选择性"></a>前缀索引和索引选择性</h4><p>索引的选择性是指不重复的索引值和数据表的记录总数(T)的比值，范围是从 <code>1/T ~ 1</code> 唯一索引的选择性是最好的性能也是最好的。</p><p>对于一些数据类型必须要使用前缀索引(BLOB、TEXT、过长的VARCHAR)，索引这些列的完整长度，资源耗费太大。前缀索引的长度也是需要根据具体的数据分析。前缀索引是的索引更小更快但是 MySQL 无法使用前缀索引做 GROUP BY、ORDER BY 和覆盖扫描。</p><h4 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h4><p>创建索引的时候并不是给每个列创建索引，可以结合具体的业务查询，可以创建多列索引。尽可能是的索引的选择性更高。  </p><ul><li>当服务器对多个索引做相交操作(多个 AND 条件)时，这时建立包含相关列的组合索引效果会更好</li><li>当服务器对多个索引做相交操作(多个 OR 条件)时，通常会耗费大量 CPU、内存资源在缓存、排序和合并操作上</li></ul><h4 id="索引顺序"><a href="#索引顺序" class="headerlink" title="索引顺序"></a>索引顺序</h4><p>在一个多列索引中，索引列顺序按照最左匹配开始，所以索引列的顺序很重要。一般情况下将选择性最高的索引列放在最左边，这样可以降低后面索引列的查找范围。这个在 <code>B-Tree</code> 索引中有介绍。</p><h4 id="聚簇索引-1"><a href="#聚簇索引-1" class="headerlink" title="聚簇索引"></a>聚簇索引</h4><p>聚簇索引并不是一种索引类型，而是一种数据存储方式。索引依赖与具体的存储引擎，并不是所有的存储引擎都实现了聚簇索引，InnoDB 的聚簇索引叶子节点保存了 key 和数据行，非叶子只保存 key。因为保存了数据行，所以一个表只能有一个聚簇索引。InnoDB 将主键作为聚簇索引的 key，如果没有主键使用唯一键，还没有的话会定义一个隐式的主键来作为聚簇索引。</p><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul><li>索引和数据保存在一起，找到索引即找到数据，数据访问更快</li><li>使用覆盖索引扫描的查询可以直接使用叶节点的主键值</li></ul><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>对于 I/O 密集的应用聚簇索引可以提高查询的性能，但是如果数据都放在内存中时这种优势就下降了</li><li>聚簇索引的叶子节点是有序的，当插入新的数据时，插入速度依赖于主键顺序。</li><li>当要更新聚簇索引的索引列，这样可能引起底层叶子节点的数据迁移，这样会影响插入性能</li><li>当插入数据和更新索引列，有可能会引起“页分裂”(新插入的行和索引变化列需要放到某个已满的页)，这个时候需要将已满页的数据调整，叶子节点要调整上层非叶子节点也可能要调整。</li><li>聚簇索引可能会导致全表扫描变慢。尤其是行比较稀疏的情况，这是因为数据行分布在不同的页上，需要将数据加载到内存，此时 I/O 的损耗较大。</li><li>建立了聚簇索引，会导致二级索引(非聚簇索引)访问需要两次查找，先在二级索引查到对应的主键列然后在聚簇索引中查找数据。前面说的 InnoDB 引擎自适应性哈希可以减少这样的工作。二级索引存储主键列不是行指针，这样可以减少页分裂和行移动时的二级索引维护工作</li></ul><p>可以看到建立聚簇索引主键的性质对于聚簇索引很重要，如果主键是有序自增长的则在插入数据时会更方便一点。如果是随机的例如 UUID，则会存在几个缺点：</p><ul><li>插入的数据不一定是在最后可能是已有数据的中间，这样可能导致 InnoDB 不得不频繁的做页分裂，以便为新的行数据分配空间</li><li>数据航要写入的页可能已经刷到磁盘上并从缓存中移除，或者还没有被加载到缓存中，此时要插入数据时需要先从磁盘读取页数据，增大了 I/O 开销</li><li>频繁的页分裂，页会变的稀疏并被不规则的填充最终有数据碎片产生</li></ul><p>当然顺序的主键因为要控制自增，在并发情况下可能会导致间隙锁竞争和 <code>AUTO_INCREMENT</code>锁竞争</p><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><p>索引的叶子节点已经包含(覆盖)了要查找的字段，不需要在回表查询。所以索引在设计上要尽可能多考虑到后续的查询场景。覆盖索引对于性能的提升很有帮助。</p><p>覆盖索引必须要存储索引列的值，MySQL 只能使用 B-Tree 做覆盖索引</p><ul><li>索引条目远小于数据行，所以如果只读取索引，可以减少缓存的负载、I/O 的消耗</li><li>索引按照列值顺序存储，对于 I/O 密集型的范围查询比随机读取每一行数据的 I/O 要少</li><li>MyISAM 在内存中缓存索引，访问数据时需要访问磁盘进行一次系统调用。如果在内存中可以直接获取性能会更好</li><li>二级索引存在查询聚簇索引的情况，如果二级索引能够覆盖查询则可以避免对主键索引的二次查询</li></ul><h4 id="使用索引做排序"><a href="#使用索引做排序" class="headerlink" title="使用索引做排序"></a>使用索引做排序</h4><p>扫描索引本身是很快的，但是索引要是没有完全包含要查询的列，则需要在查询的时候回表查询对应的数据行，这样的话反而比顺序全表扫描慢了。</p><p>当索引的列顺序和 <code>ORDER BY</code> 的列顺序完全一致，并且所有列的排序方向 都一样时才能使用索引排序；如果查询关联多张表只有当 <code>ORDER BY</code> 子句引用的字段全部是第一个表的才能使用索引排序，<code>ORDER BY</code> 也要求满足索引的最左前缀匹配原则。当前导列为常量时， <code>ORDER BY</code> 不满足最左前缀要求也可以用索引排序。</p><h4 id="压缩-前缀压缩-索引"><a href="#压缩-前缀压缩-索引" class="headerlink" title="压缩(前缀压缩)索引"></a>压缩(前缀压缩)索引</h4><p>MyISAM 使用前缀压缩来减少索引的大小，让内存可以存放更多的索引。MyISAM 压缩每个索引块的方法是：保存索引块中的第一个值，然后把后面的索引对比得到相同的前缀部分和不同的后缀部分，把这部分存储起来即可。例如：第一个索引是 abcd，第二个是 abcdefg，第二个所以压缩存储后是 4,efg。MyISAM 对行指针也采取类似存储做法。</p><p>压缩块减少了存储空间但是在查询时每个索引值计算依赖前面的值，使得查找时无法使用二分查找只能从头开始扫描。</p><h4 id="冗余和重复索引"><a href="#冗余和重复索引" class="headerlink" title="冗余和重复索引"></a>冗余和重复索引</h4><p>重复索引是指在相同的列上按照相同的顺序创建相同类型的索引，例如给主键再加索引</p><p>冗余索引是指要创建的索引已经可以被包含在其他的索引中，例如已经有 KEY(a, b)，再创建 KEY(a)，此时 (a) 是 (a, b) 的前缀索引。所以创建索引的时候应该尽量在之前的基础上进行扩展而不是一味新建索引。但是扩展时也得考虑扩展后会不会导致索引的维护成本变得更高。</p><h4 id="删除未使用的索引"><a href="#删除未使用的索引" class="headerlink" title="删除未使用的索引"></a>删除未使用的索引</h4><p>在前期架构设计时可能存在缺陷，存在一些无用的索引，可以利用 <code>INFORMATION_SCHEMA.INDEX_STATISTICS</code> 查看使用频率低的索引，将其删除。</p><h4 id="索引和锁"><a href="#索引和锁" class="headerlink" title="索引和锁"></a>索引和锁</h4><p>索引可以在查询的时候锁定更少的行，减少 InnoDB 访问的行数，InnoDB 在二级索引上使用共享(读)锁，但访问主键索引需要排他(写)锁。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h2&gt;&lt;p&gt;方便存储引擎快速查找，索引可以包含一列或多列。&lt;/p&gt;
&lt;h3 id=&quot;索引的类型&quot;&gt;&lt;a href=&quot;#索引的类型&quot; class=&quot;hea
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据存储/MySQL/mysql执行计划</title>
    <link href="https://zcy-fover.github.io/2020/03/24/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL/mysql%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/"/>
    <id>https://zcy-fover.github.io/2020/03/24/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL/mysql%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/</id>
    <published>2020-03-24T12:49:05.954Z</published>
    <updated>2020-03-24T12:49:07.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql执行计划"><a href="#mysql执行计划" class="headerlink" title="mysql执行计划"></a>mysql执行计划</h1><p>​       在企业的应用场景中，为了知道优化SQL语句的执行，需要查看SQL语句的具体执行过程，以加快SQL语句的执行效率。</p><p>​       可以使用explain+SQL语句来模拟优化器执行SQL查询语句，从而知道mysql是如何处理sql语句的。</p><p>​       官网地址： <a href="https://dev.mysql.com/doc/refman/5.5/en/explain-output.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.5/en/explain-output.html</a> </p><h3 id="1、执行计划中包含的信息"><a href="#1、执行计划中包含的信息" class="headerlink" title="1、执行计划中包含的信息"></a>1、执行计划中包含的信息</h3><table><thead><tr><th align="center">Column</th><th align="center">Meaning</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">The <code>SELECT</code> identifier</td></tr><tr><td align="center">select_type</td><td align="center">The <code>SELECT</code> type</td></tr><tr><td align="center">table</td><td align="center">The table for the output row</td></tr><tr><td align="center">partitions</td><td align="center">The matching partitions</td></tr><tr><td align="center">type</td><td align="center">The join type</td></tr><tr><td align="center">possible_keys</td><td align="center">The possible indexes to choose</td></tr><tr><td align="center">key</td><td align="center">The index actually chosen</td></tr><tr><td align="center">key_len</td><td align="center">The length of the chosen key</td></tr><tr><td align="center">ref</td><td align="center">The columns compared to the index</td></tr><tr><td align="center">rows</td><td align="center">Estimate of rows to be examined</td></tr><tr><td align="center">filtered</td><td align="center">Percentage of rows filtered by table condition</td></tr><tr><td align="center">extra</td><td align="center">Additional information</td></tr></tbody></table><p><strong>id</strong></p><p>select查询的序列号，包含一组数字，表示查询中执行select子句或者操作表的顺序</p><p>id号分为三种情况：</p><p>​        1、如果id相同，那么执行顺序从上到下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp e <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno = d.deptno <span class="keyword">join</span> salgrade sg <span class="keyword">on</span> e.sal <span class="keyword">between</span> sg.losal <span class="keyword">and</span> sg.hisal;</span><br></pre></td></tr></table></figure><p>​        2、如果id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp e <span class="keyword">where</span> e.deptno <span class="keyword">in</span> (<span class="keyword">select</span> d.deptno <span class="keyword">from</span> dept d <span class="keyword">where</span> d.dname = <span class="string">'SALES'</span>);</span><br></pre></td></tr></table></figure><p>​        3、id相同和不同的，同时存在：相同的可以认为是一组，从上往下顺序执行，在所有组中，id值越大，优先级越高，越先执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp e <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno = d.deptno <span class="keyword">join</span> salgrade sg <span class="keyword">on</span> e.sal <span class="keyword">between</span> sg.losal <span class="keyword">and</span> sg.hisal <span class="keyword">where</span> e.deptno <span class="keyword">in</span> (<span class="keyword">select</span> d.deptno <span class="keyword">from</span> dept d <span class="keyword">where</span> d.dname = <span class="string">'SALES'</span>);</span><br></pre></td></tr></table></figure><p><strong>select_type</strong></p><p>主要用来分辨查询的类型，是普通查询还是联合查询还是子查询</p><table><thead><tr><th align="center"><code>select_type</code> Value</th><th align="center">Meaning</th></tr></thead><tbody><tr><td align="center">SIMPLE</td><td align="center">Simple SELECT (not using UNION or subqueries)</td></tr><tr><td align="center">PRIMARY</td><td align="center">Outermost SELECT</td></tr><tr><td align="center">UNION</td><td align="center">Second or later SELECT statement in a UNION</td></tr><tr><td align="center">DEPENDENT UNION</td><td align="center">Second or later SELECT statement in a UNION, dependent on outer query</td></tr><tr><td align="center">UNION RESULT</td><td align="center">Result of a UNION.</td></tr><tr><td align="center">SUBQUERY</td><td align="center">First SELECT in subquery</td></tr><tr><td align="center">DEPENDENT SUBQUERY</td><td align="center">First SELECT in subquery, dependent on outer query</td></tr><tr><td align="center">DERIVED</td><td align="center">Derived table</td></tr><tr><td align="center">UNCACHEABLE SUBQUERY</td><td align="center">A subquery for which the result cannot be cached and must be re-evaluated for each row of the outer query</td></tr><tr><td align="center">UNCACHEABLE UNION</td><td align="center">The second or later select in a UNION that belongs to an uncacheable subquery (see UNCACHEABLE SUBQUERY)</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--sample:简单的查询，不包含子查询和union</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">--primary:查询中若包含任何复杂的子查询，最外层查询则被标记为Primary</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> staname,ename supname <span class="keyword">from</span> (<span class="keyword">select</span> ename staname,mgr <span class="keyword">from</span> emp) t <span class="keyword">join</span> emp <span class="keyword">on</span> t.mgr=emp.empno ;</span><br><span class="line"></span><br><span class="line"><span class="comment">--union:若第二个select出现在union之后，则被标记为union</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno = <span class="number">10</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt;<span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--dependent union:跟union类似，此处的depentent表示union或union all联合而成的结果会受外部表影响</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp e <span class="keyword">where</span> e.empno  <span class="keyword">in</span> ( <span class="keyword">select</span> empno <span class="keyword">from</span> emp <span class="keyword">where</span> deptno = <span class="number">10</span> <span class="keyword">union</span> <span class="keyword">select</span> empno <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt;<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--union result:从union表获取结果的select</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno = <span class="number">10</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt;<span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--subquery:在select或者where列表中包含子查询</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> <span class="keyword">avg</span>(sal) <span class="keyword">from</span> emp) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">--dependent subquery:subquery的子查询要受到外部表查询的影响</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp e <span class="keyword">where</span> e.deptno <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> deptno <span class="keyword">from</span> dept);</span><br><span class="line"></span><br><span class="line"><span class="comment">--DERIVED: from子句中出现的子查询，也叫做派生类，</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> staname,ename supname <span class="keyword">from</span> (<span class="keyword">select</span> ename staname,mgr <span class="keyword">from</span> emp) t <span class="keyword">join</span> emp <span class="keyword">on</span> t.mgr=emp.empno ;</span><br><span class="line"></span><br><span class="line"><span class="comment">--UNCACHEABLE SUBQUERY：表示使用子查询的结果不能被缓存</span></span><br><span class="line"> <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> empno = (<span class="keyword">select</span> empno <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=@@sort_buffer_size);</span><br><span class="line"> </span><br><span class="line"><span class="comment">--uncacheable union:表示union的查询结果不能被缓存：sql语句未验证</span></span><br></pre></td></tr></table></figure><p><strong>table</strong></p><p>对应行正在访问哪一个表，表名或者别名，可能是临时表或者union合并结果集<br>        1、如果是具体的表名，则表明从实际的物理表中获取数据，当然也可以是表的别名</p><p>​        2、表名是derivedN的形式，表示使用了id为N的查询产生的衍生表</p><p>​        3、当有union result的时候，表名是union n1,n2等的形式，n1,n2表示参与union的id</p><p><strong>type</strong></p><p>type显示的是访问类型，访问类型表示我是以何种方式去访问我们的数据，最容易想的是全表扫描，直接暴力的遍历一张表去寻找需要的数据，效率非常低下，访问的类型有很多，效率从最好到最坏依次是：</p><p>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL </p><p>一般情况下，得保证查询至少达到range级别，最好能达到ref</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--all:全表扫描，一般情况下出现这样的sql语句而且数据量比较大的话那么就需要进行优化。</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">--index：全索引扫描这个比all的效率要好，主要有两种情况，一种是当前的查询时覆盖索引，即我们需要的数据在索引中就可以索取，或者是使用了索引进行排序，这样就避免数据的重排序</span></span><br><span class="line"><span class="keyword">explain</span>  <span class="keyword">select</span> empno <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">--range：表示利用索引查询的时候限制了范围，在指定范围内进行查询，这样避免了index的全索引扫描，适用的操作符： =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, IS NULL, BETWEEN, LIKE, or IN() </span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="keyword">between</span> <span class="number">7000</span> <span class="keyword">and</span> <span class="number">7500</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--index_subquery：利用索引来关联子查询，不再扫描全表</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> emp.job <span class="keyword">in</span> (<span class="keyword">select</span> job <span class="keyword">from</span> t_job);</span><br><span class="line"></span><br><span class="line"><span class="comment">--unique_subquery:该连接类型类似与index_subquery,使用的是唯一索引</span></span><br><span class="line"> <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp e <span class="keyword">where</span> e.deptno <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> deptno <span class="keyword">from</span> dept);</span><br><span class="line"> </span><br><span class="line"><span class="comment">--index_merge：在查询过程中需要多个索引组合使用，没有模拟出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--ref_or_null：对于某个字段即需要关联条件，也需要null值的情况下，查询优化器会选择这种访问方式</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp e <span class="keyword">where</span>  e.mgr <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">or</span> e.mgr=<span class="number">7369</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--ref：使用了非唯一性索引进行数据的查找</span></span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">index</span> idx_3 <span class="keyword">on</span> emp(deptno);</span><br><span class="line"> <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp e,dept d <span class="keyword">where</span> e.deptno =d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">--eq_ref ：使用唯一性索引进行数据查找</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp,emp2 <span class="keyword">where</span> emp.empno = emp2.empno;</span><br><span class="line"></span><br><span class="line"><span class="comment">--const：这个表至多有一个匹配行，</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> empno = <span class="number">7369</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">--system：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现</span></span><br></pre></td></tr></table></figure><p> <strong>possible_keys</strong> </p><p>​        显示可能应用在这张表中的索引，一个或多个，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.deptno = dept.deptno <span class="keyword">and</span> emp.deptno = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>key</strong></p><p>​        实际使用的索引，如果为null，则没有使用索引，查询中若使用了覆盖索引，则该索引和查询的select字段重叠。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.deptno = dept.deptno <span class="keyword">and</span> emp.deptno = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>key_len</strong></p><p>表示索引中使用的字节数，可以通过key_len计算查询中使用的索引长度，在不损失精度的情况下长度越短越好。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.deptno = dept.deptno <span class="keyword">and</span> emp.deptno = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>ref</strong></p><p>显示索引的哪一列被使用了，如果可能的话，是一个常数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.deptno = dept.deptno <span class="keyword">and</span> emp.deptno = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>rows</strong></p><p>根据表的统计信息及索引使用情况，大致估算出找出所需记录需要读取的行数，此参数很重要，直接反应的sql找了多少数据，在完成目的的情况下越少越好</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><strong>extra</strong></p><p>包含额外的信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--using filesort:说明mysql无法利用索引进行排序，只能利用排序算法进行排序，会消耗额外的位置</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal;</span><br><span class="line"></span><br><span class="line"><span class="comment">--using temporary:建立临时表来保存中间结果，查询完成之后把临时表删除</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> ename,<span class="keyword">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">where</span> deptno = <span class="number">10</span> <span class="keyword">group</span> <span class="keyword">by</span> ename;</span><br><span class="line"></span><br><span class="line"><span class="comment">--using index:这个表示当前的查询时覆盖索引的，直接从索引中读取数据，而不用访问数据表。如果同时出现using where 表名索引被用来执行索引键值的查找，如果没有，表面索引被用来读取数据，而不是真的查找</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> deptno,<span class="keyword">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="keyword">limit</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--using where:使用where进行条件过滤</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--using join buffer:使用连接缓存，情况没有模拟出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--impossible where：where语句的结果总是false</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> empno = <span class="number">7469</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mysql执行计划&quot;&gt;&lt;a href=&quot;#mysql执行计划&quot; class=&quot;headerlink&quot; title=&quot;mysql执行计划&quot;&gt;&lt;/a&gt;mysql执行计划&lt;/h1&gt;&lt;p&gt;​       在企业的应用场景中，为了知道优化SQL语句的执行，需要查看SQL语句
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据存储/MySQL/MySQL 内置函数</title>
    <link href="https://zcy-fover.github.io/2020/03/20/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL/MySQL%20%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    <id>https://zcy-fover.github.io/2020/03/20/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL/MySQL%20%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</id>
    <published>2020-03-20T09:27:08.000Z</published>
    <updated>2020-03-28T00:28:56.983Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h3><blockquote><h5 id="ON-DUPLICATE-KEY-UPDATE使用："><a href="#ON-DUPLICATE-KEY-UPDATE使用：" class="headerlink" title="ON DUPLICATE KEY UPDATE使用："></a>ON DUPLICATE KEY UPDATE使用：</h5><p><strong>作用：</strong>向数据库以相同unique或者primary key插入一条记录，若已经存在该key则更新这条记录，否则则新增一条记录；</p><p><strong>示例：</strong></p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO TABLE_NAME(&#39;id&#39;, &#39;column2&#39;) VALUES(&#39;&#39;, &#39;&#39;) ON DUPLICATE KEY UPDATE id &#x3D; &#39;111&#39;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><h5 id="MySQL字符串函数："><a href="#MySQL字符串函数：" class="headerlink" title="MySQL字符串函数："></a>MySQL字符串函数：</h5><ul><li><h5 id="ASCII-str-："><a href="#ASCII-str-：" class="headerlink" title="ASCII(str)："></a>ASCII(str)：</h5></li></ul><blockquote><p><strong>作用：</strong>返回第一个字符串的ASCII码值；如果字符串为空则返回0；</p><p><strong>示例：</strong></p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ASCII(&#39;2&#39;)</span><br></pre></td></tr></table></figure></blockquote></blockquote><ul><li><h5 id="ORD-str-："><a href="#ORD-str-：" class="headerlink" title="ORD(str)："></a>ORD(str)：</h5></li></ul><blockquote><p><strong>作用：</strong>如果字符串str句首是单字节返回与ASCII()函数返回的相同值。如果是一个多字节字符,以格式返回((first byte ASCII code)<em>256+(second byte ASCII code))[</em>256+third byte ASCII code…]  </p><p><strong>示例：</strong></p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ORD(&#39;2&#39;)</span><br></pre></td></tr></table></figure></blockquote></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;TIPS&quot;&gt;&lt;a href=&quot;#TIPS&quot; class=&quot;headerlink&quot; title=&quot;TIPS&quot;&gt;&lt;/a&gt;TIPS&lt;/h3&gt;&lt;blockquote&gt;
&lt;h5 id=&quot;ON-DUPLICATE-KEY-UPDATE使用：&quot;&gt;&lt;a href=&quot;#ON-DUP
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据存储/MySQL/04范式与反范式</title>
    <link href="https://zcy-fover.github.io/2020/03/20/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL/04%E8%8C%83%E5%BC%8F%E4%B8%8E%E5%8F%8D%E8%8C%83%E5%BC%8F/"/>
    <id>https://zcy-fover.github.io/2020/03/20/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL/04%E8%8C%83%E5%BC%8F%E4%B8%8E%E5%8F%8D%E8%8C%83%E5%BC%8F/</id>
    <published>2020-03-20T07:31:08.000Z</published>
    <updated>2020-03-20T07:31:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="范式与反范式"><a href="#范式与反范式" class="headerlink" title="范式与反范式"></a>范式与反范式</h2><h3 id="Schema-设计"><a href="#Schema-设计" class="headerlink" title="Schema 设计"></a>Schema 设计</h3><h4 id="太多的列"><a href="#太多的列" class="headerlink" title="太多的列"></a>太多的列</h4><p>MySQL 存储 API 引擎在工作的时候需要在服务器层和存储引擎层之间通过行缓冲格式拷贝数据，然后在服务器层将缓冲内容解码为各个列。但是这个过程代价是比较昂贵的，列越多代价就越大。MyISAM 的定长行结构实际上与服务器层的行结构刚好匹配，所以不需要转换；但是 MyISAM 的边长行结构与 InnoDB 的行结构总是需要转换。</p><h4 id="太多的关联"><a href="#太多的关联" class="headerlink" title="太多的关联"></a>太多的关联</h4><p>关联太多会导致查询性能和并发性降低</p><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>使用数据库枚举导致设计凌乱，而且枚举变化时需要执行 <code>ALTER TABLE</code> 这对于业务应用影响较大，尽量在上层应用中实现枚举。</p><h4 id="合理使用-NULL-值"><a href="#合理使用-NULL-值" class="headerlink" title="合理使用 NULL 值"></a>合理使用 NULL 值</h4><p>使用 NULL 值会使列的索引和索引统计难度增加，但是也不要完全摒弃。在特殊场景中合理使用避免自定特殊值导致应用出现其他问题。</p><h3 id="范式化"><a href="#范式化" class="headerlink" title="范式化"></a>范式化</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>更新操作比反范式化要更快</li><li>当数据很好的范式化时，就是有很少或者没有重复数据</li><li>范式化的表会更小</li><li>减少数据检索的难度，可以不使用 <code>DISTINCT</code> 或者 <code>GROUP BY</code></li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>设计上需要关联</li></ul><h4 id="反范式化"><a href="#反范式化" class="headerlink" title="反范式化"></a>反范式化</h4><p>会造成数据冗余但是没有关联是的查询会更高效。</p><h4 id="混用范式化与反范式化"><a href="#混用范式化与反范式化" class="headerlink" title="混用范式化与反范式化"></a>混用范式化与反范式化</h4><p>可以具体分析业务数据，将两者结合起来使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;范式与反范式&quot;&gt;&lt;a href=&quot;#范式与反范式&quot; class=&quot;headerlink&quot; title=&quot;范式与反范式&quot;&gt;&lt;/a&gt;范式与反范式&lt;/h2&gt;&lt;h3 id=&quot;Schema-设计&quot;&gt;&lt;a href=&quot;#Schema-设计&quot; class=&quot;headerlink
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据存储/MySQL/03MySQL数据类型</title>
    <link href="https://zcy-fover.github.io/2020/03/20/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL/03MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://zcy-fover.github.io/2020/03/20/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL/03MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-03-20T03:27:46.000Z</published>
    <updated>2020-03-20T03:27:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL-数据类型"><a href="#MySQL-数据类型" class="headerlink" title="MySQL 数据类型"></a>MySQL 数据类型</h2><h3 id="选择最优的数据类型"><a href="#选择最优的数据类型" class="headerlink" title="选择最优的数据类型"></a>选择最优的数据类型</h3><p><strong>更小的通常更好：</strong>选择满足数据范围的最小数据类型，因为他们可以占用更少的磁盘、内存和 CPU 缓存，处理时需要的 CPU 周期也更少；</p><p><strong>简单就好：</strong>简单的数据类型处理时需要更少的 CPU 周期；例如整型比字符操作代价更低；</p><p><strong>尽量避免 NULL 值：</strong>可为 NULL 的列使得索引、索引统计和值比较都更复杂；</p><h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><p>整数和实数可以用来存储整数，MySQL 有 <code>TINTINT(8)</code>、<code>SMALLINT(16)</code>、<code>MEDIUMINT(24)</code>、<code>INT(32)</code>、<code>BIGINT(64)</code>几种类型(数字表示 N 位存储空间)，值范围是 $-2^(N-1)~2^(N-1)-1$。</p><p>整数类型也可以选用 <code>UNSIGNED</code> 无符号数，上述所有类型正数部分扩大为原来的 2 倍。</p><p>MySQL 可以为整数类型指定宽度，这不会影响实际的数据存储。</p><h4 id="实数类型"><a href="#实数类型" class="headerlink" title="实数类型"></a>实数类型</h4><p>带有小数的数，<code>FLOAT(32)</code>和<code>DOUBLE(64)</code>类型使用标准的浮点数进行近似计算，<code>DECIMAL</code>用于存储精确的小数。<code>DECIMAL</code>只是一种存储格式，在实际计算中转换为 <code>DOUBLE</code>类型。MySQL 使用 <code>DOUBLE</code>作为内部的浮点数计算类型。</p><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><p><code>VARCHAR</code>、<code>CHAR</code>是两种主要的字符串类型。</p><h5 id="VARCHAR"><a href="#VARCHAR" class="headerlink" title="VARCHAR"></a>VARCHAR</h5><p>可存储变长字符串，必定长的类型更节省空间。如果 MySQL 表使用了 <code>ROW_FORMAT=FIXED</code> 创建的话，每一行会使用定长存储，这样比较浪费空间。</p><p><code>VARCHAR</code> 需要使用额外 1 或 2 个字节记录字符串长度，最大长度小于等于 255 时，使用一个字节记录，否则使用 2 字节。<code>VARCHAR</code> 节省了存储空间能提高性能，但是这样也导致在 <code>UPDATE</code> 需要更多的额外工作。例如一个行占用的空间边长，但是当前页内空间不足，MyISAM 会将行拆成不同片段存储，InnoDB 需要分裂页来存储。</p><p>适合使用 <code>VARCHAR</code> 的情况：字符串列最大长度比平均长度大很多；列的更新较少，碎片较少；使用了像 <code>UTF-8</code> 这样复杂的字符集，每个字符使用不同的字节数存储。</p><h5 id="CHAR"><a href="#CHAR" class="headerlink" title="CHAR"></a>CHAR</h5><p>定长存储，<code>CHAR</code> 比 <code>VARCHAR</code> 产生更少的碎片。对于单字节的字符串更适合用 <code>CHAR</code> 用 <code>VARCHAR</code> 会占用两个字节；<code>CHAR</code> 在存储字符串时会将字符串末尾的空格去掉。</p><p><code>BINARY</code> 和 <code>VARBINARY</code> 与上面的类似，他们存储的是二进制字符串，二进制字符串与常规字符串类似，但是存储的是字节码而不是字符，填充的时候是 <code>\0</code> (0字节)，而不是空格，检索时也不会去掉填充。</p><h4 id="BLOB-和-TEXT-类型"><a href="#BLOB-和-TEXT-类型" class="headerlink" title="BLOB 和 TEXT 类型"></a>BLOB 和 TEXT 类型</h4><p>更大的字符串数据类型，分别采用二进制和字符方式存储；两者分别对应有 <code>TINYTEXT</code>、<code>SMALLTEXT</code>、<code>TEXT</code>、<code>MEDIUMTEXT</code>、<code>LOGTEXT</code>；<code>TINYBLOB</code>、<code>SMALLBLOB</code>、<code>BLOB</code>、<code>MEDIUMBLOB</code>、<code>LOGBLOB</code>。<code>BLOB</code> 存储二进制数据，没有字符集和排序规则， <code>TEXT</code> 存储字符数据有字符集和排序规则。MySQL 在对这两个数据类型排序的时候不是针对整个字符串排序，而是没个列的最前 <code>max_sort_length</code> 字节做排序，或者使用 <code>ORDER BY SUSTRING(column, length)</code>。</p><h4 id="ENUM-类型"><a href="#ENUM-类型" class="headerlink" title="ENUM 类型"></a>ENUM 类型</h4><p>MySQL 会将每个值在列表中的位置保存为整数，并且在 .frm 文件中保存 <code>数字-字符串</code> 的映射关系表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table enum_test(ee ENUM(&#39;fish&#39;, &#39;apple&#39;, &#39;dog&#39;) not null);</span><br><span class="line">insert into enum_test(ee) values(&#39;fish&#39;, &#39;dog&#39;, &#39;apple&#39;);</span><br><span class="line">select ee+0 from enum_test; # 结果： 1 3 2</span><br><span class="line">select ee from enum_test order by ee; # 结果：fish  apple  dog</span><br></pre></td></tr></table></figure><p>可以看到在列的存储中，<code>enum</code> 存储的是对应位置的整数而不是具体枚举值；在排序中也是按照整数输出不是具体的字符串插入顺序。枚举的字符串列表是建表的时候初始化的，所以要修改的时候需要 <code>ALTER TABLE</code>。</p><h4 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h4><h5 id="DATETIME"><a href="#DATETIME" class="headerlink" title="DATETIME"></a>DATETIME</h5><p>从 1001 ~ 9999 年，精度为秒。与时区无关，占用 8 个字节存储空间。</p><h5 id="TIMESTAMP"><a href="#TIMESTAMP" class="headerlink" title="TIMESTAMP"></a>TIMESTAMP</h5><p>保存了从 <code>1970-01-01 00:00:00</code> 以来的秒数，只使用 4 个字节存储空间。MySQL 提供 <code>FROM_UNIXTIME</code> 将时间戳转换为日期， <code>UNIX_TIMESTAMP</code>  将日期转换为时间戳。</p><p><code>TIMESTAMP</code> 比 <code>DATETIME</code> 的空间效率更高。如果需要存储微秒级别的时间戳，可以使用 <code>BIGINT</code> 或者 <code>DOUBLE</code> 存储秒之后的小数部分，也可以使用 <code>MariaDB</code>。</p><h4 id="位数据类型"><a href="#位数据类型" class="headerlink" title="位数据类型"></a>位数据类型</h4><h5 id="BIT"><a href="#BIT" class="headerlink" title="BIT"></a>BIT</h5><p><code>BIT</code> 列最大长度是 64 位，MySQL 把 <code>BIT</code> 当作字符串类型，存储的是包含二进制 0 1 的字符串，而不是 ASCII 码值。检索 <code>BIT</code> 列时，例如存储的是 <code>b&quot;00110011&quot;</code>，在字符串环境中得到的是 ASCII 码值为 51 的字符  “9”，如果是在数字环境中则得到的是数字 51。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create table bit_test(bb bit(8));</span><br><span class="line">insert into bit_test(bb) values(b&#39;00110011&#39;);</span><br><span class="line">select bb, bb+0 from bit_test; # 输出： 3   51</span><br></pre></td></tr></table></figure><h5 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h5><p><code>SET</code> 数据类型可以利用 <code>FIND_IN_SET</code>、<code>FIELD</code> 方便查询，但是 <code>SET</code> 集合的修改需要使用 <code>ALTER TABLE</code> 进行修改；一般情况 <code>SET</code> 列上也无法使用索引检索。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MySQL-数据类型&quot;&gt;&lt;a href=&quot;#MySQL-数据类型&quot; class=&quot;headerlink&quot; title=&quot;MySQL 数据类型&quot;&gt;&lt;/a&gt;MySQL 数据类型&lt;/h2&gt;&lt;h3 id=&quot;选择最优的数据类型&quot;&gt;&lt;a href=&quot;#选择最优的数据类型&quot; c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据存储/MySQL/02MySQL性能剖析</title>
    <link href="https://zcy-fover.github.io/2020/03/17/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL/02MySQL%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90/"/>
    <id>https://zcy-fover.github.io/2020/03/17/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL/02MySQL%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90/</id>
    <published>2020-03-17T12:06:20.000Z</published>
    <updated>2020-03-17T12:06:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL-性能剖析"><a href="#MySQL-性能剖析" class="headerlink" title="MySQL 性能剖析"></a>MySQL 性能剖析</h2><p>通常指完成某件任务所需要的时间度量，也会考虑吞吐量、CPU利用率和可扩展性等等</p><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><h4 id="原则："><a href="#原则：" class="headerlink" title="原则："></a>原则：</h4><ul><li><strong>性能即响应时间：</strong>性能优化就是在一定的工作负载下尽可能的降低响应时间；性能优化不是降低 CPU 使用率，降低资源消耗，CPU 和资源就是被用来消耗的，如果机器不超负载的情况下，尽量利用资源提高性能。</li><li><strong>无法测量就无法优化：</strong>要能分析出执行的时间消耗在什么地方，这样才能谈优化</li></ul><h3 id="性能剖析"><a href="#性能剖析" class="headerlink" title="性能剖析"></a>性能剖析</h3><ul><li>测量任务所花费的时间</li><li>对结果进行排序，将重要的任务排在前面</li></ul><h4 id="理解性能剖析"><a href="#理解性能剖析" class="headerlink" title="理解性能剖析"></a>理解性能剖析</h4><ul><li>值的优化的查询：性能剖析并不会自动给出哪些需要优化，具体的情况需要自己根据实际业务、耗费精力情况来分析。</li><li>异常情况：有些任务出现的情况少，但是每次出现可能会造成异常或者导致了其他情况，可能虽然不是致命的。但是要认真分析解决，因为它可能是个不定时炸弹。</li><li>未知：性能剖析的工具会显示可能的“丢失时间”，即任务的实际处理时间和测量时间不一致。需要分析是什么情况造成，应用是不是还存在未知的处理。</li><li>被掩藏的细节：性能分析的结果不能只看平均值，突刺、标准差百分比等都需要关注</li></ul><h3 id="查询剖析"><a href="#查询剖析" class="headerlink" title="查询剖析"></a>查询剖析</h3><h4 id="剖析服务器负载"><a href="#剖析服务器负载" class="headerlink" title="剖析服务器负载"></a>剖析服务器负载</h4><ul><li>日志文件中捕获 MySQL 查询日志，是否存在慢查询日志。慢查询日志是重要的分析依据。</li><li>利用工具将查询日志解析为报告进行分析</li></ul><h4 id="剖析单条查询"><a href="#剖析单条查询" class="headerlink" title="剖析单条查询"></a>剖析单条查询</h4><p>使用 <code>SHOW PROFILE</code>、使用<code>SHOW STATUS</code>、使用慢查询日志 、使用 Performance Schema 工具针对单条查询语句做分析</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MySQL-性能剖析&quot;&gt;&lt;a href=&quot;#MySQL-性能剖析&quot; class=&quot;headerlink&quot; title=&quot;MySQL 性能剖析&quot;&gt;&lt;/a&gt;MySQL 性能剖析&lt;/h2&gt;&lt;p&gt;通常指完成某件任务所需要的时间度量，也会考虑吞吐量、CPU利用率和可扩展性等
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据存储/MySQL/01Mysql基准测试</title>
    <link href="https://zcy-fover.github.io/2020/03/16/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL/01Mysql%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/"/>
    <id>https://zcy-fover.github.io/2020/03/16/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL/01Mysql%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</id>
    <published>2020-03-16T03:47:26.000Z</published>
    <updated>2020-03-16T03:47:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL基准测试"><a href="#MySQL基准测试" class="headerlink" title="MySQL基准测试"></a>MySQL基准测试</h2><p>基准测试是观察系统在不同压力下的行为，评估系统的容量，掌握哪些变化是重要的，或者观察系统是如何处理不同的数据。他的主要问题就是他不是真实的压力测试，在正式的生产环境或者压力测试中，影响条件是多变的。</p><h3 id="基准测试的策略"><a href="#基准测试的策略" class="headerlink" title="基准测试的策略"></a>基准测试的策略</h3><ul><li>集成式：针对整个系统的整体测试</li><li>单组件式：单独测试 MySQL</li></ul><h3 id="测试指标"><a href="#测试指标" class="headerlink" title="测试指标"></a>测试指标</h3><p><strong>吞吐量：</strong>单位时间内的事务处理量。TPS、TPM指标等</p><p><strong>响应时间或延迟：</strong>测试任务所用的整体时间，计算出平均响应时间、最小响应时间、最大响应时间和所占百分比。</p><p><strong>并发性：</strong>Web 服务器的并发性标识会话存储机制可以处理多少数据的能力，度量指标是任意时间有多少同时发生的并发请求。当并发性增加时需要关注的是吞吐量是否下降、响应时间是否延长，如果出现下降和延长的情况，那应用就有可能无法处理峰值流量。</p><p><strong>可扩展性：</strong>系统的压力增加时，对应性能响应时间和吞吐量也应该线性增加。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MySQL基准测试&quot;&gt;&lt;a href=&quot;#MySQL基准测试&quot; class=&quot;headerlink&quot; title=&quot;MySQL基准测试&quot;&gt;&lt;/a&gt;MySQL基准测试&lt;/h2&gt;&lt;p&gt;基准测试是观察系统在不同压力下的行为，评估系统的容量，掌握哪些变化是重要的，或者观察
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>设计/设计模式/Head First设计模式</title>
    <link href="https://zcy-fover.github.io/2020/02/22/%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Head%20First%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://zcy-fover.github.io/2020/02/22/%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Head%20First%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-02-22T08:10:13.636Z</published>
    <updated>2020-02-22T08:10:13.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Head-First设计模式"><a href="#Head-First设计模式" class="headerlink" title="Head First设计模式"></a>Head First设计模式</h2><h3 id="OO基础"><a href="#OO基础" class="headerlink" title="OO基础"></a>OO基础</h3><blockquote><h4 id="抽象、封装、多态、继承"><a href="#抽象、封装、多态、继承" class="headerlink" title="抽象、封装、多态、继承"></a>抽象、封装、多态、继承</h4></blockquote><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><blockquote><ul><li><h4 id="找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混合在一起；"><a href="#找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混合在一起；" class="headerlink" title="找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混合在一起；"></a>找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混合在一起；</h4></li><li><h4 id="针对接口编程而不是针对实现编程"><a href="#针对接口编程而不是针对实现编程" class="headerlink" title="针对接口编程而不是针对实现编程"></a>针对接口编程而不是针对实现编程</h4></li><li><h4 id="多用组合少用继承"><a href="#多用组合少用继承" class="headerlink" title="多用组合少用继承"></a>多用组合少用继承</h4></li><li><h4 id="开放关闭原则"><a href="#开放关闭原则" class="headerlink" title="开放关闭原则"></a>开放关闭原则</h4></li><li><h4 id="最少知识原则：对象之间的交互要尽可能的少"><a href="#最少知识原则：对象之间的交互要尽可能的少" class="headerlink" title="最少知识原则：对象之间的交互要尽可能的少"></a>最少知识原则：对象之间的交互要尽可能的少</h4></li></ul></blockquote><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><blockquote><h4 id="定义了算法族，分别封装起来，让他们之间可以互相替换，在这种模式下可以让算法的变化独立于他们的使用者"><a href="#定义了算法族，分别封装起来，让他们之间可以互相替换，在这种模式下可以让算法的变化独立于他们的使用者" class="headerlink" title="定义了算法族，分别封装起来，让他们之间可以互相替换，在这种模式下可以让算法的变化独立于他们的使用者"></a>定义了算法族，分别封装起来，让他们之间可以互相替换，在这种模式下可以让算法的变化独立于他们的使用者</h4></blockquote><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><blockquote><h4 id="定义了对象之间的一对多依赖，这样当一个对象状态改变状态时，他的所有继承者都会收到通知并自动更新"><a href="#定义了对象之间的一对多依赖，这样当一个对象状态改变状态时，他的所有继承者都会收到通知并自动更新" class="headerlink" title="定义了对象之间的一对多依赖，这样当一个对象状态改变状态时，他的所有继承者都会收到通知并自动更新"></a>定义了对象之间的一对多依赖，这样当一个对象状态改变状态时，他的所有继承者都会收到通知并自动更新</h4><h4 id="观察者模式让主题和观察者之间松耦合"><a href="#观察者模式让主题和观察者之间松耦合" class="headerlink" title="观察者模式让主题和观察者之间松耦合"></a>观察者模式让主题和观察者之间松耦合</h4></blockquote><h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><blockquote><ul><li><h4 id="装饰者和被装饰者拥有共同的超类型"><a href="#装饰者和被装饰者拥有共同的超类型" class="headerlink" title="装饰者和被装饰者拥有共同的超类型"></a>装饰者和被装饰者拥有共同的超类型</h4></li><li><h4 id="可以用一个或者多个装饰者对象包装对象"><a href="#可以用一个或者多个装饰者对象包装对象" class="headerlink" title="可以用一个或者多个装饰者对象包装对象"></a>可以用一个或者多个装饰者对象包装对象</h4></li><li><h4 id="装饰者和被装饰对象拥有相同的超类，所以在任何需要使用超类型的地方都可以使用装饰过的对象代替"><a href="#装饰者和被装饰对象拥有相同的超类，所以在任何需要使用超类型的地方都可以使用装饰过的对象代替" class="headerlink" title="装饰者和被装饰对象拥有相同的超类，所以在任何需要使用超类型的地方都可以使用装饰过的对象代替"></a>装饰者和被装饰对象拥有相同的超类，所以在任何需要使用超类型的地方都可以使用装饰过的对象代替</h4></li><li><h4 id="装饰者可以在被装饰者对象的行为之前或之后加上自己的行为"><a href="#装饰者可以在被装饰者对象的行为之前或之后加上自己的行为" class="headerlink" title="装饰者可以在被装饰者对象的行为之前或之后加上自己的行为"></a>装饰者可以在被装饰者对象的行为之前或之后加上自己的行为</h4></li><li><h4 id="对象可以在任何时候被装饰"><a href="#对象可以在任何时候被装饰" class="headerlink" title="对象可以在任何时候被装饰"></a>对象可以在任何时候被装饰</h4></li></ul></blockquote><blockquote><ul><li><h4 id="装饰者模式的装饰者的行为来自自己和组件组合，继承超类型知识为了保证-装饰者和被装饰这达到类型匹配"><a href="#装饰者模式的装饰者的行为来自自己和组件组合，继承超类型知识为了保证-装饰者和被装饰这达到类型匹配" class="headerlink" title="装饰者模式的装饰者的行为来自自己和组件组合，继承超类型知识为了保证 装饰者和被装饰这达到类型匹配"></a>装饰者模式的装饰者的行为来自自己和组件组合，继承超类型知识为了保证 装饰者和被装饰这达到类型匹配</h4></li></ul></blockquote><blockquote><ul><li><h4 id="装饰者模式动态得将责任附加到对象上，"><a href="#装饰者模式动态得将责任附加到对象上，" class="headerlink" title="装饰者模式动态得将责任附加到对象上，"></a>装饰者模式动态得将责任附加到对象上，</h4></li></ul></blockquote><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><blockquote><ul><li><h4 id="工厂模式通过让子类决定该创建什么对象来达到将创建对象的过程封装"><a href="#工厂模式通过让子类决定该创建什么对象来达到将创建对象的过程封装" class="headerlink" title="工厂模式通过让子类决定该创建什么对象来达到将创建对象的过程封装"></a>工厂模式通过让子类决定该创建什么对象来达到将创建对象的过程封装</h4></li></ul></blockquote><blockquote><h4 id="依赖倒置"><a href="#依赖倒置" class="headerlink" title="依赖倒置"></a>依赖倒置</h4><blockquote><ul><li>变量不可以持有具体类的引用</li><li>不要让类派生自具体类</li><li>不要覆盖基类中已经实现的方法</li></ul></blockquote></blockquote><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><blockquote><h4 id="确保一个类只有一个实例，并且可以提供全局访问点（类访问）"><a href="#确保一个类只有一个实例，并且可以提供全局访问点（类访问）" class="headerlink" title="确保一个类只有一个实例，并且可以提供全局访问点（类访问）"></a>确保一个类只有一个实例，并且可以提供全局访问点（类访问）</h4></blockquote><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><blockquote><h4 id="命令模式将请求封装成一个对象，以便不同的请求、队列或日志来参数化其他对象。命令模式也支持撤销操作。"><a href="#命令模式将请求封装成一个对象，以便不同的请求、队列或日志来参数化其他对象。命令模式也支持撤销操作。" class="headerlink" title="命令模式将请求封装成一个对象，以便不同的请求、队列或日志来参数化其他对象。命令模式也支持撤销操作。"></a>命令模式将请求封装成一个对象，以便不同的请求、队列或日志来参数化其他对象。命令模式也支持撤销操作。</h4></blockquote><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><blockquote><h4 id="将一个类的接口转换成客户期望的另一个接口，适配器让原本不兼容的接口可以合作"><a href="#将一个类的接口转换成客户期望的另一个接口，适配器让原本不兼容的接口可以合作" class="headerlink" title="将一个类的接口转换成客户期望的另一个接口，适配器让原本不兼容的接口可以合作"></a>将一个类的接口转换成客户期望的另一个接口，适配器让原本不兼容的接口可以合作</h4></blockquote><blockquote><ul><li>对象适配器：通过组合实现</li><li>类适配器：通过多继承实现</li></ul></blockquote><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><blockquote><h4 id="外观模式提供了一个统一的接口，用来访问系统中的一群接口。外观模式定义了一个高层接口，让子系统的功能调用更简单；"><a href="#外观模式提供了一个统一的接口，用来访问系统中的一群接口。外观模式定义了一个高层接口，让子系统的功能调用更简单；" class="headerlink" title="外观模式提供了一个统一的接口，用来访问系统中的一群接口。外观模式定义了一个高层接口，让子系统的功能调用更简单；"></a>外观模式提供了一个统一的接口，用来访问系统中的一群接口。外观模式定义了一个高层接口，让子系统的功能调用更简单；</h4></blockquote><blockquote><h4 id="外观不只是简化了接口，也将客户从子系统的接口中解耦"><a href="#外观不只是简化了接口，也将客户从子系统的接口中解耦" class="headerlink" title="外观不只是简化了接口，也将客户从子系统的接口中解耦"></a>外观不只是简化了接口，也将客户从子系统的接口中解耦</h4></blockquote><blockquote><h4 id="外观和适配器可以包装很多类，但是外观模式知识简化了接口的使用，适配器模式是将接口转换成不同的接口；"><a href="#外观和适配器可以包装很多类，但是外观模式知识简化了接口的使用，适配器模式是将接口转换成不同的接口；" class="headerlink" title="外观和适配器可以包装很多类，但是外观模式知识简化了接口的使用，适配器模式是将接口转换成不同的接口；"></a>外观和适配器可以包装很多类，但是外观模式知识简化了接口的使用，适配器模式是将接口转换成不同的接口；</h4></blockquote><h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><blockquote><h4 id="模板方法定义了一个算法的步骤，并允许子类为一个或多个步骤提供实现"><a href="#模板方法定义了一个算法的步骤，并允许子类为一个或多个步骤提供实现" class="headerlink" title="模板方法定义了一个算法的步骤，并允许子类为一个或多个步骤提供实现"></a>模板方法定义了一个算法的步骤，并允许子类为一个或多个步骤提供实现</h4></blockquote><blockquote><h4 id="模板方法可以使得子类在不改变算法结构的情况下，重新定义算法中的某些步骤"><a href="#模板方法可以使得子类在不改变算法结构的情况下，重新定义算法中的某些步骤" class="headerlink" title="模板方法可以使得子类在不改变算法结构的情况下，重新定义算法中的某些步骤"></a>模板方法可以使得子类在不改变算法结构的情况下，重新定义算法中的某些步骤</h4></blockquote><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><blockquote><h4 id="提供一种方法顺序访问一个聚合对象的内部元素，而不暴露其内部的实现"><a href="#提供一种方法顺序访问一个聚合对象的内部元素，而不暴露其内部的实现" class="headerlink" title="提供一种方法顺序访问一个聚合对象的内部元素，而不暴露其内部的实现"></a>提供一种方法顺序访问一个聚合对象的内部元素，而不暴露其内部的实现</h4></blockquote><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><blockquote><h4 id="允许你将对象组合成树形结构来表现“-整体-部分”层次结构，组合能让用户以一致的方式处理个别对象以及对象组合。"><a href="#允许你将对象组合成树形结构来表现“-整体-部分”层次结构，组合能让用户以一致的方式处理个别对象以及对象组合。" class="headerlink" title="允许你将对象组合成树形结构来表现“ 整体 / 部分”层次结构，组合能让用户以一致的方式处理个别对象以及对象组合。"></a>允许你将对象组合成树形结构来表现“ 整体 / 部分”层次结构，组合能让用户以一致的方式处理个别对象以及对象组合。</h4></blockquote><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><blockquote><h4 id="状态模式允许对象在内部状态改变时改变他的行为，对象看起来好想改变了他的类。"><a href="#状态模式允许对象在内部状态改变时改变他的行为，对象看起来好想改变了他的类。" class="headerlink" title="状态模式允许对象在内部状态改变时改变他的行为，对象看起来好想改变了他的类。"></a>状态模式允许对象在内部状态改变时改变他的行为，对象看起来好想改变了他的类。</h4></blockquote><div style="text-align:center;margin-top:50px;margin-bottom:50px;">    <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Head-First设计模式&quot;&gt;&lt;a href=&quot;#Head-First设计模式&quot; class=&quot;headerlink&quot; title=&quot;Head First设计模式&quot;&gt;&lt;/a&gt;Head First设计模式&lt;/h2&gt;&lt;h3 id=&quot;OO基础&quot;&gt;&lt;a href=&quot;#O
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>职业精神/代码整洁之道/代码整洁之道</title>
    <link href="https://zcy-fover.github.io/2020/02/22/%E8%81%8C%E4%B8%9A%E7%B2%BE%E7%A5%9E/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    <id>https://zcy-fover.github.io/2020/02/22/%E8%81%8C%E4%B8%9A%E7%B2%BE%E7%A5%9E/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/</id>
    <published>2020-02-22T08:07:46.828Z</published>
    <updated>2020-02-22T08:07:46.830Z</updated>
    
    <content type="html"><![CDATA[<p>#《代码整洁之道》</p><blockquote><p>勒布朗法则：稍后等于永不。</p></blockquote><h3 id="第一章-整洁代码"><a href="#第一章-整洁代码" class="headerlink" title="第一章  整洁代码"></a>第一章  整洁代码</h3><h5 id="1、糟糕代码的原因"><a href="#1、糟糕代码的原因" class="headerlink" title="1、糟糕代码的原因"></a>1、糟糕代码的原因</h5><blockquote><p>在我自己来看，写出糟糕代码可能是以下几个原因：</p><ul><li>编程经验不够，没有意识到代码整洁的重要性，处于功能实现即可完成任务的阶段；</li><li>有“整洁代码、优化代码”的意识，在具体编程时，由于项目进度和时间的原因，没有时间去思考如何优化，如何使代码整洁。最后只能草草了事，完成任务即可。想着可以后续继续优化，但只是停留在这想法上了。</li><li>力不从心，有优化代码的想法，但是不知道该如何进行优化、整洁。或者是不知道如何深层次的进行优化。</li></ul></blockquote><h5 id="2、整洁代码"><a href="#2、整洁代码" class="headerlink" title="2、整洁代码"></a>2、整洁代码</h5><blockquote><p>在Bjarne Stroustrup认为，整洁代码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/0F4900F572324F36B3E61138387133ED?method=download&shareKey=69f16bfb706cc3cd9216f7159243f66a" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></blockquote><blockquote><p>在Grady Booch看来，整洁代码为：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/0A4E97760DBD4B3E96C1BBAC50EF0055?method=download&shareKey=e94b38a7af0d5bf9370a847afb8f5c72" alt="整洁代码2" title="">                </div>                <div class="image-caption">整洁代码2</div>            </figure></blockquote><blockquote><p>Dave Thomas认为：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/6957B2074516409CB8E307FFB504E865?method=download&shareKey=84b30ad4c8ba71ced1453e9cbae2daad" alt="整洁代码3" title="">                </div>                <div class="image-caption">整洁代码3</div>            </figure></blockquote><blockquote><p>Michael Feathers认为：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/E2BD041522914D82A5DDE3A4DD6EB206?method=download&shareKey=5aecf43ba139e90014155e4674b73740" alt="整洁代码4" title="">                </div>                <div class="image-caption">整洁代码4</div>            </figure></blockquote><blockquote><p>Ron Jeffries认为：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/6EACC9AB08134A558A1B5598B8633E08?method=download&shareKey=2b7a2890211f06d7227b15495eda8495" alt="整洁代码5" title="">                </div>                <div class="image-caption">整洁代码5</div>            </figure></blockquote><h3 id="第二章-有意义的命名"><a href="#第二章-有意义的命名" class="headerlink" title="第二章  有意义的命名"></a>第二章  有意义的命名</h3><h5 id="1、文件命名"><a href="#1、文件命名" class="headerlink" title="1、文件命名"></a>1、文件命名</h5><blockquote><p>文件一般包括类、配置文件和资源文件。文件的命名一般是名次或者名次短语。</p></blockquote><h5 id="2、方法命名"><a href="#2、方法命名" class="headerlink" title="2、方法命名"></a>2、方法命名</h5><blockquote><p>这种类型的命名一般是动词或者动词短语。方法一般是为解决某个问题或者处理某种逻辑而存在的，在命名上最好是体现出这个方法的作用</p></blockquote><h5 id="3、属性命名"><a href="#3、属性命名" class="headerlink" title="3、属性命名"></a>3、属性命名</h5><blockquote><p>普通属性可以使用驼峰式；静态变量属性最好使用A_B_C式的。命名使用英语单词，避免中英混杂，名字最好可以体现这个属性所表达的意义。</p></blockquote><h3 id="第三章-函数"><a href="#第三章-函数" class="headerlink" title="第三章 函数"></a>第三章 函数</h3><blockquote><ol><li>函数应当尽量的短；</li><li>函数的缩进层级最多应当为2级，注意在if、else、while、for等语句块里面应当只是一个函数调用，不应再嵌套；</li><li>函数应当只做好一件事。（看一个函数是否还可以拆分）</li><li>函数名称上面也叙述过了，不要担心函数名称长度。长而具有描述性的名称是可以被接受的，命名的风格要保持一致；</li><li>函数的参数应当尽可能的少，最多为三个；</li></ol></blockquote><blockquote><p>函数的书写功底也并非一日之功，想写出高效简洁就可以写出来的，是需要有一定的代码积累，有一定的编程架构思想，懂得功能分解才能达到的境界，不然也只是部分优化或者不完全优化，达不到一个高标准。</p></blockquote><h3 id="第四章-注释"><a href="#第四章-注释" class="headerlink" title="第四章 注释"></a>第四章 注释</h3><blockquote><p>以前在自己看来，多写点注视应该总是没错的，对自己看代码或者后面的开发者看总是有益无害的。但是看了本书之后，纠结于以后到底要不要写注释，且现在来看自己以前写的都是烂注释，书中对于注释要求甚是严格：</p></blockquote><h5 id="1、好注释："><a href="#1、好注释：" class="headerlink" title="1、好注释："></a>1、好注释：</h5><blockquote><ul><li>提供法律信息</li><li>提供代码的有效信息</li><li>说明意图，解释代码的意图，或者是输出什么结果</li><li>可以阐释代码的结果，以进行比对，但是务必要保证注释的正确性，避免风险</li><li>有警示作用的代码，提醒读者或者此处需要注意什么问题</li><li>利用TODO或者FIX注释，标识将来需要完成或者完善的功能</li></ul></blockquote><h5 id="2、坏注释"><a href="#2、坏注释" class="headerlink" title="2、坏注释"></a>2、坏注释</h5><blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/F2C2AA03773245F7AB0EE5DC6BF7C932?method=download&shareKey=2cf7854300efc43250e71ff7c695447b" alt="坏注释" title="">                </div>                <div class="image-caption">坏注释</div>            </figure></blockquote><h3 id="第五章-代码格式"><a href="#第五章-代码格式" class="headerlink" title="第五章 代码格式"></a>第五章 代码格式</h3><h3 id="第六章-对象和数据结构"><a href="#第六章-对象和数据结构" class="headerlink" title="第六章 对象和数据结构"></a>第六章 对象和数据结构</h3><h5 id="1、影藏对象，暴露操作"><a href="#1、影藏对象，暴露操作" class="headerlink" title="1、影藏对象，暴露操作"></a>1、影藏对象，暴露操作</h5><blockquote><p>过程式代码难以添加数据结构，因为必须修改所有的函数；面向对象代码难以添加新函数，因为需要修改所有的类。</p></blockquote><h3 id="第七章-错误处理"><a href="#第七章-错误处理" class="headerlink" title="第七章 错误处理"></a>第七章 错误处理</h3><blockquote><p> 1、避免使用返回错误码，利用异常处理错误</p><p> 2、使用catch finally去捕获异常，使用不可控异常，在方法上抛出异常，会违背接口设计的开放必和原则，在它的继承和使用方法上都得抛出该异常，在底层如果修改了代码，可能会影响到其他的方法调用</p><p> 3、最好在代码中给出异常可能发生的环境</p></blockquote><h3 id="第八章-边界"><a href="#第八章-边界" class="headerlink" title="第八章 边界"></a>第八章 边界</h3><blockquote><p>没看太懂</p></blockquote><h3 id="第九章-单元测试"><a href="#第九章-单元测试" class="headerlink" title="第九章 单元测试"></a>第九章 单元测试</h3><h5 id="1、重视测试"><a href="#1、重视测试" class="headerlink" title="1、重视测试"></a>1、重视测试</h5><blockquote><p>在项目团队中，如果不是有要求，我想应该是没有几分人会去主动写测试类的。所以首先有这个意识很重要。项目中也有测试团队这也许导致了开发有所依赖，所以不去编写测试代码或者是随意编写测试代码。但实际上编写简洁、整洁的测试代码是对自己的代码的检验，也是一种责任的体现，团队中每个环节、每个人都能超标保证自己的任务的质量，不去依赖下一个环节，项目的质量就会提高。</p></blockquote><h5 id="2、测试的F-I-R-S-T规则"><a href="#2、测试的F-I-R-S-T规则" class="headerlink" title="2、测试的F.I.R.S.T规则"></a>2、测试的F.I.R.S.T规则</h5><blockquote><ul><li><strong>快速(Fast):</strong> 测试代码的逻辑不应太过复杂，能够快速运行，如果测试代码运行过慢，可能就不会频繁进行测试了；</li><li>*<em>独立(Independent): *</em>每个测试方法测试类应当独立，彼此之间不能有依赖，某个测试不能成为下一个测试的依赖条件，这会导致测试很复杂；</li><li><strong>可重复(Repeatable):</strong> 测试不应该依赖环境，在任何环境中都应当测试通过，当测试不能在任意环境中重复测试时，说明代码中存在导致其失败的接口；</li><li><strong>自足验证(Self-Validating):</strong> 么个测试方法运行都应当有true或false输出，测试者不应当通过查询日志或主观判断进行验证。</li><li><strong>及时(Timely):</strong> 测试应及时编写，单元测试应当在使其通过的生产代码之前编写。否则生产代码编写好之后可能会由于生产代码的逻辑复杂就不会去编写测试代码了。</li></ul></blockquote><h3 id="第十章-类"><a href="#第十章-类" class="headerlink" title="第十章 类"></a>第十章 类</h3><h3 id="第十一章-系统"><a href="#第十一章-系统" class="headerlink" title="第十一章 系统"></a>第十一章 系统</h3><blockquote><p>“一开始就做对系统”是不可能的，我们应当只去实现用户当前的需求，然后对系统重构，实现新的用户需求。但是在我认为，在我们有了大数据之后，我们应该去探索、预测用户的需求，一味被动等待用户有了需求在去实现就有点落后了。</p></blockquote><h3 id="第十七章-味道与启发"><a href="#第十七章-味道与启发" class="headerlink" title="第十七章 味道与启发"></a>第十七章 味道与启发</h3><h5 id="1、注释"><a href="#1、注释" class="headerlink" title="1、注释"></a>1、注释</h5><blockquote><ul><li>不恰当的信息：注释只应当描述有关代码和设计的技术性信息</li><li>废弃的注释：应当即使删除掉或者更新</li><li>冗余的注释</li><li>糟糕的注释：写注释应当和写代码一样，要思考一下</li><li>注释掉的代码：应当及时删除</li></ul></blockquote><h5 id="2、环境"><a href="#2、环境" class="headerlink" title="2、环境"></a>2、环境</h5><blockquote><ul><li>需要多少步才能实现构建：应当使用单个命令签出系统，并用单个指令构建，系统的构建不应当是分小步或者是繁琐的。</li><li>需要多少步才能做到的测试：单元测试应当可以在一个指令下全部运行。</li></ul></blockquote><h5 id="3、函数"><a href="#3、函数" class="headerlink" title="3、函数"></a>3、函数</h5><blockquote><ul><li>过多的参数：一个函数的参数应当少于3个，多余三个时应当被封装成为一个对象；</li><li>输出参数：输出单数违反直觉，可以直接改变对象的状态</li><li>表示参数：函数中的标识参数过多说明函数做了不止一件事</li><li>死函数：没有被调用的函数应当删除掉</li></ul></blockquote><h5 id="4、一般性问题"><a href="#4、一般性问题" class="headerlink" title="4、一般性问题"></a>4、一般性问题</h5><blockquote><ul><li>一个源文件存在多种语言：一个源文件的语言种类应当尽可能的少，降低文件的复杂性</li><li>明显的行为未被实现：函数的实现应当按照其描述或名字定义所形容的实现</li><li>不正确的边界行为：边界行为要靠编辑测试去发现不应当靠直觉</li><li>忽视安全：警告也有可能造成程序运行的错误，对于安全机制和警告应当去处理而不是视而不见</li><li>重复：代码中又重复说明代码还有可以优化和抽象的地方</li><li>在错误的抽象层级上的代码：抽象类和派生类的界限需要根据设计划分清楚</li><li>基类依赖于派生类：</li><li>信息过多：</li><li>死代码：删除系统中存在的死代码</li><li>垂直分割：变量函数的定义和位置，应当遵循前面章节所描述的</li><li>前后不一致：同类型的变量或方法取名定义时在系统中应当是一致的</li><li>混淆视听：没有实现的构造器、没有用到的变量、没有调用的函数、没有信息量的注释；这些都应当被疑除掉。</li><li>人为耦合：声明函数、变量和常量应当有统一的地方，而不是信手拈来的位置</li><li>选择算子参数：</li><li>晦涩的意图：代码要尽可能有表达力</li><li>位置错误的权责：</li><li>不恰当的静态方法：一般情况下尽量使用非静态函数，除非该函数没必要使用多态</li><li>使用解释性变量：</li><li>函数名称应该表达其行为：</li><li>理解算法;</li><li>用多态代替if\else和switch\case</li><li>遵循标准约定：</li><li>用命名变量代替魔术数：</li><li>准确：消除代码的不确定性</li><li>结构基于约定：</li><li>封装条件：通常if和while语句内的判断条件如果过多都是可以封装成为一个函数的</li><li>避免否定性条件：肯定是条件要比否定式条件好理解</li><li>函数只该做一件事：</li><li>掩蔽时序耦合：当调用函数的执行是有顺序的时候，可以通过调用显示执行</li><li>别随意</li><li>封装边界条件：编辑处理的代码应当集中在一处，不应散落在代码中</li><li>函数应该只在一个抽象层级上</li><li>在较高层级放置可配置数据</li><li>避免传递浏览</li></ul></blockquote><h5 id="6、Java"><a href="#6、Java" class="headerlink" title="6、Java"></a>6、Java</h5><blockquote><ul><li>通过使用通配符避免过长的导入清单</li><li>不要继承变量</li><li>常量和枚举</li></ul></blockquote><h5 id="7、名称"><a href="#7、名称" class="headerlink" title="7、名称"></a>7、名称</h5><blockquote><ul><li>采用描述性名称</li><li>名称应与抽象层级相符</li><li>尽可能使用标准命名法</li><li>无歧义的名称</li><li>为较大作用范围选用较长的名字</li><li>避免编码</li><li>函数名称应当与函数功能相符，不应当有副作用</li></ul></blockquote><h5 id="8、测试"><a href="#8、测试" class="headerlink" title="8、测试"></a>8、测试</h5><blockquote><ul><li>测试不足：测试的覆盖率没有达到100%，就是不足</li><li>使用测试覆盖率的工具</li><li>别略过小测试</li><li>被忽略的测试就是对不确定事物的疑问</li><li>边界条件的测试</li><li>全面测试相近的缺陷</li><li>测试失败的模式有启发性</li><li>测试覆盖率的模式有启发性</li><li>测试应该快速</li></ul></blockquote><div style="text-align:center;margin-top:50px;margin-bottom:50px;">    <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#《代码整洁之道》&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;勒布朗法则：稍后等于永不。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;第一章-整洁代码&quot;&gt;&lt;a href=&quot;#第一章-整洁代码&quot; class=&quot;headerlink&quot; title=&quot;第一章  整洁代码&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>middle-service/apm/Skywalking/Skywalking介绍</title>
    <link href="https://zcy-fover.github.io/2020/02/22/middle-service/apm/Skywalking/Skywalking%E4%BB%8B%E7%BB%8D/"/>
    <id>https://zcy-fover.github.io/2020/02/22/middle-service/apm/Skywalking/Skywalking%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-02-22T08:01:24.987Z</published>
    <updated>2020-02-22T08:01:24.988Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Skywalking背景"><a href="#Skywalking背景" class="headerlink" title="Skywalking背景"></a>Skywalking背景</h3><blockquote><ul><li>Apache 孵化器项目</li><li>加入 OneAPM 公司</li></ul></blockquote><h3 id="Skywalking-介绍（分布式-APM-系统-分布式追踪系统）"><a href="#Skywalking-介绍（分布式-APM-系统-分布式追踪系统）" class="headerlink" title="Skywalking 介绍（分布式 APM 系统 / 分布式追踪系统）"></a>Skywalking 介绍（分布式 APM 系统 / 分布式追踪系统）</h3><blockquote><ul><li><h5 id="全自动探针检测，不需要修改应用程序代码（可支持的中间件和组件：）"><a href="#全自动探针检测，不需要修改应用程序代码（可支持的中间件和组件：）" class="headerlink" title="全自动探针检测，不需要修改应用程序代码（可支持的中间件和组件：）"></a>全自动探针检测，不需要修改应用程序代码（可支持的中间件和组件：）</h5></li><li><h5 id="支持手动探针监控，用埋点的方式手动上传业务数据；"><a href="#支持手动探针监控，用埋点的方式手动上传业务数据；" class="headerlink" title="支持手动探针监控，用埋点的方式手动上传业务数据；"></a>支持手动探针监控，用埋点的方式手动上传业务数据；</h5></li><li><h5 id="SkyWalking提供了支持-OpenTracing-标准的-SDK。也支持-OpenTracing-Java-支持的组件"><a href="#SkyWalking提供了支持-OpenTracing-标准的-SDK。也支持-OpenTracing-Java-支持的组件" class="headerlink" title="SkyWalking提供了支持 OpenTracing 标准的 SDK。也支持 OpenTracing-Java 支持的组件"></a>SkyWalking提供了支持 OpenTracing 标准的 SDK。也支持 OpenTracing-Java 支持的组件</h5></li><li><h5 id="自动监控和手动监控可以同时使用，使用手动监控弥补自动监控不支持的组件，或者私有化组件；"><a href="#自动监控和手动监控可以同时使用，使用手动监控弥补自动监控不支持的组件，或者私有化组件；" class="headerlink" title="自动监控和手动监控可以同时使用，使用手动监控弥补自动监控不支持的组件，或者私有化组件；"></a>自动监控和手动监控可以同时使用，使用手动监控弥补自动监控不支持的组件，或者私有化组件；</h5></li><li><h5 id="纯-Java-后端分析程序，提供-RESTful-服务，可为其他语言探针提供分析能力；"><a href="#纯-Java-后端分析程序，提供-RESTful-服务，可为其他语言探针提供分析能力；" class="headerlink" title="纯 Java 后端分析程序，提供 RESTful 服务，可为其他语言探针提供分析能力；"></a>纯 Java 后端分析程序，提供 RESTful 服务，可为其他语言探针提供分析能力；</h5></li><li><h5 id="高性能纯流式分析；"><a href="#高性能纯流式分析；" class="headerlink" title="高性能纯流式分析；"></a>高性能纯流式分析；</h5></li><li><h5 id="可将-traceId。集成到主流的日志框架中输出，如-log4j，logback-等"><a href="#可将-traceId。集成到主流的日志框架中输出，如-log4j，logback-等" class="headerlink" title="可将 traceId。集成到主流的日志框架中输出，如 log4j，logback 等"></a>可将 traceId。集成到主流的日志框架中输出，如 log4j，logback 等</h5></li><li><h5 id="对应的-WEB-页面由单独的工程进行发布（sky-walking-ui）"><a href="#对应的-WEB-页面由单独的工程进行发布（sky-walking-ui）" class="headerlink" title="对应的 WEB 页面由单独的工程进行发布（sky-walking-ui）"></a>对应的 WEB 页面由单独的工程进行发布（sky-walking-ui）</h5></li></ul></blockquote><h3 id="Skywalking-架构图"><a href="#Skywalking-架构图" class="headerlink" title="Skywalking 架构图"></a>Skywalking 架构图</h3><blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/WEB4b3841616dbf0e7d80036fc53c2bdf3b?method=download&shareKey=33b552f37bf7ec2e597b48868affea3e" alt="架构图" title="">                </div>                <div class="image-caption">架构图</div>            </figure><ul><li>Skywalking-web：web 可视化平台，用来展示数据</li><li>skywalking-collector：链路数据归集器，数据可以落地 ElasticSearch，单机也可以落地 H2，不推荐，H2 仅作为临时演示用</li><li>skywalking-agent：探针，用来收集和发送数据到归集器</li></ul></blockquote><h3 id="Skywalking-目前暴露的三个问题"><a href="#Skywalking-目前暴露的三个问题" class="headerlink" title="Skywalking 目前暴露的三个问题"></a>Skywalking 目前暴露的三个问题</h3><blockquote><p><strong>现象</strong>：</p><blockquote><ul><li>Agent 和 Collector 正常工作，没有异常日志</li><li>已经对系统进行过访问，Trace 查询有数据</li><li>UI 除 Trace 查询页面外，其他页面无数据</li></ul></blockquote><p><strong>原因</strong>： Collector 和被监控应用的系统主机时间，没有同步</p><p><strong>解决方法</strong>： 同步各主机操作系统时间</p></blockquote><blockquote><p><strong>现象</strong> ： Kafka 消息消费端链路断裂</p><p><strong>原因</strong>： Kafka 探针只是追踪了对 Kafka 的拉取动作，而整个后续处理过程不是由 kafka consumer 发起。故需要在消费处理的发起点，进行手动埋点</p><p><strong>解决方法</strong>: 可以通过 Application Toolkit 中的<code>@Trace</code>标注，或者 OpenTracing API 进行手动埋点</p></blockquote><blockquote><p><strong>现象</strong>：</p><blockquote><ul><li>加载探针并启动应用</li><li>Console 中被 GRPC 日志刷屏</li></ul></blockquote><p><strong>原因</strong>：Skywalking 采用了 GRPC 框架发送数据，GRPC 框架读取 log 的配置文件进行日志输出。</p><p><strong>解决方法</strong>: 在log的配置文件中添加对<code>org.apache.skywalking.apm.dependencies</code>包的过滤</p></blockquote><h3 id="Dapper-的缺点"><a href="#Dapper-的缺点" class="headerlink" title="Dapper 的缺点"></a>Dapper 的缺点</h3><blockquote><ul><li>合并的影响：我们的模型隐含的前提是不同的子系统在处理的都是来自同一个被跟踪的请求。在某些情况下，缓冲一部分请求，然后一次性操作一个请求集会更加有效。（比如，磁盘上的一次合并写入操作）。在这种情况下，一个被跟踪的请求可以看似是一个大型工作单元。此外，当有多个追踪请求被收集在一起，他们当中只有一个会用来生成那个唯一的跟踪 ID，用来给其他 span 使用，所以就无法跟踪下去了。我们正在考虑的解决方案，希望在可以识别这种情况的前提下，用尽可能少的记录来解决这个问题。</li><li>跟踪批处理负载：Dapper 的设计，主要是针对在线服务系统，最初的目标是了解一个用户请求产生的系统行为。然而，离线的密集型负载，例如符合MapReduce[10]模型的情况，也可以受益于性能挖潜。在这种情况下，我们需要把跟踪ID与一些其他的有意义的工作单元做关联，诸如输入数据中的键值（或键值的范围），或是一个 MapReduce shard。</li><li>寻找根源：Dapper 可以有效地确定系统中的哪一部分致使系统整个速度变慢，但并不一定能够找出问题的根源。例如，一个请求很慢有可能不是因为它自己的行为，而是由于队列中其他排在它前面的(queued ahead of)请求还没处理完。程序可以使用应用级的 annotation 把队列的大小或过载情况写入跟踪系统。可以采用成对的采样技术可以解决这个问题。它由两个时间重叠的采样率组成，并观察它们在整个系统中的相对延迟。</li><li>记录内核级的信息：一些内核可见的事件的详细信息有时对确定问题根源是很有用的。我们有一些工具，能够跟踪或以其他方式描述内核的执行，但是，想用通用的或是不那么突兀的方式，是很难把这些信息到捆绑到用户级别的跟踪上下文中。我们正在研究一种妥协的解决方案，我们在用户层面上把一些内核级的活动参数做快照，然后绑定他们到一个活动的 span 上。</li></ul></blockquote><h3 id="Skywalking竞品"><a href="#Skywalking竞品" class="headerlink" title="Skywalking竞品"></a>Skywalking竞品</h3><blockquote><h4 id="同类型企业级收费产品"><a href="#同类型企业级收费产品" class="headerlink" title="同类型企业级收费产品"></a>同类型企业级收费产品</h4><blockquote><ul><li><strong>OneAPM</strong>：<a href="http://www.oneapm.com/" target="_blank" rel="noopener">http://www.oneapm.com/</a></li><li><strong>透视宝</strong>：<a href="http://www.toushibao.com/product_server.html" target="_blank" rel="noopener">http://www.toushibao.com/product_server.html</a></li><li><strong>华为</strong>：<a href="http://www.huaweicloud.com/product/apm.html?utm_source=Baidu&amp;utm_medium=cpc&amp;utm_campaign=CP-APM&amp;utm_content=CJ&amp;utm_term=APM" target="_blank" rel="noopener">http://www.huaweicloud.com/product/apm.html?utm_source=Baidu&amp;utm_medium=cpc&amp;utm_campaign=CP-APM&amp;utm_content=CJ&amp;utm_term=APM</a></li><li><strong>Testin听云</strong>：<a href="https://www.testin.cn/" target="_blank" rel="noopener">https://www.testin.cn/</a></li></ul></blockquote><h4 id="开源工具"><a href="#开源工具" class="headerlink" title="开源工具"></a>开源工具</h4><blockquote><ul><li><strong>Twitter Zipkin</strong>：<a href="http://zipkin.io/" target="_blank" rel="noopener">http://zipkin.io/</a> （finagle 分布式微服务框架）</li><li><strong>美团点评 CAT</strong>：<a href="https://link.jianshu.com/?t=https://github.com/dianping/cat" target="_blank" rel="noopener">https://link.jianshu.com/?t=https://github.com/dianping/cat</a></li><li><strong>应用性能管理工具 PinPoint</strong>：<a href="https://link.jianshu.com/?t=https://github.com/naver/pinpoint" target="_blank" rel="noopener">https://link.jianshu.com/?t=https://github.com/naver/pinpoint</a></li><li><strong>Apache HTrace</strong>：<a href="https://link.jianshu.com/?t=http://htrace.incubator.apache.org/" target="_blank" rel="noopener">https://link.jianshu.com/?t=http://htrace.incubator.apache.org/</a></li></ul></blockquote></blockquote><div style="text-align:center;margin-top:50px;margin-bottom:50px;">    <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Skywalking背景&quot;&gt;&lt;a href=&quot;#Skywalking背景&quot; class=&quot;headerlink&quot; title=&quot;Skywalking背景&quot;&gt;&lt;/a&gt;Skywalking背景&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Apache 孵化器项
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>middle-service/apm/Skywalking/Skywalking环境搭建</title>
    <link href="https://zcy-fover.github.io/2020/02/22/middle-service/apm/Skywalking/Skywalking%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://zcy-fover.github.io/2020/02/22/middle-service/apm/Skywalking/Skywalking%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2020-02-22T08:01:23.266Z</published>
    <updated>2020-02-22T08:01:23.268Z</updated>
    
    <content type="html"><![CDATA[<h4 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h4><ul><li>Windows 7 x64</li><li>IDEA 2017.01</li><li>JDK 1.8 x64</li><li>Maven 3.5.0</li></ul><h4 id="源码获取："><a href="#源码获取：" class="headerlink" title="源码获取："></a>源码获取：</h4><ol><li><h6 id="Skywalking-Git可以利用-Git-Clone-或者-ZIP-下载到本地；"><a href="#Skywalking-Git可以利用-Git-Clone-或者-ZIP-下载到本地；" class="headerlink" title="Skywalking Git可以利用 Git Clone 或者 ZIP 下载到本地；"></a><a href="https://github.com/apache/incubator-skywalking" target="_blank" rel="noopener">Skywalking Git</a>可以利用 Git Clone 或者 ZIP 下载到本地；</h6></li><li><h6 id="利用-IDEA-选择-Maven-导入项目"><a href="#利用-IDEA-选择-Maven-导入项目" class="headerlink" title="利用 IDEA 选择 Maven 导入项目"></a>利用 IDEA 选择 Maven 导入项目</h6><blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/84696A635FE34A2AB96EA860C836EB4B?method=download&shareKey=38a78b93e713a290424c3aecb3dd1445" alt="项目结构" title="">                </div>                <div class="image-caption">项目结构</div>            </figure></blockquote></li></ol><h4 id="启动-Skywalking-collecor"><a href="#启动-Skywalking-collecor" class="headerlink" title="启动 Skywalking-collecor"></a>启动 Skywalking-collecor</h4><ol><li><h6 id="在项目根目录下或者-IntelliJ-IDEA-Terminal-运行mvn-clean-compile-install-Dmaven-test-skip-true；"><a href="#在项目根目录下或者-IntelliJ-IDEA-Terminal-运行mvn-clean-compile-install-Dmaven-test-skip-true；" class="headerlink" title="在项目根目录下或者 IntelliJ IDEA Terminal 运行mvn clean compile install -Dmaven.test.skip=true；"></a>在项目根目录下或者 IntelliJ IDEA Terminal 运行<code>mvn clean compile install -Dmaven.test.skip=true</code>；</h6></li><li><h6 id="编译完后设置-gRPC-自动生成代码的目录："><a href="#编译完后设置-gRPC-自动生成代码的目录：" class="headerlink" title="编译完后设置 gRPC 自动生成代码的目录："></a>编译完后设置 gRPC 自动生成代码的目录：</h6></li></ol><ul><li>apm-network/target/generated-sources/protobuf 下的<code>grpc-java</code>和<code>java</code>;<blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/69097195DFDA4470BED95B98B7577091?method=download&shareKey=04343bdaab809a02dd32244f5f64c109" alt="GRPC设置" title="">                </div>                <div class="image-caption">GRPC设置</div>            </figure><ul><li>apm-collector/apm-collector-remote/collector-remote-grpc-provider/target/generated-sources/protobuf 下的<code>grpc-java</code>和<code>java</code>;<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/0B361E94E06447ABBBDF3555DE653F91?method=download&shareKey=326d795355d6d6b49240a3a980783749" alt="gRPC设置" title="">                </div>                <div class="image-caption">gRPC设置</div>            </figure>设置方法：在 grpc-java 上右键-&gt; Mark Directory as -&gt; Generated Souces Root</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/30E1435B92304D458B3ABB339CD7A802?method=download&shareKey=97fa68bf2d2359a8b692b60f6ea5a148" alt="代码生成" title="">                </div>                <div class="image-caption">代码生成</div>            </figure></blockquote></li></ul><ol start="3"><li><h6 id="运行org-skywalking-apm-collector-boot-CollectorBootStartUp的main-args-方法，启动-Collector；"><a href="#运行org-skywalking-apm-collector-boot-CollectorBootStartUp的main-args-方法，启动-Collector；" class="headerlink" title="运行org.skywalking.apm.collector.boot.CollectorBootStartUp的main(args)方法，启动 Collector；"></a>运行<code>org.skywalking.apm.collector.boot.CollectorBootStartUp</code>的<code>main(args)</code>方法，启动 Collector；</h6></li><li><h6 id="在浏览器中输入http-127-0-0-1-10800-agent-jetty地址，返回-quot-localhost-12800-quot-，说明启动成功。"><a href="#在浏览器中输入http-127-0-0-1-10800-agent-jetty地址，返回-quot-localhost-12800-quot-，说明启动成功。" class="headerlink" title="在浏览器中输入http://127.0.0.1:10800/agent/jetty地址，返回 [&quot;localhost:12800/&quot;] ，说明启动成功。"></a>在浏览器中输入<a href="http://127.0.0.1:10800/agent/jetty" target="_blank" rel="noopener">http://127.0.0.1:10800/agent/jetty</a>地址，返回 <code>[&quot;localhost:12800/&quot;]</code> ，说明启动<strong>成功</strong>。</h6></li></ol><h4 id="启动-Skywalking-Agent"><a href="#启动-Skywalking-Agent" class="headerlink" title="启动 Skywalking-Agent"></a>启动 Skywalking-Agent</h4><ol><li><h6 id="在-Skywalking-项目的同级新建一个-Web-项目"><a href="#在-Skywalking-项目的同级新建一个-Web-项目" class="headerlink" title="在 Skywalking 项目的同级新建一个 Web 项目"></a>在 Skywalking 项目的同级新建一个 Web 项目</h6><blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/51229E52D67F4992AEE5B630235EBD1E?method=download&shareKey=aa3c4f8faf2a951211a2ec7c07d5eb2b" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></blockquote></li><li><h6 id="我这里新建了一个-SpringBoot-的项目（注意-SpringBootDemo-必须和-skywalking-项目平级，这样才可以调试-Agent）"><a href="#我这里新建了一个-SpringBoot-的项目（注意-SpringBootDemo-必须和-skywalking-项目平级，这样才可以调试-Agent）" class="headerlink" title="我这里新建了一个 SpringBoot 的项目（注意 SpringBootDemo 必须和 skywalking 项目平级，这样才可以调试 Agent）"></a>我这里新建了一个 SpringBoot 的项目（注意 SpringBootDemo 必须和 skywalking 项目平级，这样才可以调试 Agent）</h6><blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/43ACCBD85E4E4CC68A54D62AD7A43A9C?method=download&shareKey=b9b05f406b4823bfa2223127902db8cd" alt="项目结构" title="">                </div>                <div class="image-caption">项目结构</div>            </figure></blockquote></li><li><h6 id="在org-skywalking-apm-agent-SkyWalkingAgent的premain-方法里打上断点；"><a href="#在org-skywalking-apm-agent-SkyWalkingAgent的premain-方法里打上断点；" class="headerlink" title="在org.skywalking.apm.agent.SkyWalkingAgent的premain()方法里打上断点；"></a>在<code>org.skywalking.apm.agent.SkyWalkingAgent</code>的<code>premain()</code>方法里打上断点；</h6></li><li><h6 id="在自己新建的Web项目，配置启动参数-javaagent-skywalking-agent-jar的路径（这里的路径可以绝对路径也可以是相对路径）"><a href="#在自己新建的Web项目，配置启动参数-javaagent-skywalking-agent-jar的路径（这里的路径可以绝对路径也可以是相对路径）" class="headerlink" title="在自己新建的Web项目，配置启动参数-javaagent:skywalking-agent.jar的路径（这里的路径可以绝对路径也可以是相对路径）"></a>在自己新建的Web项目，配置启动参数<code>-javaagent:skywalking-agent.jar的路径</code>（这里的路径可以绝对路径也可以是相对路径）</h6><blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/273872A5D9594E75A9B52AFCCBBABB0E?method=download&shareKey=29fb5f5e1caed391b03654af671387d2" alt="agentJarPath" title="">                </div>                <div class="image-caption">agentJarPath</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/14334ADFF8CC48E7BE6C1770443974BA?method=download&shareKey=37b0f630ae742edee01460583f44d30b" alt="web项目启动配置" title="">                </div>                <div class="image-caption">web项目启动配置</div>            </figure></blockquote></li><li>启动Web项目，这里可能会出现<code>agent.application_code is missing</code>或者<code>collector.servers is missing.</code>的错误，我改了<code>org.skywalking.apm.agent.core.conf.Config</code>中的：<blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String APPLICATION_CODE = <span class="string">"SpringBootDemo"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String SERVERS = <span class="string">"127.0.0.1:8080"</span>;</span><br></pre></td></tr></table></figure></blockquote></li><li>此时停掉之前启动的 skywalking-collector，重新运行<code>mvn clean compile install -Dmaven.test.skip=true</code>进行编译；</li><li>编译完成后再启动 skywalking-collector，然后启动自己的Web项目，如果程序进入了之前的<code>org.skywalking.apm.agent.SkyWalkingAgent</code>的<code>premain()</code>方法中的断点，并且 Web 项目启动成功则说明 Agent 模块启动成功。</li></ol><div style="text-align:center;margin-top:50px;margin-bottom:50px;">    <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;环境：&quot;&gt;&lt;a href=&quot;#环境：&quot; class=&quot;headerlink&quot; title=&quot;环境：&quot;&gt;&lt;/a&gt;环境：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Windows 7 x64&lt;/li&gt;
&lt;li&gt;IDEA 2017.01&lt;/li&gt;
&lt;li&gt;JDK 1.8 x64&lt;/li
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>middle-service/微服务/微服务随记</title>
    <link href="https://zcy-fover.github.io/2020/02/22/middle-service/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%9A%8F%E8%AE%B0/"/>
    <id>https://zcy-fover.github.io/2020/02/22/middle-service/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%9A%8F%E8%AE%B0/</id>
    <published>2020-02-22T07:58:59.550Z</published>
    <updated>2020-02-22T07:58:59.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringCloud-学习示例项目"><a href="#SpringCloud-学习示例项目" class="headerlink" title="SpringCloud 学习示例项目"></a>SpringCloud 学习示例项目</h2><hr><h3 id="微服务特点"><a href="#微服务特点" class="headerlink" title="微服务特点"></a>微服务特点</h3><ul><li>按业务划分为一个独立运行的程序，即服务单元</li><li>服务之间通过 http 协议通信</li><li>自动化部署</li><li>可用不同的编程语言</li><li>可用不同的存储技术</li><li>服务集中化管理</li><li>微服务是一个分布式系统<h3 id="微服务“微”"><a href="#微服务“微”" class="headerlink" title="微服务“微”"></a>微服务“微”</h3></li><li>代码量</li><li>开发时间长短</li><li>业务大小<h3 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h3></li><li>C（Consistency  一致性）：数据写入成功，之后读取读到的都是写入后的数据</li><li>A（Availability  可用性）：服务的可用性</li><li>P（Partition-tolerance  分区容错性）：单台或多台服务出现问题后，其他正常的服务仍可以正常提供服务<h3 id="微服务具有的功能"><a href="#微服务具有的功能" class="headerlink" title="微服务具有的功能"></a>微服务具有的功能</h3></li><li>服务的注册和发现</li><li>服务的负载均衡</li><li>服务的容错</li><li>服务的网关</li><li>服务配置的统一管理</li><li>链路追踪</li><li>实时日志<h3 id="Zookeeper和Eureka"><a href="#Zookeeper和Eureka" class="headerlink" title="Zookeeper和Eureka"></a>Zookeeper和Eureka</h3><table><thead><tr><th></th><th>Zookeeper</th><th>Eureka</th></tr></thead><tbody><tr><td>CAP</td><td>满足CP</td><td>满足AP</td></tr><tr><td>服务注册</td><td>当 master 节点 down 掉，剩余节点会重新选举 leader ，耗时30~120s，选取期间整个集群不可用，服务瘫痪</td><td>各个节点平等，当请求一个节点失败时会自动切换至另一个节点，但是不保证各个节点的强一致性 Eureka 还有一种自我保护机制，如果在 15 分钟内超过 85% 的节点都没有正常的心跳，那么 Eureka 就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况： 1.Eureka 不再从注册列表中移除因为长时间没收到心跳而应该过期的服务 2. Eureka 仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上(即保证当前节点依然可用) 3.当网络稳定时，当前实例新的注册信息会被同步到其它节点中</td></tr></tbody></table></li></ul><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ul><li>将负载分摊到多个执行单元上，常见的两种方式</li></ul><blockquote><ul><li>独立进程单元，通过负载均衡策略，将请求发送到不同的执行单元上，例如 Nginx</li><li>将负载均衡以代码逻辑的形式封装到服务消费者的客户端上，服务消费者维护了一份服务提供者的信息列表，通过负载均衡策略将请求分摊给多个服务提供者</li></ul></blockquote><h3 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h3><ul><li>简化 Java Http 客户端远程调用</li><li>Feign 采用的是http网络交互，可以采用<code>feign-httpclient</code>或者<code>okhttp</code>做网络请求框架，只需要在pom中添加相关依赖即可。</li><li>Feign中负载均衡也是通过Ribbon来实现的。</li><li>Feign请求过程</li></ul><blockquote><ul><li>通过 @EnableFeignClients 注解开启FeignClient功能；</li><li>根据Feign的规则实现接口，并在接口上面加上 @FeignClient 注解；</li><li>程序启动自动扫描 @FeignClient 注解的类，并注入到IoC容器；</li><li>当接口的方法被调用时，通过JDK代理生成具体的 requestTemplate 对象，生成 http 请求的 request 对象；</li><li>将 request 对象交给 Client 去处理，可以使用 HttpUrlConnection 、HttpClient 或 OkHttp；</li><li>最后 Client 被封装到 LoadBalanceClient 类，这个类结合 Ribbon 实现负载均衡。</li></ul></blockquote><ul><li>Feign 可以直接配置 Hystrix 熔断器</li></ul><h3 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h3><ul><li><p>通过隔离服务的访问点组织联动故障，提供故障的解决方案，提高整个分布式系统的弹性</p></li><li><h4 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h4></li></ul><blockquote><ul><li>防止单个服务的故障耗尽整个那个服务的 Servlet 容器的线程资源</li><li>快速失败机制，当某个服务出现故障，则调用该服务的线程快速失败而不是线程等待</li><li>提供回退方案，请求发生故障时，按照提供的方案回退</li><li>使用熔断机制，防止故障扩大影响到其他服务</li><li>利用监控组件实时监控熔断器的状态</li></ul></blockquote><ul><li><h4 id="Hystrix工作机制"><a href="#Hystrix工作机制" class="headerlink" title="Hystrix工作机制"></a>Hystrix工作机制</h4></li></ul><blockquote><ul><li>当某个API服务在一定时间内失败的次数大于设定阀值，触发熔断器打开，这时请求该API服务的接口会执行快速失败逻辑（即回退方案）。</li><li>处于打开状态的熔断器，一段时间后，会处于半打开半关闭状态，将一定数量的请求执行正常逻辑，剩余的请求执行快速失败逻辑，如果执行正常逻辑的请求失败了，则熔断器继续打开，如果成功了，则熔断器关闭。</li></ul></blockquote><ul><li><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4></li></ul><blockquote><p>执行请求中，断开两个服务提供方的其中一个，在短时间内的请求上仍然可以负载到 done 掉的服务上。在停止两个服务提供方后则会执行 fallback 配置的方法。</p></blockquote><h3 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h3><ul><li><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4></li></ul><blockquote><ul><li>Zuul、Ribbon 以及 Eureka 结合，可以实现智能路由和负载均衡，Zuul能够将请求流量按照某种策略分发到集群状态的多个服务实例；</li><li>网关将所有的服务 API 接口统一聚合，并统一对外暴露。外界系统无需关注内部服务，也保护了内部的微服务单元避免敏感信息对外暴露；</li><li>服务网关做用户身份认证和权限控制，防止非法请求操作API接口；</li><li>网关实现监控功能，实时日志输出，对请求做记录；</li><li>网关可以实现流量监控，在高流量的情况下，实现降级；</li><li>API 接口从内部服务分离处理，方便做测试</li></ul></blockquote><h3 id="微服务链路追踪-Sleuth"><a href="#微服务链路追踪-Sleuth" class="headerlink" title="微服务链路追踪 Sleuth"></a>微服务链路追踪 Sleuth</h3><ul><li><h4 id="Dapper-中的专业术语："><a href="#Dapper-中的专业术语：" class="headerlink" title="Dapper 中的专业术语："></a>Dapper 中的专业术语：</h4></li></ul><blockquote><ul><li><strong>Span</strong>：基本工作单元，发送一个远程调用服务就会产生一个 Span，Span 是一个64位的 ID， Span 包含了摘要、时间戳事件、Span 的 ID 以及进程的 ID 。</li><li><strong>Trace</strong>：有一系列 Span 组成，呈树状结构。请求一个微服务系统的 API 接口，这个 API 接口需要调用多个微服务单元，每调用一个新的微服务单元都会产生一个 Span ，所有由这个请求产生的 Span 组成了这个 Trace。</li><li><strong>Annotation</strong>：用于记录一个事件，一些核心注解用户定义一个请求的开始和结束：<ul><li>cs-Client Sent：客户端发送一个请求，描述 Span 的开始</li><li>sr-Server Received：服务端获得请求并准备开始处理它，用 sr 减去 cs 时间戳，就是网络传输的时间</li><li>ss-Server Sent：服务端发送响应，该注解表明请求处理的完成，用 ss 减去 sr 的时间戳就是服务端处理的时间长度</li><li>cr-Client Received：客户端接受响应，此时 Span 结束，用 cr 减去 cs 的时间戳，就得到整个请求的耗时。</li></ul></li></ul></blockquote><ul><li><h3 id="Zipkin"><a href="#Zipkin" class="headerlink" title="Zipkin"></a>Zipkin</h3></li></ul><blockquote><ul><li>使用 RabbitMQ 传输链路数据，默认使用 Http 上传数据到 zipkin-server 的。</li><li>可以使用 MySql、Elasticsearch 存储链路数据，如果在Elasticsearch中存储数据，可以利用 Kibana 展示数据。</li></ul></blockquote><h3 id="微服务监控"><a href="#微服务监控" class="headerlink" title="微服务监控"></a>微服务监控</h3><ul><li><h4 id=""><a href="#" class="headerlink" title=""></a></h4></li></ul><h3 id="Spring-Boot-Security"><a href="#Spring-Boot-Security" class="headerlink" title="Spring Boot Security"></a>Spring Boot Security</h3><ul><li><h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4></li></ul><blockquote><p><strong>认证</strong>：认证主体，可以在应用程序中执行操作的用户、设备或其他系统</p><p><strong>授权</strong>：拥有什么权限，允许已认证的主体执行某一项操作</p></blockquote><div style="text-align:center;margin-top:50px;margin-bottom:50px;">    <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SpringCloud-学习示例项目&quot;&gt;&lt;a href=&quot;#SpringCloud-学习示例项目&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud 学习示例项目&quot;&gt;&lt;/a&gt;SpringCloud 学习示例项目&lt;/h2&gt;&lt;hr&gt;
&lt;h3 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>middle-service/mycat/Mycat基础</title>
    <link href="https://zcy-fover.github.io/2020/02/22/middle-service/mycat/Mycat%E5%9F%BA%E7%A1%80/"/>
    <id>https://zcy-fover.github.io/2020/02/22/middle-service/mycat/Mycat%E5%9F%BA%E7%A1%80/</id>
    <published>2020-02-22T07:58:24.550Z</published>
    <updated>2020-04-09T14:11:24.138Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mycat"><a href="#Mycat" class="headerlink" title="Mycat"></a>Mycat</h2><h3 id="分布式数据库"><a href="#分布式数据库" class="headerlink" title="分布式数据库"></a>分布式数据库</h3><ul><li><strong>透明性</strong>：不用关心逻辑分区和物理位置分布细节；</li><li><strong>数据冗余性</strong>：通过冗余实现系统的可靠性、可用性。多节点存储数据副本，在某一节点损坏时，通过心跳机制，节点自动切换，保证系统可用。热点数据就近分布，减少网络损耗加快访问速度、提升性能；</li><li><strong>易于扩展性</strong>：分布式数据库可以进行水平或者垂直进行扩展提高性能；</li><li><strong>自治性</strong>：本节点上的数据由本地的DBMS管理；</li></ul><h3 id="分布式数据库实现原理"><a href="#分布式数据库实现原理" class="headerlink" title="分布式数据库实现原理"></a>分布式数据库实现原理</h3><h4 id="分布式数据库的目录管理"><a href="#分布式数据库的目录管理" class="headerlink" title="分布式数据库的目录管理"></a>分布式数据库的目录管理</h4><p>存放系统元数据以数据库元数据的全部信息，保证数据被有效、正确地访问</p><ul><li><strong>全局目录</strong></li><li><strong>分布式目录</strong></li><li><strong>全局与本地混合目录</strong><h4 id="数据分片"><a href="#数据分片" class="headerlink" title="数据分片"></a>数据分片</h4>将一台数据库的压力分散到多台主机上，多台设备存取，提高性能、提高系统整体的可用性</li><li><strong>水平切分</strong>：按照某个字段的某种规则将数据分散到多个节点库中</li><li><strong>垂直切分</strong>：数据库由多表构成，每个表对应不同的业务，按照业务讲标分散不同的节点上。但是当表的数据量达到一定程度后，扩展较难</li><li><strong>混合切分</strong>：将上述两者综合使用<h4 id="分布式查询处理"><a href="#分布式查询处理" class="headerlink" title="分布式查询处理"></a>分布式查询处理</h4>将查询解析到各个数据节点，然后将结果汇总<h4 id="分布式并发控制"><a href="#分布式并发控制" class="headerlink" title="分布式并发控制"></a>分布式并发控制</h4>并发控制保证分布式数据中的多个事务并发高效、正确的执行。并发控制保证事务的可串行性</li><li><strong>加锁并发控制</strong>：容易死锁</li><li><strong>时间戳控制</strong>：需要有全局的统一时钟，消除死锁，一旦发生冲突变回重启而不是等待</li><li><strong>乐观并发控制</strong>：对于冲突较少的系统比较适合</li></ul><h3 id="Mycat架构、核心功能"><a href="#Mycat架构、核心功能" class="headerlink" title="Mycat架构、核心功能"></a>Mycat架构、核心功能</h3><h4 id="Mycat架构"><a href="#Mycat架构" class="headerlink" title="Mycat架构"></a>Mycat架构</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/WEB4af34d99cae8158abf03e25fd71aa54d?method=download&shareKey=9119c38af9d7fb5d35e6ad416df350ea" alt="mycat架构图" title="">                </div>                <div class="image-caption">mycat架构图</div>            </figure><h4 id="Mycat核心功能"><a href="#Mycat核心功能" class="headerlink" title="Mycat核心功能"></a>Mycat核心功能</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/WEB9493ecab26c5f6bfb80949634dc352e8?method=download&shareKey=c7495e999bf59522b278b2e7982aa22d" alt="mycat核心功能" title="">                </div>                <div class="image-caption">mycat核心功能</div>            </figure><h3 id="Mycat核心概念"><a href="#Mycat核心概念" class="headerlink" title="Mycat核心概念"></a>Mycat核心概念</h3><h4 id="逻辑库"><a href="#逻辑库" class="headerlink" title="逻辑库"></a>逻辑库</h4><p>中间件被当做一个或多个数据库集群构成的逻辑库</p><h4 id="逻辑表"><a href="#逻辑表" class="headerlink" title="逻辑表"></a>逻辑表</h4><ul><li><strong>分片表</strong>：将数据量很大的表切分到多个数据库实例中，例如将 mytable 配置到 dn1  和dn2 两个节点上<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table name&#x3D;&quot;mytable&quot; primaryKey&#x3D;&quot;id&quot; autoIncrement&#x3D;&quot;true&quot; dataNode&#x3D;&quot;dn1,dn2&quot; rule&#x3D;&quot;myRule&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure></li><li><strong>非分片表</strong>：根据业务量，对于不需要分片的表可以只配置到一个节点上<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table name&#x3D;&quot;mytable&quot; primaryKey&#x3D;&quot;id&quot; autoIncrement&#x3D;&quot;true&quot; dataNode&#x3D;&quot;dn1&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure></li><li><strong>ER表</strong>：基于实体关系模型，子表的记录与其所关联的父表记录放在同一个数据分片上，保证关联查询不会跨分片</li><li><strong>全局表</strong>：业务表规模较大分片后，业务表和附属字典表之间的关联查询比较麻烦，通过冗余数据解决这类关联查询，即所有分片都复制一份数据，这个冗余数据构成的表定义为全局表<h4 id="分片节点"><a href="#分片节点" class="headerlink" title="分片节点"></a>分片节点</h4>分片表被分到不同的分片数据库上，每个表所在的分片数据库就是分片节点<h4 id="节点主机"><a href="#节点主机" class="headerlink" title="节点主机"></a>节点主机</h4>将数据分片后，同一台机器上有可能有多个分片节点，所在的主机就是节点主机。为了规避单节点主机并发数量限制，尽量将读写压力高的节点合理分放，避免单节点压力过高</li></ul><h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><h4 id="本地文件"><a href="#本地文件" class="headerlink" title="本地文件"></a>本地文件</h4><ul><li><strong>schema.xml</strong>：mycat 的逻辑库、分片表、分片节点、分片节点主机信息配置</li><li><strong>server.xml</strong>：系统参数配置文件，mycat 优化相关属性</li><li><strong>rule.xml</strong>：分片规则配置文件</li><li><strong>log4j2.xml</strong>：mycat 输出日志配置文件</li><li><strong>sequence.properties</strong>：全局序列配置文件<h4 id="Zookeeper-配置"><a href="#Zookeeper-配置" class="headerlink" title="Zookeeper 配置"></a>Zookeeper 配置</h4></li><li><strong>zk-create.yaml</strong>：本地文件中的配置项都配置在此文件中</li></ul><div style="text-align:center;margin-top:50px">    <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mycat&quot;&gt;&lt;a href=&quot;#Mycat&quot; class=&quot;headerlink&quot; title=&quot;Mycat&quot;&gt;&lt;/a&gt;Mycat&lt;/h2&gt;&lt;h3 id=&quot;分布式数据库&quot;&gt;&lt;a href=&quot;#分布式数据库&quot; class=&quot;headerlink&quot; title=&quot;分
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>middle-service/mycat/Mycat 分片配置</title>
    <link href="https://zcy-fover.github.io/2020/02/22/middle-service/mycat/Mycat%20%E5%88%86%E7%89%87%E9%85%8D%E7%BD%AE/"/>
    <id>https://zcy-fover.github.io/2020/02/22/middle-service/mycat/Mycat%20%E5%88%86%E7%89%87%E9%85%8D%E7%BD%AE/</id>
    <published>2020-02-22T07:58:23.325Z</published>
    <updated>2020-02-22T07:58:23.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mycat-分片配置"><a href="#Mycat-分片配置" class="headerlink" title="Mycat 分片配置"></a>Mycat 分片配置</h2><p>mycat 将表分为两种概念：对于数据量小且不需要做数据切分的表成为非分片表；数据量大到单库性能、容量不足以支撑，数据需要通过水平切分均匀分布到不同的数据库表称之为分片表</p><h3 id="rule-xml"><a href="#rule-xml" class="headerlink" title="rule.xml"></a>rule.xml</h3><p>rule.xml 为分片规则配置文件， schema.xml 中 table 标签中的 rule 属性的值需要在 rule.xml 中配置</p><h5 id="function-标签"><a href="#function-标签" class="headerlink" title="function 标签"></a>function 标签</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;function name&#x3D;&quot;mod-long&quot; class&#x3D;&quot;io.mycat.route.function.PartitionByMod&quot;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;count&quot;&gt;3&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;function&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>name</strong> 指定算法的名称，在该文件中唯一</li><li><strong>class</strong> 属性对应具体的分片算法，指定具体的算法类</li><li><strong>property</strong> 根据算法要求指定<h5 id="tableRule-标签"><a href="#tableRule-标签" class="headerlink" title="tableRule 标签"></a>tableRule 标签</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;tableRule name&#x3D;&quot;my-mod-long&quot;&gt;</span><br><span class="line">&lt;rule&gt;</span><br><span class="line">&lt;columns&gt;id&lt;&#x2F;columns&gt;</span><br><span class="line">&lt;algorithm&gt;mod-long&lt;&#x2F;algorithm&gt;</span><br><span class="line">&lt;&#x2F;rule&gt;</span><br><span class="line">&lt;&#x2F;tableRule&gt;</span><br></pre></td></tr></table></figure></li><li><strong>name</strong> 指定分片唯一算法名称</li><li><strong>rule</strong> 分片算法具体内容</li><li><strong>columns</strong> 对应表中用于分片的列名</li><li><strong>algorithm</strong> function 中定义的算法名称<h3 id="取模分片"><a href="#取模分片" class="headerlink" title="取模分片"></a>取模分片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;tableRule name&#x3D;&quot;my-mod-long&quot;&gt;</span><br><span class="line">&lt;rule&gt;</span><br><span class="line">&lt;columns&gt;id&lt;&#x2F;columns&gt;</span><br><span class="line">&lt;algorithm&gt;mod-long&lt;&#x2F;algorithm&gt;</span><br><span class="line">&lt;&#x2F;rule&gt;</span><br><span class="line">&lt;&#x2F;tableRule&gt;</span><br><span class="line">&lt;function name&#x3D;&quot;mod-long&quot; class&#x3D;&quot;io.mycat.route.function.PartitionByMod&quot;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;count&quot;&gt;3&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;function&gt;</span><br></pre></td></tr></table></figure>概算法根据 ID 进行十进制求模计算，相比固定的分片 hash，这种分片算法在批量插入会增加事务一致性的难度<h3 id="枚举分片"><a href="#枚举分片" class="headerlink" title="枚举分片"></a>枚举分片</h3>通过在配置文件中配置可能的枚举ID，指定数据分布到不同的物理节点上，本规则适合按照省份或县区来拆分数据类业务<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;tableRule name&#x3D;&quot;sharding-byintfile&quot;&gt;</span><br><span class="line">&lt;rule&gt;</span><br><span class="line">&lt;columns&gt;sharding_id&lt;&#x2F;columns&gt;</span><br><span class="line">&lt;algorithm&gt;hash-init&lt;&#x2F;algorithm&gt;</span><br><span class="line">&lt;&#x2F;rule&gt;</span><br><span class="line">&lt;&#x2F;tableRule&gt;</span><br><span class="line">&lt;function name&#x3D;&quot;hash-init&quot; class&#x3D;&quot;io.mycat.route.function.PartitionByFileMap&quot;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;mapFile&quot;&gt;partion-hash-init.txt&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;type&quot;&gt;0&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;defaultNode&quot;&gt;0&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;function&gt;</span><br></pre></td></tr></table></figure>其中 partition-hash-init.txt 内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10000&#x3D;0</span><br><span class="line">10010&#x3D;1</span><br><span class="line">DEFAULT_NODE&#x3D;1</span><br></pre></td></tr></table></figure></li><li><strong>type</strong> 默认值为 0，0 表示 Integer，非 0 表示 String</li><li><strong>defaultNode</strong> 小于 0 表示不设置默认节点，大于等于 0 表示设置默认节点。默认节点的作用：枚举分片时，如果有不认识的枚举值就路由到默认节点。如果不配置默认节点，遇到无法识别的枚举值，就会报错。<h3 id="范围分片"><a href="#范围分片" class="headerlink" title="范围分片"></a>范围分片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;tableRule name&#x3D;&quot;auto-sharding-long&quot;&gt;</span><br><span class="line">&lt;rule&gt;</span><br><span class="line">&lt;columns&gt;id&lt;&#x2F;columns&gt;</span><br><span class="line">&lt;algorithm&gt;range-long&lt;&#x2F;algorithm&gt;</span><br><span class="line">&lt;&#x2F;rule&gt;</span><br><span class="line">&lt;&#x2F;tableRule&gt;</span><br><span class="line">&lt;function name&#x3D;&quot;range-long&quot; class&#x3D;&quot;io.mycat.route.function.AutoPartitionByLong&quot;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;mapFile&quot;&gt;auto-partition-long.txt&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;defaultNode&quot;&gt;0&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;function&gt;</span><br></pre></td></tr></table></figure>auto-partition-long.txt 配置如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># range start-end，data node index</span><br><span class="line">0-10000&#x3D;0</span><br><span class="line">10001-20000&#x3D;1</span><br><span class="line">20000-60000&#x3D;2</span><br></pre></td></tr></table></figure><h3 id="范围求模算法"><a href="#范围求模算法" class="headerlink" title="范围求模算法"></a>范围求模算法</h3>先范围分片，然后组内求模。范围求模可以保证组内数据分布比较均匀，避免热点数据问题；范围分片在水平扩展时，原有数据不需要迁移。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;tableRule name&#x3D;&quot;auto-sharding-rang-mod&quot;&gt;</span><br><span class="line">&lt;rule&gt;</span><br><span class="line">&lt;columns&gt;id&lt;&#x2F;columns&gt;</span><br><span class="line">&lt;algorithm&gt;range-mod&lt;&#x2F;algorithm&gt;</span><br><span class="line">&lt;&#x2F;rule&gt;</span><br><span class="line">&lt;&#x2F;tableRule&gt;</span><br><span class="line">&lt;function name&#x3D;&quot;range-mod&quot; class&#x3D;&quot;io.mycat.route.function.PartitionByRangeMod&quot;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;mapFile&quot;&gt;partition-range-mod.txt&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;defaultNode&quot;&gt;0&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;function&gt;</span><br></pre></td></tr></table></figure>partiton-range-mod.txt 配置如下，等号前面的范围代表一个分片组，等号后面的数字代表该分片组所拥有的分片数量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0-200M&#x3D;5 &#x2F;&#x2F;5个分片节点</span><br><span class="line">200M1-400M&#x3D;1</span><br><span class="line">400M1-600M&#x3D;3</span><br></pre></td></tr></table></figure><h3 id="固定分片-hash-算法"><a href="#固定分片-hash-算法" class="headerlink" title="固定分片 hash 算法"></a>固定分片 hash 算法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;tableRule name&#x3D;&quot;sharding-hash&quot;&gt;</span><br><span class="line">&lt;rule&gt;</span><br><span class="line">&lt;columns&gt;userId&lt;&#x2F;columns&gt;</span><br><span class="line">&lt;algorithm&gt;sharding-hash&lt;&#x2F;algorithm&gt;</span><br><span class="line">&lt;&#x2F;rule&gt;</span><br><span class="line">&lt;&#x2F;tableRule&gt;</span><br><span class="line">&lt;function name&#x3D;&quot;sharding-hash&quot; class&#x3D;&quot;io.mycat.route.function.PartitionByLong&quot;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;partitionCount&quot;&gt;2,1&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;partitionLength&quot;&gt;256,512&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;function&gt;</span><br></pre></td></tr></table></figure></li><li><strong>partitionCount</strong> 分片个数列表</li><li><strong>partitionLength</strong> 分片范围列表，分区长度默认最大为 2^n = 1024，最大支持 1024 个分区</li></ul><p>count 和 length 两个数组的长度必须一致。1024 = SUM((count[i]*length[i]))，count 和 length两个向量的点击恒等于 1024。</p><h3 id="取模范围算法"><a href="#取模范围算法" class="headerlink" title="取模范围算法"></a>取模范围算法</h3><p>先取模，然后范围分片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;tableRule name&#x3D;&quot;sharding-by-pattern&quot;&gt;</span><br><span class="line">&lt;rule&gt;</span><br><span class="line">&lt;columns&gt;userId&lt;&#x2F;columns&gt;</span><br><span class="line">&lt;algorithm&gt;sharding-by-pattern&lt;&#x2F;algorithm&gt;</span><br><span class="line">&lt;&#x2F;rule&gt;</span><br><span class="line">&lt;&#x2F;tableRule&gt;</span><br><span class="line">&lt;function name&#x3D;&quot;sharding-by-pattern&quot; class&#x3D;&quot;io.mycat.route.function.PartitionByPattern&quot;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;patternValue&quot;&gt;256&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;defaultNode&quot;&gt;2&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;mapFile&quot;&gt;partition-pattern.txt&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;function&gt;</span><br></pre></td></tr></table></figure><p>partition-pattern.txt 配置，dataNode 是默认节点，如果采用默认配置则不进行求模运算，如果 id 不是数据则会分配在默认节点上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1-32&#x3D;0</span><br><span class="line">33-64&#x3D;1</span><br><span class="line">65-96&#x3D;2</span><br><span class="line">97-128&#x3D;3</span><br></pre></td></tr></table></figure><ul><li><strong>patternValue</strong> 求模基数<h3 id="字符串-hash-求模范围算法"><a href="#字符串-hash-求模范围算法" class="headerlink" title="字符串 hash 求模范围算法"></a>字符串 hash 求模范围算法</h3>与上相同，该算法支持述职、符号、字母取模<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;tableRule name&#x3D;&quot;sharding-by-prefixpattern&quot;&gt;</span><br><span class="line">&lt;rule&gt;</span><br><span class="line">&lt;columns&gt;userId&lt;&#x2F;columns&gt;</span><br><span class="line">&lt;algorithm&gt;sharding-by-prefixpattern&lt;&#x2F;algorithm&gt;</span><br><span class="line">&lt;&#x2F;rule&gt;</span><br><span class="line">&lt;&#x2F;tableRule&gt;</span><br><span class="line">&lt;function name&#x3D;&quot;sharding-by-prefixpattern&quot; class&#x3D;&quot;io.mycat.route.function.PartitionByPrefixPattern&quot;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;patternValue&quot;&gt;256&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;prefixLength&quot;&gt;5&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;defaultNode&quot;&gt;2&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;mapFile&quot;&gt;partition-prefixpattern.txt&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;function&gt;</span><br></pre></td></tr></table></figure>partition-prefixpattern.txt，截取长度为 prefixLength 的子串，再对字符串中每个字符的 ASCII 码进行求和得出 sum 值，最后对 sum 进行求模运算 (sum % patternValue)，可以算出分片数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1-4&#x3D;0</span><br><span class="line">5-8&#x3D;1</span><br><span class="line">9-12&#x3D;2</span><br><span class="line">13-16&#x3D;3</span><br></pre></td></tr></table></figure><h3 id="应用指定的算法"><a href="#应用指定的算法" class="headerlink" title="应用指定的算法"></a>应用指定的算法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;tableRule name&#x3D;&quot;sharding-by-substring&quot;&gt;</span><br><span class="line">&lt;rule&gt;</span><br><span class="line">&lt;columns&gt;userId&lt;&#x2F;columns&gt;</span><br><span class="line">&lt;algorithm&gt;sharding-by-substring&lt;&#x2F;algorithm&gt;</span><br><span class="line">&lt;&#x2F;rule&gt;</span><br><span class="line">&lt;&#x2F;tableRule&gt;</span><br><span class="line">&lt;function name&#x3D;&quot;sharding-by-substring&quot; class&#x3D;&quot;io.mycat.route.function.PartitionDirectBySubString&quot;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;patternCount&quot;&gt;8&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;size&quot;&gt;2&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;defaultPattern&quot;&gt;0&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;function&gt;</span><br></pre></td></tr></table></figure>根据字符串子串(必须是数字)计算分区号，例如 id = 05-0001，其中 id 是从 startIndex = 0 开始，截取长度为 2 位，即分区号为 05，分配到默认分区。<h3 id="字符串-hash-解析算法"><a href="#字符串-hash-解析算法" class="headerlink" title="字符串 hash 解析算法"></a>字符串 hash 解析算法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;tableRule name&#x3D;&quot;sharding-by-stringhash&quot;&gt;</span><br><span class="line">&lt;rule&gt;</span><br><span class="line">&lt;columns&gt;userId&lt;&#x2F;columns&gt;</span><br><span class="line">&lt;algorithm&gt;sharding-by-stringhash&lt;&#x2F;algorithm&gt;</span><br><span class="line">&lt;&#x2F;rule&gt;</span><br><span class="line">&lt;&#x2F;tableRule&gt;</span><br><span class="line">&lt;function name&#x3D;&quot;sharding-by-stringhash&quot; class&#x3D;&quot;io.mycat.route.function.PartitionByString&quot;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;length&quot;&gt;512&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;count&quot;&gt;2&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;hashSlice&quot;&gt;0:2&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;function&gt;</span><br></pre></td></tr></table></figure></li><li><strong>length</strong> 字符串 hash 的求模基数</li><li><strong>count</strong> 分区数</li><li><strong>hashSlice</strong> 预算位，根据子字符串中的 int 值进行 hash 运算<h3 id="一致性-hash-算法"><a href="#一致性-hash-算法" class="headerlink" title="一致性 hash 算法"></a>一致性 hash 算法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;tableRule name&#x3D;&quot;sharding-by-murmur&quot;&gt;</span><br><span class="line">&lt;rule&gt;</span><br><span class="line">&lt;columns&gt;userId&lt;&#x2F;columns&gt;</span><br><span class="line">&lt;algorithm&gt;sharding-by-murmur&lt;&#x2F;algorithm&gt;</span><br><span class="line">&lt;&#x2F;rule&gt;</span><br><span class="line">&lt;&#x2F;tableRule&gt;</span><br><span class="line">&lt;function name&#x3D;&quot;sharding-by-murmur&quot; class&#x3D;&quot;io.mycat.route.function.PartitionByMurMueHash&quot;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;seed&quot;&gt;0&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;count&quot;&gt;2&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;virtualBucketTimes&quot;&gt;160&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;weightMapFile&quot;&gt;weightMapFile&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;bucketMapPath&quot;&gt;&#x2F;etc&#x2F;mycat&#x2F;bucketMapPath&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;function&gt;</span><br></pre></td></tr></table></figure></li><li><strong>count</strong> 要分片的数据库节点数量</li><li><strong>virtualBucketTimes</strong> 一个实际的数据库节点被映射后的虚拟节点，默认是 160 倍，即虚拟节点是物理节点的 160 倍</li><li><strong>weightMapFile</strong> 节点的权重，没有指定权重的节点默认是 1，以 properties 文件的格式编辑，以从 0 开始到 count - 1 的整数值也就是节点索引 key，以节点权重值为值。所有权重必须是正整数，否则以 1 代替</li><li><strong>bucketMapPath</strong> 测试时观察各物理节点与虚拟节点的分布情况。如果指定该属性，则会把虚拟节点的 murmur hash 值与物理节点的映射输出到这个文件，没有默认值，不配置则不输出。<h3 id="按日期-天-分片算法"><a href="#按日期-天-分片算法" class="headerlink" title="按日期(天)分片算法"></a>按日期(天)分片算法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;tableRule name&#x3D;&quot;sharding-by-date&quot;&gt;</span><br><span class="line">&lt;rule&gt;</span><br><span class="line">&lt;columns&gt;create_time&lt;&#x2F;columns&gt;</span><br><span class="line">&lt;algorithm&gt;sharding-by-date&lt;&#x2F;algorithm&gt;</span><br><span class="line">&lt;&#x2F;rule&gt;</span><br><span class="line">&lt;&#x2F;tableRule&gt;</span><br><span class="line">&lt;function name&#x3D;&quot;sharding-by-date&quot; class&#x3D;&quot;io.mycat.route.function.PartitionByDate&quot;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;dateFormat&quot;&gt;yyyy-MM-dd&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;sBeginDate&quot;&gt;2019-08-08&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;sEndDate&quot;&gt;2019-08-09&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;sPartionDay&quot;&gt;10&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;function&gt;</span><br></pre></td></tr></table></figure></li><li><strong>sPartitionDay</strong> 分区天数，默认从开始日期算起，每隔 10 天一个分区</li><li><strong>sEndDate</strong> 如果配置该属性，则数据达到这个日期的分片后会重复从开始分片插入<h3 id="单月小时算法"><a href="#单月小时算法" class="headerlink" title="单月小时算法"></a>单月小时算法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;tableRule name&#x3D;&quot;sharding-by-hour&quot;&gt;</span><br><span class="line">&lt;rule&gt;</span><br><span class="line">&lt;columns&gt;create_time&lt;&#x2F;columns&gt;</span><br><span class="line">&lt;algorithm&gt;sharding-by-hour&lt;&#x2F;algorithm&gt;</span><br><span class="line">&lt;&#x2F;rule&gt;</span><br><span class="line">&lt;&#x2F;tableRule&gt;</span><br><span class="line">&lt;function name&#x3D;&quot;sharding-by-hour&quot; class&#x3D;&quot;io.mycat.route.function.LatestMonthPartition&quot;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;sliptOneDay&quot;&gt;24&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;function&gt;</span><br></pre></td></tr></table></figure></li><li><strong>columns</strong> 为拆分字段，字符串类型(yyyyMMddHH)</li><li><strong>sliptOneDay</strong> 为一天切分的分片数<h3 id="自然月分片算法"><a href="#自然月分片算法" class="headerlink" title="自然月分片算法"></a>自然月分片算法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;tableRule name&#x3D;&quot;sharding-by-month&quot;&gt;</span><br><span class="line">&lt;rule&gt;</span><br><span class="line">&lt;columns&gt;create_time&lt;&#x2F;columns&gt;</span><br><span class="line">&lt;algorithm&gt;sharding-by-month&lt;&#x2F;algorithm&gt;</span><br><span class="line">&lt;&#x2F;rule&gt;</span><br><span class="line">&lt;&#x2F;tableRule&gt;</span><br><span class="line">&lt;function name&#x3D;&quot;sharding-by-month&quot; class&#x3D;&quot;io.mycat.route.function.PartitionByMonth&quot;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;dateFormat&quot;&gt;yyyy-MM-dd&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;sBeginDate&quot;&gt;2019-08-08&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;function&gt;</span><br></pre></td></tr></table></figure><h3 id="日期范围-hash-算法"><a href="#日期范围-hash-算法" class="headerlink" title="日期范围 hash 算法"></a>日期范围 hash 算法</h3>现根据日期分组，再根据时间 hash 使得短期内数据分布更加均匀，可在一定程度上避免范围分片的数据热点问题<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;tableRule name&#x3D;&quot;range-date-hash&quot;&gt;</span><br><span class="line">&lt;rule&gt;</span><br><span class="line">&lt;columns&gt;create_time&lt;&#x2F;columns&gt;</span><br><span class="line">&lt;algorithm&gt;range-date-hash&lt;&#x2F;algorithm&gt;</span><br><span class="line">&lt;&#x2F;rule&gt;</span><br><span class="line">&lt;&#x2F;tableRule&gt;</span><br><span class="line">&lt;function name&#x3D;&quot;range-date-hash&quot; class&#x3D;&quot;io.mycat.route.function.PartitionByRangeDateHash&quot;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;dateFormat&quot;&gt;yyyy-MM-dd&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;sBeginDate&quot;&gt;2019-08-08&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;sPartionDay&quot;&gt;12&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;groupPartionSize&quot;&gt;6&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;function&gt;</span><br></pre></td></tr></table></figure></li><li><strong>sPartionDay</strong> 代表多少天一组</li><li><strong>groupPartionSize</strong> 每组的分片数量</li></ul><div style="text-align:center;margin-top:50px">    <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mycat-分片配置&quot;&gt;&lt;a href=&quot;#Mycat-分片配置&quot; class=&quot;headerlink&quot; title=&quot;Mycat 分片配置&quot;&gt;&lt;/a&gt;Mycat 分片配置&lt;/h2&gt;&lt;p&gt;mycat 将表分为两种概念：对于数据量小且不需要做数据切分的表成为非分片表
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>middle-service/mycat/Tips</title>
    <link href="https://zcy-fover.github.io/2020/02/22/middle-service/mycat/Tips/"/>
    <id>https://zcy-fover.github.io/2020/02/22/middle-service/mycat/Tips/</id>
    <published>2020-02-22T07:58:21.802Z</published>
    <updated>2020-04-09T15:21:56.079Z</updated>
    
    <content type="html"><![CDATA[<h4 id="高可用-VIP"><a href="#高可用-VIP" class="headerlink" title="高可用 VIP"></a>高可用 VIP</h4><p><strong>高可用性HA</strong> (High Availability) 尽量缩短系统日常的维护操作和突发的系统奔溃导致的停机时间，提高系统和应用的可用性。数据库通常通过主从关系来实现。</p><p>数据库实现高可用，数据库服务搭建主从关系，主库 IP、从库 IP、读写 VIP、只读 VIP，使用这几个 IP 地址都可以连接对应的数据库服务。VIP 如何寻址到对应的服务器，使用的是 TCP/IP 协议的 ARP 协议。当 物理数据库无法使用时，动态将 VIP 对应的 MAC 地址替换成从库</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;高可用-VIP&quot;&gt;&lt;a href=&quot;#高可用-VIP&quot; class=&quot;headerlink&quot; title=&quot;高可用 VIP&quot;&gt;&lt;/a&gt;高可用 VIP&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;高可用性HA&lt;/strong&gt; (High Availability) 尽量缩短系统
      
    
    </summary>
    
    
    
      <category term="高可用" scheme="https://zcy-fover.github.io/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>middle-service/mycat/配置文件</title>
    <link href="https://zcy-fover.github.io/2020/02/22/middle-service/mycat/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://zcy-fover.github.io/2020/02/22/middle-service/mycat/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2020-02-22T07:58:20.328Z</published>
    <updated>2020-04-09T14:13:55.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="server-xml"><a href="#server-xml" class="headerlink" title="server.xml"></a>server.xml</h3><h5 id="user-标签"><a href="#user-标签" class="headerlink" title="user 标签"></a>user 标签</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;user name&#x3D;&quot;zcy-fover&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;schemas&quot;&gt;mycattest1,mycatttest2&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;password&quot;&gt;123456&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;readOnly&quot;&gt;true&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;benchmark&quot;&gt;100&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;usingDecrypt&quot;&gt;1&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;user&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>user</strong> 标签用于定义登录 mycat 的用户和权限，配置的用户只可以访问对应的 schema</li><li><strong>schemas</strong> 可以配置多个 schema 用英文逗号分隔</li><li><strong>readOnly</strong> 属性用来限制用户的读写权限</li><li><strong>benchmark</strong>  属性限制前端的整体链接数量，置为 0 或者不设值则表示不限</li><li><strong>usingDecrypt</strong> 属性表示开启密码加密功能，0：不开启，1：开启</li></ul><h5 id="system-标签"><a href="#system-标签" class="headerlink" title="system 标签"></a>system 标签</h5><ul><li><strong>charset</strong> 字符集属性，配置时保证与 mysql 的一致</li><li><strong>defaultSqlParser</strong> 指定默认的 sql 解析器</li><li><strong>processors</strong> 指定系统可用的线程数量，默认值为机器 CPU 核心 x 每个核心运行线程的数量，processors 的值会影响 processorsBufferPool、processorsBufferLocalPersent、ProcessorsExecutor 和 NIOProcessor 属性</li><li><strong>processorsBufferChunk</strong> 指定每次分配 Socket Direct Buffer 的默认字节是 4096，也会影响 bufferPool 的长度，如果一次性获取的字节过多导致 buffer 不够用，会出现告警，可以适当提高 processorsBufferChunk 的值</li><li><strong>processorsBufferPool</strong> 指定 bufferPool 的计算比例，由于每次执行 NIO 读写都要使用到 buffer，所以 mycat 在初始化是会创建一定长度的 buffer 池来加快 NIO 读写效率，减少 buffer 的时间。<ul><li>processorsBufferPool 的默认值：bufferChunkSize(4096) * processers * 1000</li><li>BufferPool 和 ThreadLocalPool 池，BufferPool 使用 ThreadLocalPool 作为二级缓存，每次从 BufferPool 获取时都会优先从 ThreadLocalPool 中获取 Buffer 的值，如果未命中，则会从 BufferPool 中获取，ThreadLocalPool 在每个线程内部使用，而 BufferPool 是每个 NIO 共享的。</li><li>BufferPool 的总长度为 BufferPool / BufferChunk，如果比值不是整数倍，则取整加一</li></ul></li><li><strong>processorBufferLocalPercent</strong> 控制 ThreadLocalPool 分配 Pool 的比例大小，该属性的默认值为 100<ul><li>线程缓存百分比 = BufferLocalPercent / processors</li><li>ThreadLocalPool 长度 = 线程缓存百分比 * BufferPool 长度 / 100</li></ul></li><li><strong>processorExecutor</strong> 指定 NIOProcessor 上共享 businessExecutor 固定线程池的大小，Mycat 把异步处理任务提交到这个 businessExecutor 线程池中</li><li><strong>sequenceHandlerType</strong>  指定 Mycat 全局序列的类型，0：本地文件方式，1：数据库方式，2：时间戳序列方式。默认使用本地文件方式</li><li><strong>TCP连接的相关属性</strong> <code>StandardSocketOptions.SO_RCVBUF</code>、<code>StandardSocketOptions.SO_SNDBUF</code>、<code>StandardSocketOptions.TCP_NODELAY</code>对应到 mycat 的 TCP 连接配置如下：<ul><li>frontSocketSoRcvbuf：默认值为 1024 * 1024</li><li>frontSocketSoSndbuf：默认值为 4 * 1024 *1024</li><li>frontSocketSoNoDelay：默认值为 1</li><li>backSocketSoRcvbuf：默认值为 4 * 1024 * 1024</li><li>backSocketSoSndbuf：默认值为 1024 *1024</li><li>backSocketSoNoDelay：默认值为 1</li></ul></li><li><strong>MySQL连接的相关属性</strong> <ul><li>packetHeaderSize：指定 MySQL 协议中的报文长度，默认值为 4 个字节</li><li>maxPacketSize：指定 MySQL 协议可以携带的数据的最大值，默认值为 16MB</li><li>idleTimeout：指定连接的空闲时间的超时长度。如果某个连接的空闲时间超过 idleTimeout 的值，则该连接资源将被关闭并回收，单位毫秒，默认 30 分钟</li><li>charset：初始化连接字符集，默认 utf8</li><li>txIsolation：初始化前端连接事务的隔离级别，后续的 txIsolation 值为客户端的配置值。默认为 REPEATED_READ；<code>READ_UNCOMMITTED: 1</code>、<code>READ_COMMITTED: 2</code>、<code>REPEATED_READ: 3</code>、<code>SERIALIZABLE: 4</code></li><li>sqlExecuteTimeout：执行 SQL 语句的超时时间，若 SQL 执行超过这个时间，则会关闭连接，单位为秒，默认 300 秒</li></ul></li><li><strong>心跳属性</strong> <ul><li>processorCheckPeriod：清理 NIOProcessor 前后端连接空闲、超时、关闭连接的时间间隔，单位为毫秒，默认为 1 秒</li><li>dataNodeIdleCheckPeriod：对后端连接进行空闲、超时检查的时间间隔，单位为毫秒默认为 300 秒</li><li>dataNodeHeartbeatPeriod：对后端的所有读、写库发起心跳的时间间隔，单位为毫秒，默认为 10 秒</li></ul></li><li><strong>服务相关属性</strong> <ul><li>bindIp：服务监听的 IP 地址，默认值为 0.0.0.0</li><li>serverPort：定义 mycat 的使用端口，默认值为 8066</li><li>managerPort：定义 mycat 的管理端口，默认值为 9066</li></ul></li><li><strong>fakeMySQLVersion属性</strong> mycat 使用 MySQL 的通信协议模拟了一个 MySQL 服务器，默认版本是 5.6</li><li><strong>handleDistributedTransactions</strong> 分布式事务开关属性,<ul><li>值为0：不过滤分布式事务</li><li>值为1：过滤分布式事务（如果分布式事务内只涉及全局表，则不过滤）</li><li>值为2：不过滤分布式无，但是记录分布式事务日志</li></ul></li><li><strong>useOffHeapForMerge</strong> 该属性指定是否启用非堆内存处理跨分片结果集，1：开启，0：关闭</li><li><strong>useGlobleTableCheck</strong> 全局表一致性检查，1：开启，0：关闭</li><li><strong>useSQLStat</strong> 开启实时统计，1：开启，0：关闭</li><li><strong>useCompression</strong> 是否开启 MySQL 压缩协议，1：开启，0：关闭</li><li><strong>usingAIO</strong> 0：NIO，1：AIO<h5 id="firewall标签"><a href="#firewall标签" class="headerlink" title="firewall标签"></a>firewall标签</h5>全局防火墙的设置，针对IP地址进行限制<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">firewall</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">whitehost</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">host</span> <span class="attr">host</span>=<span class="string">"127.0.0.1"</span> <span class="attr">user</span>=<span class="string">"mycat"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">host</span> <span class="attr">host</span>=<span class="string">"127.0.0.2"</span> <span class="attr">user</span>=<span class="string">"mycat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">whitehost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">blacklist</span> <span class="attr">check</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">blacklist</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">firewall</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="schema-xml"><a href="#schema-xml" class="headerlink" title="schema.xml"></a>schema.xml</h3>mycat 的逻辑库、表、分片规则、分片节点及数据源相关配置项<h5 id="schema-标签"><a href="#schema-标签" class="headerlink" title="schema 标签"></a>schema 标签</h5>定义逻辑库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;schema name&#x3D;&quot;test1&quot; checkSQLschema&#x3D;&quot;false&quot; sqlMaxLimit&#x3D;&quot;100&quot;&gt;</span><br><span class="line">    &lt;table name&#x3D;&quot;goods_order&quot; subTables&#x3D;&quot;goods_order$0-2&quot; primaryKey&#x3D;&quot;ID&quot; autoIncrement&#x3D;&quot;true&quot; dataNode&#x3D;&quot;dn1&quot; rule&#x3D;&quot;my-mod-long&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;schema&gt;</span><br><span class="line">&lt;schema name&#x3D;&quot;test2&quot; checkSQLschema&#x3D;&quot;false&quot; sqlMaxLimit&#x3D;&quot;100&quot;&gt;</span><br><span class="line">    &lt;table name&#x3D;&quot;goods_order&quot; subTables&#x3D;&quot;goods_order$0-2&quot; primaryKey&#x3D;&quot;ID&quot; autoIncrement&#x3D;&quot;true&quot; dataNode&#x3D;&quot;dn1&quot; rule&#x3D;&quot;my-mod-long&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;schema&gt;</span><br></pre></td></tr></table></figure></li><li><strong>name</strong> schema名称，需要在 server.xml 中定义后才可以</li><li><strong>dataNode</strong> 配置逻辑库的默认分片，没有配置 table 标签则会分到默认的 dataNode；通过 mycat 建表，没有提前配置 table 标签，也没有配置默认 dataNode，则会报错</li><li><strong>checkSQLSchema</strong> 当值为 true 时，sql 语句发送到数据库执行时，会去掉 schema，例如<code>SELECT * FROM test1.user</code>会变成<code>SELECT * FROM user</code>，如果语句所带的 schema 没有在schema标签中指定，则 mycat 不会去掉，在执行时如果没有定义该库则执行会出错。</li><li><strong>sqlMaxLimit</strong> 拆分库情况下，限制返回数据的大小。例如设置为 100，当实际 sql 中没有使用 limit，在执行时，mycat 会自动加上 limit 100。如果在实际 sql 中写了 limit 语句，则该属性即时设置也无效。<h5 id="table-标签"><a href="#table-标签" class="headerlink" title="table 标签"></a>table 标签</h5>定义逻辑表<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"goods_order"</span> <span class="attr">subTables</span>=<span class="string">"goods_order$0-2"</span> <span class="attr">primaryKey</span>=<span class="string">"ID"</span> <span class="attr">autoIncrement</span>=<span class="string">"true"</span> <span class="attr">dataNode</span>=<span class="string">"dn1"</span> <span class="attr">rule</span>=<span class="string">"my-mod-long"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>name</strong> 定义逻辑表的名称，和数据库中执行 create table 语句一样，同一个 schema 标签中，定义的表名必须唯一</li><li><strong>dataNode</strong> 定义逻辑表所属的 dataNode，该值需要和 dataNode 标签中定义的一样，如果该表分布在多个 dataNode 上，可以如上类似使用 $ 符减少配置</li><li><strong>rule</strong> 定义逻辑表使用的分表规则，该值需要在 rule.xml 文件中定义且需对应</li><li><strong>ruleRequired</strong> 指定表是否绑定分片规则，如果设为true，但是没有指定 rule，则会报错</li><li><strong>primaryKey</strong> 逻辑表对应真实表的主键。如果该属性配置的是真实表的主键，mycat 会缓存主键与 dataNode 的信息，再次使用主键查询时就不会广播式查询，直接路由到对应的 dataNode。但是如果缓存没有命中，还是会进行广播式查询。</li><li><strong>type</strong> 定义逻辑表的类型，全局表：type 值是global；普通表：不指定该值为 global 的表</li><li><strong>autoIncrement</strong> MySQL 对于非自增主键使用 last_insert_id() 不会返回结果，只会返回0，所以在 mycat 中使用该属性需要 MySQL 的表主键定义 auto_increment。使用该属性时配合数据库模式的全局序列使用</li><li><strong>subTables</strong> 定义子表名称，目前在 mycat 1.6 版本后才支持分表，并且 dataNode 在分表条件下只能配置一个</li><li><strong>needAddLimit</strong> 指定表是否需要在每个语句的后面加上 limit 限制，添加该属性后 mycat 会默认为查询语句后面添加 limit 100，如果 sql 语句中添加了 limit 限制，则该属性失效。该属性默认值为 true。<h5 id="childTable-标签"><a href="#childTable-标签" class="headerlink" title="childTable 标签"></a>childTable 标签</h5>定义 E-R 分片的子表，通过标签上的属性与父表关联，将有关联关系的父、子表放在同一个节点上，方便查询提高效率</li><li><strong>name</strong> 子表名称</li><li><strong>joinKey</strong> 插入子表时使用该属性查找父表存储的数据节点；该属性为子表的属性</li><li><strong>parentKey</strong> 与父表建立关联关系的列名。首先获取 joinKey 再通过 parentKey 指定的列名产生查询语句，通过执行该查询语句知道父表在哪个分片上，从而确定子表的的存储位置；该属性是父表的属性</li><li><strong>primaryKey</strong> 同 table 标签</li><li><strong>needAddLimit</strong> 同 table 标签<h5 id="dataNode-标签"><a href="#dataNode-标签" class="headerlink" title="dataNode 标签"></a>dataNode 标签</h5>定义 mycat 中的数据节点，一个 dataNode 标签就是一个独立的数据分片节点<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"dn1"</span> <span class="attr">dataHost</span>=<span class="string">"mysql1"</span> <span class="attr">database</span>=<span class="string">"mycattest1"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>name</strong> 定义 dataNode 的唯一名字，应用在 table 标签上的 dataNode 属性，建立表和数据节点的对应关系</li><li><strong>dataHost</strong> 定义该数据分片所属的数据库实例，需要在 dataHost 标签中定义</li><li><strong>dataBase</strong> 定义该分片所属数据库实例上的具体库，利用 实例+具体的库 两个维度定义分片，每个库上的表结构是一样的，这样可以方便对表进行水平拆分<h5 id="dataHost-标签"><a href="#dataHost-标签" class="headerlink" title="dataHost 标签"></a>dataHost 标签</h5>定义数据库实例、读写分离和心跳<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"mysql1"</span> <span class="attr">maxCon</span>=<span class="string">"1000"</span> <span class="attr">minCon</span>=<span class="string">"20"</span> <span class="attr">balance</span>=<span class="string">"0"</span> <span class="attr">writeType</span>=<span class="string">"0"</span> <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span> <span class="attr">switchType</span>=<span class="string">"1"</span> <span class="attr">slaveThreshold</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"hostM0"</span> <span class="attr">url</span>=<span class="string">"127.0.0.1:3306"</span> <span class="attr">user</span>=<span class="string">"test"</span> <span class="attr">password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">"hostS0"</span> <span class="attr">url</span>=<span class="string">"127.0.0.1:3306"</span> <span class="attr">user</span>=<span class="string">"test"</span> <span class="attr">password</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>name</strong> 定义 dataHost 标签的名称，在 dataNode 中使用</li><li><strong>maxCon</strong> 每个读写实例连接池的最大连接数，内嵌标签 writeHost 和 readHost 都会使用这个值来初始化连接池的最大长度</li><li><strong>minCon</strong> 每个读写实例连接池的最小连接数，初始化连接池大小</li><li><strong>balance</strong> 负载均衡类型<ul><li>balance=”0”：不开启读写分离机制，所有读操作发送到当前可用的 writeHost 上</li><li>balance=”1”：全部的 readHost 与 stand by writeHost 都参与当前 select 语句的负载均衡。即当为双主双从模式(M1-&gt;S1，M2-&gt;S2，并且M1，M2互为主备)，正常情况下 M2、S1、S2都参与 select 语句的负载均衡</li><li>balance=”2”：所有的读操作都随机地分在 writeHost 和 readHost 上</li><li>balance=”3”：所有的读请求都随机分发到 writeHost 对应的 readHost 上，writeHost 不负载读压力。该配置在 mycat 1.3 后才有</li></ul></li><li><strong>dbType</strong> 指定后端连接的数据库类型，支持二进制的 MySQL 协议，还可以用 JDBC 连接 MongoDB、Oracle 等</li><li><strong>dbDriver</strong> 指定连接后端使用的 Driver，可选 native 和 jdbc，因为 native 执行的是二进制的 MySQL 协议，所以可以使用 MySQL 和 MariaDB。其他类型的数据库需要使用 jdbc 驱动来支持，如果使用 jdbc，需要把支持 jdbc4 标准的驱动 jar 包放到 mycat 的 lib 文件夹下</li><li><strong>switchType</strong> <ul><li>-1：不自动切换</li><li>1：默认值，表示自动切换</li><li>2：基于 MySQL 主从同步的状态决定是否切换，心跳语句 <code>show slave status</code></li><li>3：基于 MySQL Galary Cluster 的切换机制(适合集群，用于 mycat 1.4.1及上)，心跳语句<code>show status like &#39;wsrep%&#39;</code></li></ul></li><li><strong>tempReadHostAvailable</strong> 如果配置了 writeHost，下面的 readHost 依旧可用，默认值为 0<h5 id="heartBeat-标签"><a href="#heartBeat-标签" class="headerlink" title="heartBeat 标签"></a>heartBeat 标签</h5>指明用于后端数据库心跳检查的语句，例如 MySQL 可以使用<code>select user()</code>，Oracle 可以使用<code>select 1 from dual</code>，这个标签还有 connectionInitSql 属性，当使用 Oracle 需要执行初始化 SQL 的语句放到这里。<h5 id="writeHost、readHost-标签"><a href="#writeHost、readHost-标签" class="headerlink" title="writeHost、readHost 标签"></a>writeHost、readHost 标签</h5>实例化后端连接池</li><li><strong>host</strong> 标识不同的实例，writeHost 通常用 *M1；readHost 通常用 *S1</li><li><strong>url</strong> 实例数据库连接地址，如果使用的是 native，一般为 <code>address:port</code>；使用 JDBC 或其他 dbDriver，需要自己指定；例如 JDBC示例：<code>jdbc:MySQL://localhost:3306</code></li><li><strong>user</strong> 后端存储实例的用户名</li><li><strong>password</strong> 后端存储实例的密码</li><li><strong>weight</strong> 在 readHost 中作为读节点的权重</li><li><strong>usingDecrypt</strong> 开启密码加密功能，0：不开启，1：开启<h3 id="rule-xml"><a href="#rule-xml" class="headerlink" title="rule.xml"></a>rule.xml</h3>分片规则配置文件， schema.xml 中 table 标签中的 rule 属性的值需要在 rule.xml 中配置<h5 id="function-标签"><a href="#function-标签" class="headerlink" title="function 标签"></a>function 标签</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">"mod-long"</span> <span class="attr">class</span>=<span class="string">"io.mycat.route.function.PartitionByMod"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"count"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>name</strong> 指定算法的名称，在该文件中唯一</li><li><strong>class</strong> 属性对应具体的分片算法，指定具体的算法类</li><li><strong>property</strong> 根据算法要求指定<h5 id="tableRule-标签"><a href="#tableRule-标签" class="headerlink" title="tableRule 标签"></a>tableRule 标签</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">"my-mod-long"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>mod-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>name</strong> 指定分片唯一算法名称</li><li><strong>rule</strong> 分片算法具体内容</li><li><strong>columns</strong> 对应表中用于分片的列名</li><li><strong>algorithm</strong> function 中定义的算法名称<h3 id="sequence-配置文件"><a href="#sequence-配置文件" class="headerlink" title="sequence 配置文件"></a>sequence 配置文件</h3>分库分表情况下，数据库自增主键无法保证主键在集群中全局唯一，mycat 提供本地配置和数据库配置<h5 id="本地文件方式"><a href="#本地文件方式" class="headerlink" title="本地文件方式"></a>本地文件方式</h5>要启用这种方式，需要在 server.xml 配置文件中配置如下参数：</li></ul><figure class="highlight plain"><figcaption><span>name</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">配置后，在 mycat 的conf目录下，在 sequence_conf.properties 配置如下参数：</span><br><span class="line">&#96;&#96;&#96;properties</span><br><span class="line">COMPANY.MAXID&#x3D;2000</span><br><span class="line">GLOBAL.MAXID&#x3D;20000</span><br><span class="line">COMPANY.HISIDS&#x3D;</span><br><span class="line">CUSTOMER.MAXID&#x3D;2000</span><br><span class="line">HOTNEWS.CURID&#x3D;1000</span><br><span class="line">ORDER.MINID&#x3D;1001</span><br><span class="line">CUSTOMER.HISIDS&#x3D;</span><br><span class="line">HOTNEWS.MINID&#x3D;1001</span><br><span class="line">GLOBAL.CURID&#x3D;10054</span><br><span class="line">ORDER.MAXID&#x3D;2000</span><br><span class="line">COMPANY.CURID&#x3D;1000</span><br><span class="line">CUSTOMER.CURID&#x3D;1000</span><br><span class="line">COMPANY.MINID&#x3D;1001</span><br><span class="line">GLOBAL.MINID&#x3D;10001</span><br><span class="line">HOTNEWS.MAXID&#x3D;2000</span><br><span class="line">CUSTOMER.MINID&#x3D;1001</span><br><span class="line">GLOBAL.HISIDS&#x3D;</span><br><span class="line">HOTNEWS.HISIDS&#x3D;</span><br><span class="line">ORDER.HISIDS&#x3D;</span><br><span class="line">ORDER.CURID&#x3D;1000</span><br></pre></td></tr></table></figure><p>mycat 重新发布后配置文件中的 sequence 会恢复到初始值；优点是本地文件加载且读取速度快</p><h5 id="数据库方式"><a href="#数据库方式" class="headerlink" title="数据库方式"></a>数据库方式</h5><p>在数据库中创建一张名为 sequence 的表，在 sequence_db_conf.properties 进行相关配置</p><ul><li><strong>sequence 获取步骤</strong><ul><li>初次使用 sequence，根据传入的 sequence 民称从数据表中读取 current_value、increment 到 mycat 中，并做 current_value = current_value + increment</li><li>mycat 将读取到的 current_value + increment 作为本次使用的 sequence 值，下次使用时 sequence 自动加一，当使用 increment 次后，执行与步骤一相同的操作</li><li>mycat 负责维护这张表，用到那些 sequence 时，只需要在这张表中插入一条记录即可。若某次读取的 sequence 没有用完，系统宕机了，则本次已经读取未使用的 sequence 值会被丢弃</li></ul></li><li><strong>数据库配置</strong></li></ul><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建 sequence 表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="keyword">sequence</span> (</span><br><span class="line">    <span class="keyword">name</span>          <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    current_value <span class="built_in">INT</span>         <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">increment</span>     <span class="built_in">INT</span>         <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">100</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">name</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br><span class="line"><span class="comment">#初始化记录</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">sequence</span> (<span class="keyword">name</span>, current_value, <span class="keyword">increment</span>) <span class="keyword">VALUES</span> (<span class="string">'GLOBAL'</span>, <span class="number">10000</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>创建存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前sequence值</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mycat_seq_currval;</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mycat_seq_currval(seq_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>)) <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">CHARSET</span> utf8</span><br><span class="line"><span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> retval <span class="built_in">VARCHAR</span>(<span class="number">64</span>);</span><br><span class="line"><span class="keyword">SET</span> retval = <span class="string">"-999999999,NULL"</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">concat</span>(<span class="keyword">CAST</span>(current_value <span class="keyword">AS</span> <span class="built_in">CHAR</span>), <span class="string">","</span>, <span class="keyword">CAST</span>(<span class="keyword">increment</span> <span class="keyword">AS</span> <span class="built_in">CHAR</span>)) <span class="keyword">INTO</span> retval <span class="keyword">FROM</span> <span class="keyword">sequence</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> = seq_name;</span><br><span class="line">RETURN retval;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置sequence值</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mycat_seq_setval;</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mycat_seq_setval(seq_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>),<span class="keyword">value</span> <span class="built_in">INTEGER</span>) <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">CHARSET</span> utf8</span><br><span class="line"><span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">sequence</span> <span class="keyword">SET</span> current_value = <span class="keyword">value</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> = seq_name;</span><br><span class="line">RETURN mycat_seq_currval(seq_name);</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取下一个sequence值</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mycat_seq_nextval;</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mycat_seq_nextval(seq_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>)) <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">CHARSET</span> utf8</span><br><span class="line"><span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">sequence</span> <span class="keyword">SET</span> current_value = current_value + <span class="keyword">increment</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> = seq_name;</span><br><span class="line">RETURN mycat_seq_currval(seq_name);</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><ul><li><strong>sequence_db_conf.properties 配置</strong> </li></ul><p>指定 sequence 表所在的节点信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sequence stored in datanode</span></span><br><span class="line"><span class="attr">GLOBAL</span>=<span class="string">dn1</span></span><br><span class="line"><span class="attr">COMPANY</span>=<span class="string">dn1</span></span><br><span class="line"><span class="attr">CUSTOMER</span>=<span class="string">dn1</span></span><br><span class="line"><span class="attr">ORDERS</span>=<span class="string">dn1</span></span><br></pre></td></tr></table></figure><h5 id="本地时间戳方式"><a href="#本地时间戳方式" class="headerlink" title="本地时间戳方式"></a>本地时间戳方式</h5><p>ID = 64 位二进制[42位(毫秒)+5位(机器ID)+5位(业务编码)+12位(重复累加)]，换算成十进制 18 位数的 long 类型，每毫秒可以并发 12 位二进制的累加</p><ul><li><strong>配置 server.xml</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sequenceHandlerType"</span>&gt;</span>2<span class="tag">&lt;/&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>配置 sequence_time_conf.properties</strong><ul><li>WORKID=0~31：可取 0 ~ 31 的任意整数</li><li>DATAACENTERID=0~31：可取 0 ~ 31 的任意整数<h5 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h5></li></ul></li><li>使用 catlet 注解</li><li>使用 zookeeper 实现<h5 id="自增长主键"><a href="#自增长主键" class="headerlink" title="自增长主键"></a>自增长主键</h5>利用 MySQL 数据库的自增主键功能，创建一个只有自增 ID 的表，在 table 标签中将 autoIncrement 置为 true，在 sequence_db_conf.properties 配置改数据表所在节点，在数据库的 sequence 表中增加该表的 sequence 记录</li></ul><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><h5 id="缓存配置文件"><a href="#缓存配置文件" class="headerlink" title="缓存配置文件"></a>缓存配置文件</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#used for mycat cache service conf</span></span><br><span class="line"><span class="meta">factory.encache</span>=<span class="string">io.mycat.cache.impl.EnchachePooFactory</span></span><br><span class="line"><span class="comment">#key is pool name ,value is type,max size, expire seconds</span></span><br><span class="line"><span class="meta">pool.SQLRouteCache</span>=<span class="string">encache,10000,1800</span></span><br><span class="line"><span class="meta">pool.ER_SQL2PARENTID</span>=<span class="string">encache,1000,1800</span></span><br><span class="line"><span class="meta">layedpool.TableID2DataNodeCache</span>=<span class="string">encache,10000,18000</span></span><br><span class="line"><span class="meta">layedpool.TableID2DataNodeCache.TESTDB_ORDERS</span>=<span class="string">50000,18000</span></span><br></pre></td></tr></table></figure><p>factory.encache 指定缓存的实现类，不同的缓存实现类对应不同的缓存框架，后面的指定缓存的框架、缓存大小、过期时间</p><h5 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h5><p>配置日志的输出路径以及日志级别</p><div style="text-align:center;margin-top:50px;margin-bottom:50px;">    <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; class=&quot;headerlink&quot; title=&quot;配置文件&quot;&gt;&lt;/a&gt;配置文件&lt;/h2&gt;&lt;h3 id=&quot;server-xml&quot;&gt;&lt;a href=&quot;#server-xml&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>设计/架构/亿级流量高可用高并发/负载均衡与反向代理</title>
    <link href="https://zcy-fover.github.io/2020/02/22/%E8%AE%BE%E8%AE%A1/%E6%9E%B6%E6%9E%84/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E9%AB%98%E5%8F%AF%E7%94%A8%E9%AB%98%E5%B9%B6%E5%8F%91/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>https://zcy-fover.github.io/2020/02/22/%E8%AE%BE%E8%AE%A1/%E6%9E%B6%E6%9E%84/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E9%AB%98%E5%8F%AF%E7%94%A8%E9%AB%98%E5%B9%B6%E5%8F%91/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</id>
    <published>2020-02-22T07:55:38.734Z</published>
    <updated>2020-02-22T07:55:38.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="负载均衡与反向代理"><a href="#负载均衡与反向代理" class="headerlink" title="负载均衡与反向代理"></a>负载均衡与反向代理</h2><blockquote><ul><li><h6 id="上游服务器配置：使用-upstream-server-配置上游服务器配置"><a href="#上游服务器配置：使用-upstream-server-配置上游服务器配置" class="headerlink" title="上游服务器配置：使用 upstream server 配置上游服务器配置"></a>上游服务器配置：使用 upstream server 配置上游服务器配置</h6></li><li><h6 id="负载均衡算法：配置多个上游服务器时的负载均衡机制"><a href="#负载均衡算法：配置多个上游服务器时的负载均衡机制" class="headerlink" title="负载均衡算法：配置多个上游服务器时的负载均衡机制"></a>负载均衡算法：配置多个上游服务器时的负载均衡机制</h6></li><li><h6 id="失败重试机制：配置当超时或者上游服务器不存活时，是否需要重试其他上游服务器"><a href="#失败重试机制：配置当超时或者上游服务器不存活时，是否需要重试其他上游服务器" class="headerlink" title="失败重试机制：配置当超时或者上游服务器不存活时，是否需要重试其他上游服务器"></a>失败重试机制：配置当超时或者上游服务器不存活时，是否需要重试其他上游服务器</h6></li><li><h6 id="服务器心跳检查：上游服务器的健康检查-心跳检查"><a href="#服务器心跳检查：上游服务器的健康检查-心跳检查" class="headerlink" title="服务器心跳检查：上游服务器的健康检查  /  心跳检查"></a>服务器心跳检查：上游服务器的健康检查  /  心跳检查</h6></li></ul></blockquote><h3 id="upstream配置"><a href="#upstream配置" class="headerlink" title="upstream配置"></a>upstream配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">server 192.168.61.1:9080 weight&#x3D;1;</span><br><span class="line">server 192.168.61.2:8080 weight&#x3D;1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>IP 地址和端口</strong>：配置上游服务器的 IP 地址和端口</li><li><strong>权重</strong>：weight配置权重，默认是1，权重越高分配到的请求量就越多，按照权重比例分配</li></ul><div style="text-align:center;margin-top:50px;margin-bottom:50px;">    <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;负载均衡与反向代理&quot;&gt;&lt;a href=&quot;#负载均衡与反向代理&quot; class=&quot;headerlink&quot; title=&quot;负载均衡与反向代理&quot;&gt;&lt;/a&gt;负载均衡与反向代理&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h6 id=&quot;上游服务器配置：使用-upst
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>设计/架构/亿级流量高可用高并发/交易系统设计原则</title>
    <link href="https://zcy-fover.github.io/2020/02/22/%E8%AE%BE%E8%AE%A1/%E6%9E%B6%E6%9E%84/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E9%AB%98%E5%8F%AF%E7%94%A8%E9%AB%98%E5%B9%B6%E5%8F%91/%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>https://zcy-fover.github.io/2020/02/22/%E8%AE%BE%E8%AE%A1/%E6%9E%B6%E6%9E%84/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E9%AB%98%E5%8F%AF%E7%94%A8%E9%AB%98%E5%B9%B6%E5%8F%91/%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</id>
    <published>2020-02-22T07:55:35.873Z</published>
    <updated>2020-02-22T07:55:35.873Z</updated>
    
    <content type="html"><![CDATA[<h3 id="高并发原则"><a href="#高并发原则" class="headerlink" title="高并发原则"></a>高并发原则</h3><ul><li><p><strong>无状态</strong>：应用无状态，配置文件有状态。应用要支持水平扩展</p></li><li><p><strong>拆分</strong>：大型系统设计时，要按照功能模块进行拆分，有以下几个维度</p><ol><li><h6 id="系统维度：按照系统功能-业务拆分"><a href="#系统维度：按照系统功能-业务拆分" class="headerlink" title="系统维度：按照系统功能/业务拆分"></a><strong>系统维度</strong>：按照系统功能/业务拆分</h6></li><li><h6 id="功能维度：对一个系统进行功能再拆分"><a href="#功能维度：对一个系统进行功能再拆分" class="headerlink" title="功能维度：对一个系统进行功能再拆分"></a><strong>功能维度</strong>：对一个系统进行功能再拆分</h6></li><li><h6 id="读写维度：根据读写比例特征进行拆分（读服务考虑使用缓存，写入量大考虑使用分库分表）"><a href="#读写维度：根据读写比例特征进行拆分（读服务考虑使用缓存，写入量大考虑使用分库分表）" class="headerlink" title="读写维度：根据读写比例特征进行拆分（读服务考虑使用缓存，写入量大考虑使用分库分表）"></a><strong>读写维度</strong>：根据读写比例特征进行拆分（读服务考虑使用缓存，写入量大考虑使用分库分表）</h6></li><li><h6 id="AOP维度：根据访问特征，进行AOP拆分"><a href="#AOP维度：根据访问特征，进行AOP拆分" class="headerlink" title="AOP维度：根据访问特征，进行AOP拆分"></a><strong>AOP维度</strong>：根据访问特征，进行AOP拆分</h6></li><li><h6 id="模块维度：按照基础或者代码模块拆分，基础模块分库分表、数据库连接池；代码结构按照三层（Web、Service、DAO）"><a href="#模块维度：按照基础或者代码模块拆分，基础模块分库分表、数据库连接池；代码结构按照三层（Web、Service、DAO）" class="headerlink" title="模块维度：按照基础或者代码模块拆分，基础模块分库分表、数据库连接池；代码结构按照三层（Web、Service、DAO）"></a><strong>模块维度</strong>：按照基础或者代码模块拆分，基础模块分库分表、数据库连接池；代码结构按照三层（Web、Service、DAO）</h6></li></ol></li><li><p><strong>服务化</strong>：服务独立部署，避免相互影响；进程内服务 -&gt; 单机远程服务 -&gt; 集群手动注册服务 -&gt; 自动注册和发现服务 -&gt; 服务的分组/隔离/路由 -&gt; 服务治理</p></li><li><p><strong>消息队列</strong>：使用消息队列进行服务解耦，可做大流量缓冲，但是要考虑数据校对问题</p><ol><li><h6 id="数据异构："><a href="#数据异构：" class="headerlink" title="数据异构："></a>数据异构：</h6></li><li><h6 id="数据聚合：数据异构把数据从多个数据源拿过来，在做聚合给前端"><a href="#数据聚合：数据异构把数据从多个数据源拿过来，在做聚合给前端" class="headerlink" title="数据聚合：数据异构把数据从多个数据源拿过来，在做聚合给前端"></a>数据聚合：数据异构把数据从多个数据源拿过来，在做聚合给前端</h6></li><li><h6 id="前段展示：可通过一个或少量几个请求获取数据"><a href="#前段展示：可通过一个或少量几个请求获取数据" class="headerlink" title="前段展示：可通过一个或少量几个请求获取数据"></a>前段展示：可通过一个或少量几个请求获取数据</h6></li></ol></li><li><p><strong>缓存</strong>：</p><ol><li><h6 id="浏览器缓存：可用于对实时性要求较低的数据，例如静态文件、广告等等"><a href="#浏览器缓存：可用于对实时性要求较低的数据，例如静态文件、广告等等" class="headerlink" title="浏览器缓存：可用于对实时性要求较低的数据，例如静态文件、广告等等"></a>浏览器缓存：可用于对实时性要求较低的数据，例如静态文件、广告等等</h6></li><li><h6 id="APP客户端缓存：防止大促瞬间流量冲刷，可以提前把一些静态文件下发缓存"><a href="#APP客户端缓存：防止大促瞬间流量冲刷，可以提前把一些静态文件下发缓存" class="headerlink" title="APP客户端缓存：防止大促瞬间流量冲刷，可以提前把一些静态文件下发缓存"></a>APP客户端缓存：防止大促瞬间流量冲刷，可以提前把一些静态文件下发缓存</h6></li><li><h6 id="CDN缓存：利用CDN节点为用户推送数据；"><a href="#CDN缓存：利用CDN节点为用户推送数据；" class="headerlink" title="CDN缓存：利用CDN节点为用户推送数据；"></a>CDN缓存：利用CDN节点为用户推送数据；</h6><ul><li>推送机制：内容节点变更后，推送到CDN边缘节点；</li><li>拉取机制：先访问边缘节点，当没有内容时，回源到源服务节点拿取内容并缓存到CDN边缘节点。在设计URL时要注意不要有随机数，这样每次都会穿透CDN回源到源服务器，相当于CDN没有作用。</li></ul></li><li><h6 id="接入层缓存："><a href="#接入层缓存：" class="headerlink" title="接入层缓存："></a>接入层缓存：</h6><ul><li>URL重写：按照规定的设计格式、顺序重写，避免随机数</li><li>一致性哈希：按照指定的参数做一致性哈希，保证相同的数据落到同一台服务器上</li><li>proxy_cache：使用内存 / SSD 级代理缓存来缓存内容</li><li>proxy_cache_lock：使用 lock 机制，将多个回源合并为一个，减少回源量</li><li>shared_dict：如果架构使用 Nginx+Lua 实现，可以考虑使用 Lua  shard_dict 进行缓存，最大的好处就是reload缓存不会丢失。<a href="https://www.cnblogs.com/xd502djj/p/6097773.html" target="_blank" rel="noopener">Nginx + Lua参考</a></li></ul></li><li><h6 id="应用层缓存：堆内缓存、堆外缓存"><a href="#应用层缓存：堆内缓存、堆外缓存" class="headerlink" title="应用层缓存：堆内缓存、堆外缓存"></a>应用层缓存：堆内缓存、堆外缓存</h6></li><li><h6 id="分布式缓存：部署分布式缓存集群"><a href="#分布式缓存：部署分布式缓存集群" class="headerlink" title="分布式缓存：部署分布式缓存集群"></a>分布式缓存：部署分布式缓存集群</h6></li></ol></li><li><p><strong>并发化</strong>：非依赖服务并发请求</p></li></ul><h3 id="高可用原则"><a href="#高可用原则" class="headerlink" title="高可用原则"></a>高可用原则</h3><ul><li><strong>降级</strong><ol><li>开关集中化管理：通过推送机制把开关推送到各个应用</li><li>可降级的多级读服务：服务降级为只读本地缓存、只读分布式缓存、只读默认降级数据</li><li>开关前置化：在 Nginx 层做开关，请求流量不回源到后端服务器</li><li>业务降级：当高并发流量来袭，为保证主服务，将部分同步服务改为异步，优先处理高优先级数据或特殊特征数据，合理分配进入系统的流量，最终要保持数据一致性。</li></ol></li><li><strong>限流</strong>：做好防火墙<ol><li>恶意请求只访问到 cache</li><li>恶意 IP 拦截</li><li>使用 Nginx 的 limit 模块处理，避免流量超出系统峰值</li></ol></li><li><strong>切流量</strong>：某机房瘫痪切换流量到其他机房<ol><li>DNS：切换机房入口</li><li>HttpDNS：客户端分配好流量入口，绕过运营商LocalDNS并实现高精准的流量调度</li><li>LVS / HsProxy：切换故障的Nginx接入层</li><li>Nginx：切换故障的应用接入层</li></ol></li><li><strong>可回滚</strong></li></ul><h3 id="业务设计原则"><a href="#业务设计原则" class="headerlink" title="业务设计原则"></a>业务设计原则</h3><ul><li><strong>防重设计</strong></li><li><strong>幂等设计</strong></li><li><strong>流程可定义</strong></li><li><strong>状态与状态机</strong></li><li><strong>后台系统操作可反馈</strong></li><li><strong>后台系统审批化</strong></li><li><strong>文档和注释</strong></li><li><strong>备份</strong></li></ul><div style="text-align:center;margin-top:50px;margin-bottom:50px;">    <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;高并发原则&quot;&gt;&lt;a href=&quot;#高并发原则&quot; class=&quot;headerlink&quot; title=&quot;高并发原则&quot;&gt;&lt;/a&gt;高并发原则&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;无状态&lt;/strong&gt;：应用无状态，配置文件有状态。应用要支持水平扩展&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构和算法/数据结构与算法之美/数据结构与算法</title>
    <link href="https://zcy-fover.github.io/2020/02/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <id>https://zcy-fover.github.io/2020/02/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</id>
    <published>2020-02-22T07:46:54.571Z</published>
    <updated>2020-02-22T07:46:54.572Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据结构是为算法服务的，算法要作用在特定的数据结构上"><a href="#数据结构是为算法服务的，算法要作用在特定的数据结构上" class="headerlink" title="数据结构是为算法服务的，算法要作用在特定的数据结构上"></a>数据结构是为算法服务的，算法要作用在特定的数据结构上</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/WEBfade05dbc809224188b9b55bb46ceb75?method=download&shareKey=7c28d8c112f38f39047780ce931b6eb8" alt="数据结构和算法图谱" title="">                </div>                <div class="image-caption">数据结构和算法图谱</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据结构是为算法服务的，算法要作用在特定的数据结构上&quot;&gt;&lt;a href=&quot;#数据结构是为算法服务的，算法要作用在特定的数据结构上&quot; class=&quot;headerlink&quot; title=&quot;数据结构是为算法服务的，算法要作用在特定的数据结构上&quot;&gt;&lt;/a&gt;数据结构是为算法
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构和算法/数据结构与算法之美/1.复杂度分析</title>
    <link href="https://zcy-fover.github.io/2020/02/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/1.%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"/>
    <id>https://zcy-fover.github.io/2020/02/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/1.%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</id>
    <published>2020-02-22T07:46:51.484Z</published>
    <updated>2020-02-29T06:03:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>对于算法执行的时间和空间的分析，通过分析可以衡量算法的执行效率。</p><h3 id="事后统计法"><a href="#事后统计法" class="headerlink" title="事后统计法"></a>事后统计法</h3><p>通过统计、监控得到算法执行的时间和占用的内存大小</p><h4 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h4><ul><li>测试结果依赖于测试环境</li><li>测试结果受数据规模的影响比较大<h3 id="大-O-复杂度表示法"><a href="#大-O-复杂度表示法" class="headerlink" title="大 O 复杂度表示法"></a>大 O 复杂度表示法</h3>代码的执行时间 T(n) 与每行代码的执行次数 n 成正比</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(n) &#x3D; O(f(n))</span><br></pre></td></tr></table></figure><p><strong>大 O 时间复杂度表示法</strong> 表示代码执行时间随数据规模增长的变化趋势，也叫渐进时间复杂度，简称时间复杂度。</p><p>例如：假设每行代码的执行时间是 <code>unitTime</code> 且每行代码的执行时间相同，则下面代码的执行总时间是 $(2n + 2) * unitTime$ 即 $T(n) = O(2n + 2)$，当 n 趋近于无穷大时，则用量级表示即可：$T(n) = O(n)$，如果是双层循环则是：$T(n) = O(n^2)$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><h4 id="分析方法"><a href="#分析方法" class="headerlink" title="分析方法"></a>分析方法</h4><ul><li>关注循环执行次数最多的一段代码</li><li>加法法则：总复杂的等于量级最大的那段代码的复杂度</li><li>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘机<h4 id="常见复杂度量级"><a href="#常见复杂度量级" class="headerlink" title="常见复杂度量级"></a>常见复杂度量级</h4></li><li>常量阶 $O(1)$</li><li>对数阶 $O(logn)$</li><li>线性阶 $O(n)$</li><li>线性对数阶 $O(nlogn)$</li><li>k 次方阶 $O(n^2)$  $O(n^3)$…$O(n^k)$</li><li>指数阶 $O(2^n)$</li><li>阶乘阶 $O(n!)$</li></ul><p>非多项式量级：$O(2^n)$ 和 $O(n!)$，其他的是多项式量级，非多项式量级的算法问题叫做 <code>NP (Non-Deterministic Polynomial)</code>非确定多项式问题</p><h3 id="空间复杂度分析"><a href="#空间复杂度分析" class="headerlink" title="空间复杂度分析"></a>空间复杂度分析</h3><p>空间复杂度是算法的存储空间与数据规模之间的增长关系，也叫做渐进空间复杂度</p><h3 id="复杂度分析补充"><a href="#复杂度分析补充" class="headerlink" title="复杂度分析补充"></a>复杂度分析补充</h3><h4 id="最好情况时间复杂度"><a href="#最好情况时间复杂度" class="headerlink" title="最好情况时间复杂度"></a>最好情况时间复杂度</h4><p>在理想的情况下执行代码的时间复杂度；例如下面代码的最好情况时间复杂度是：$O(1)$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n 表示数组 array 的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pos = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] == x) &#123;</span><br><span class="line">            pos = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最坏情况时间复杂度"><a href="#最坏情况时间复杂度" class="headerlink" title="最坏情况时间复杂度"></a>最坏情况时间复杂度</h4><p>在最糟糕的情况下执行代码的时间复杂度；例如上面代码的最坏情况时间复杂度是：$O(n)$</p><h4 id="平均情况时间复杂度"><a href="#平均情况时间复杂度" class="headerlink" title="平均情况时间复杂度"></a>平均情况时间复杂度</h4><p>将每种情况出现的概率考虑进去，例如上面的代码：要查找的数据出现在数组中和不出现在数组中的概率是$1/2$，出现在 0～n-1 这 n 个位置的概率是 $1/n$，则要查找的数据可能出现在数组中的概率是：$1/2n$，将每种情况发生的情况考虑进去就是，去掉系数常量就是 $O(n)$<br>$$<br>1<em>\frac{1}{2n} + 2</em>\frac{1}{2n}+…+n<em>\frac{1}{2n}+n</em>\frac{1}{2}=\frac{n(n+1)}{4n}+\frac{n}{2}=\frac{3n+1}{4}<br>$$</p><h4 id="均摊时间复杂度"><a href="#均摊时间复杂度" class="headerlink" title="均摊时间复杂度"></a>均摊时间复杂度</h4><p>对一个数据结构的一组操作中，大部分情况下耗时都很低，个别情况比较高，并且这些操作存在前后连贯的时序关系，可以将这一组操作放在一块儿分析，将高耗时的分摊到其他情况中。</p><div style="text-align:center;margin-top:50px;margin-bottom:50px;">    <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;复杂度分析&quot;&gt;&lt;a href=&quot;#复杂度分析&quot; class=&quot;headerlink&quot; title=&quot;复杂度分析&quot;&gt;&lt;/a&gt;复杂度分析&lt;/h2&gt;&lt;p&gt;对于算法执行的时间和空间的分析，通过分析可以衡量算法的执行效率。&lt;/p&gt;
&lt;h3 id=&quot;事后统计法&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构和算法/数据结构与算法之美/2.数组</title>
    <link href="https://zcy-fover.github.io/2020/02/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/2.%E6%95%B0%E7%BB%84/"/>
    <id>https://zcy-fover.github.io/2020/02/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/2.%E6%95%B0%E7%BB%84/</id>
    <published>2020-02-22T07:46:49.616Z</published>
    <updated>2020-02-29T06:12:39.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><strong>数组</strong>：一种线性表数据结构，用一组连续的内存空间，来存储一组具有相同类型的数据</p><h3 id="如何实现数组随机访问"><a href="#如何实现数组随机访问" class="headerlink" title="如何实现数组随机访问"></a>如何实现数组随机访问</h3><h4 id="线性表特性"><a href="#线性表特性" class="headerlink" title="线性表特性"></a>线性表特性</h4><p>数据像排成一条线，每个线性表上的数据最多只有两个方向；数组、链表、队列、栈都是线性表。相对立就是非线性表，比如二叉树、堆、图等</p><h4 id="连续的存储空间和相同的数据类型"><a href="#连续的存储空间和相同的数据类型" class="headerlink" title="连续的存储空间和相同的数据类型"></a>连续的存储空间和相同的数据类型</h4><p>数组的连续存储使得地址空间可以根据第几个元素和每个元素的空间大小算出地址，从而可以实现随机访问，但是随即访问也使得删除和插入变得低效，需要迁移很多数据。寻址公式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[i] = base_address + i * data_type_size</span><br></pre></td></tr></table></figure><p>对于一个 m*n 的二维数组，寻址公式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[i][j] = base_address + (i * n + j) * data_type_size</span><br></pre></td></tr></table></figure><h3 id="数组的插入删除"><a href="#数组的插入删除" class="headerlink" title="数组的插入删除"></a>数组的插入删除</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>在一个长度为 n 的数组中在 k 位置插入一个元素，则需要把后面 n - k 个元素向后移一位，如果刚好是最后一个元素，则时间复杂度是 $O(1)$，如果是第一个元素则是 $O(n)$，平均时间复杂度是 $(1+2+3+…+n) / n = O(n)$。</p><p>当插入的数列本身是无序的时候，可以把插入的位置的元素直接放到数组的最后，避免大规模移动数据</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>删除的场景类似于出入，如果数组无序，可以把最后一个元素放到要删除的位置，也可以避免大规模移动数据。</p><p>也可以利用 JVM 标记清除的思想，将元素标记为删除，当空间不足或者达到一定量时，统一做删除操作</p><h3 id="容器和数组"><a href="#容器和数组" class="headerlink" title="容器和数组"></a>容器和数组</h3><p>数组需要提前划分好连续的地址空间大小，无法动态扩容；容器可以支持动态扩容</p><h3 id="数组越界问题"><a href="#数组越界问题" class="headerlink" title="数组越界问题"></a>数组越界问题</h3><p>访问超过划分的地址空间就会出现异常。但对于一些语言和编译器有可能会出现无限循环的情况。例如这段 C 语言，在有的编译器下可能出现循环访问的情况。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(; i&lt;=<span class="number">3</span>; i++)&#123;</span><br><span class="line">        arr[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"hello world\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C 语言中除受限内存空间所有内存可以自由访问。数组大小为 3，a[0]、a[1]、a[2]，当数组大于3时才结束循环，此时会造成访问越界，但这个地址刚好是变量 i 的地址，就会导致无限循环。这里的循环问题也是特例，这个还和编译器分配内存和字节对齐相关。</p><h3 id="数组下标从-0-开始"><a href="#数组下标从-0-开始" class="headerlink" title="数组下标从 0 开始"></a>数组下标从 0 开始</h3><p>数组下标为 0 时寻址公式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[i] = base_address + i * data_type_size</span><br></pre></td></tr></table></figure><p>下标为 1 时寻址公式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[i] = base_address + (i - <span class="number">1</span>) * data_type_size</span><br></pre></td></tr></table></figure><p>对 CPU 来说需要多做一次减法操作，在以前机器性能不高时可能有一定作用。现在来看应该作用不大。保留下来应该也有历史原因，现在有些语言数组不一定从 0 开始，甚至可以有负数，例如 python。</p><div style="text-align:center;margin-top:50px;margin-bottom:50px;">    <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;数组&lt;/strong&gt;：一种线性表数据结构，用一组连续的内存空间，来存储一组具有相同类型的数据&lt;/p&gt;
&lt;h3 id=&quot;如何
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构和算法/数据结构与算法之美/3.链表</title>
    <link href="https://zcy-fover.github.io/2020/02/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/3.%E9%93%BE%E8%A1%A8/"/>
    <id>https://zcy-fover.github.io/2020/02/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/3.%E9%93%BE%E8%A1%A8/</id>
    <published>2020-02-22T07:46:46.498Z</published>
    <updated>2020-02-29T06:04:32.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="链表介绍"><a href="#链表介绍" class="headerlink" title="链表介绍"></a>链表介绍</h3><ul><li>线性表数据结构</li><li>内存空间不连续，将分散的内存块串联起来，进行数据存储</li><li>链表的每个数据节点，不仅存储数据还要存储下一个节点的地址<h3 id="链表特点"><a href="#链表特点" class="headerlink" title="链表特点"></a>链表特点</h3></li><li>由于链表的数据结构，插入、删除效率高(改变指针指向即可)，时间复杂度 <code>$O(1)$</code>，但是随机访问的速度较慢，需要从头遍历链表。这个和数组相反</li><li>由于链表的节点不仅存储数据还要存储下一节点的指针，所以存储空间相较于数组消耗较大<h3 id="单链表、循环链表、双向链表、双向循环链表"><a href="#单链表、循环链表、双向链表、双向循环链表" class="headerlink" title="单链表、循环链表、双向链表、双向循环链表"></a>单链表、循环链表、双向链表、双向循环链表</h3><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4></li><li>每个节点存储数据和下一个节点的指针，即后继指针</li><li>第一个节点是<strong>头结点</strong>，记录链表的基地址；最后一个是<strong>尾节点</strong>，指向 NULL</li><li>单链表的的插入和删除的时间复杂度是 <code>$O(1)$</code>，查询的时间复杂度是 <code>$O(n)$</code>。<h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4></li><li>尾节点的后继节点是头结点</li><li>比较适合于处理环形数据结构的问题，例如约瑟夫环问题<h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4></li><li>每个节点有后继指针和前驱指针；头结点的前驱指针是 NULL，尾节点的后继指针是 NULL</li><li>插入、删除操作比单链表效率更高 <code>$O(1)$</code> 级别。以删除操作为例，删除操作分为 2 种情况：给定数据值删除对应节点和给定节点地址删除节点。对于前一种情况，单链表和双向链表都需要从头到尾进行遍历从而找到对应节点进行删除，时间复杂度为 <code>$O(n)$</code> 。对于第二种情况，要进行删除操作必须找到前驱节点，单链表需要从头到尾进行遍历直到 <code>p-&gt;next = q</code>，时间复杂度为 <code>$O(n)$</code>，而双向链表可以直接找到前驱节点，时间复杂度为 <code>$O(1)$</code>。<h4 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h4></li><li>首节点的前驱指针指向尾节点，尾节点的后继指针指向首节点<h3 id="指针和引用"><a href="#指针和引用" class="headerlink" title="指针和引用"></a>指针和引用</h3></li><li>指针和引用是同一个概念，都是存储所指对象的内存地址</li><li>将某个变量赋值给指针就是将变量的内存地址赋值给指针；对应的就是指针存储的就是变量的内存地址，通过这个指针就可以找到这个变量<h3 id="指针丢失、内存泄漏"><a href="#指针丢失、内存泄漏" class="headerlink" title="指针丢失、内存泄漏"></a>指针丢失、内存泄漏</h3></li><li>链表操作时，要注意指针的交换顺序，避免出现指针丢失的情况。例如，要在当前节点 p 插入节点 x，示例1的操作会导致 <code>x-&gt;next = x</code>，造成整个链表断裂；只需将两个语句顺序交换即可。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例 1</span></span><br><span class="line">p-&gt;next = x;</span><br><span class="line">x-&gt;next = p-&gt;next;</span><br><span class="line"><span class="comment">// 示例 2</span></span><br><span class="line">x-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = x;</span><br></pre></td></tr></table></figure></li><li>在没有自动管理内存的编程语言，再删除节点后要手动释放内存空间，避免造成内存泄漏<h3 id="利用哨兵实现插入、删除"><a href="#利用哨兵实现插入、删除" class="headerlink" title="利用哨兵实现插入、删除"></a>利用哨兵实现插入、删除</h3></li><li>针对链表的插入、删除，插入时需要对链表的第一个节点和最后一个节点进行特殊判断；</li><li>引入哨兵，“哨兵”节点不存储数据，无论链表是否为空，head指针都会指向它，作为链表的头结点始终存在。这样，插入第一个节点和插入其他节点，删除最后一个节点和删除其他节点都可以统一为相同的代码实现逻辑了。</li></ul><div style="text-align:center;margin-top:50px;margin-bottom:50px;">    <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h2&gt;&lt;h3 id=&quot;链表介绍&quot;&gt;&lt;a href=&quot;#链表介绍&quot; class=&quot;headerlink&quot; title=&quot;链表介绍&quot;&gt;&lt;/a&gt;链表介绍&lt;/h
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构和算法/数据结构与算法之美/4.栈</title>
    <link href="https://zcy-fover.github.io/2020/02/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/4.%E6%A0%88/"/>
    <id>https://zcy-fover.github.io/2020/02/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/4.%E6%A0%88/</id>
    <published>2020-02-22T07:46:45.089Z</published>
    <updated>2020-02-29T06:05:00.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>先进后出，后进先出。栈是一种操作受限的线性表，只允许在一端插入和删除。用数组实现的栈叫做顺序栈，用链表实现的栈叫做链式栈。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>空间复杂度：栈在操作过程中，存储空间是提前申请好的，空间复杂度是 $O(1)$</li><li>时间复杂度：栈的操作只涉及个别元素的操作，所以时间复杂度是 $O(1)$<h3 id="顺序栈、链式栈扩容"><a href="#顺序栈、链式栈扩容" class="headerlink" title="顺序栈、链式栈扩容"></a>顺序栈、链式栈扩容</h3></li><li>顺序栈：顺序栈在栈满之后如果需要扩容需要重新申请一个更大的数组，将数据迁移过去</li><li>链式栈：栈支持动态扩容，但是需要存储后继节点的地址指针，内存消耗较多<h3 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h3>函数调用、表达式求值、括号匹配<h3 id="利用栈实现浏览器的前进后退"><a href="#利用栈实现浏览器的前进后退" class="headerlink" title="利用栈实现浏览器的前进后退"></a>利用栈实现浏览器的前进后退</h3>需要使用两个栈：前进栈 X，后退栈 Y，将一次浏览的页面（a、b、c）按顺序压入前进栈 X，在 c 页面点后退则将 c<br>从 X 出栈，然后放入后退栈 Y 中；再点后退的话同理，将 b 放入 Y 中，此时点前进 则把 b 从Y中出栈，放入 X 中，需要注意的是前进栈 X 入栈时将入栈的元素和 Y 栈的栈顶元素比较，如果相同则 Y 栈顶出栈，不相同则将 Y 栈清空。<div style="text-align:center;margin-top:50px;margin-bottom:50px;">  <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h2&gt;&lt;p&gt;先进后出，后进先出。栈是一种操作受限的线性表，只允许在一端插入和删除。用数组实现的栈叫做顺序栈，用链表实现的栈叫做链式栈。&lt;/p&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构和算法/数据结构与算法之美/5.队列</title>
    <link href="https://zcy-fover.github.io/2020/02/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/5.%E9%98%9F%E5%88%97/"/>
    <id>https://zcy-fover.github.io/2020/02/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/5.%E9%98%9F%E5%88%97/</id>
    <published>2020-02-22T07:46:43.368Z</published>
    <updated>2020-02-29T06:05:38.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="什么是队列"><a href="#什么是队列" class="headerlink" title="什么是队列"></a>什么是队列</h3><ul><li>先进先出，也是一种操作受限的线性表数据结构。用数组实现的队列叫做顺序队列，用链表实现的队列叫做链式队列</li><li>队列支持队头入队，队尾出队</li><li>队列需要有两个指针 head 指向头指针，tail 指向队尾指针<h3 id="队列实现"><a href="#队列实现" class="headerlink" title="队列实现"></a>队列实现</h3><h4 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h4>顺序队列当入队、出队时 head 指针和 tail都向后移。顺序队列当 tail 指针到达数组尾部，数组 索引 [0 - head] 之间的空间就会浪费掉，可以利用数据迁移的想法将在入队时将数据整体往前迁移。这样出队时间复杂度是 ${O(1)}$ ，入队时需要数据搬移，最好的情况就是 head 指针在数组索引 0 的位置，不需要迁移，否则假如队列有 n 个元素，则需要迁移 n 次。则平均时间复杂度$(1+2+3+…+n) / n = O(n)$。<h4 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h4>链式队列也需要两个指针，head 指针和 tail 指针。链式队列的出队、入队时间复杂度都是${O(1)}$。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入队操作</span></span><br><span class="line">tail.next = newNode;</span><br><span class="line">tail = tail.next;</span><br><span class="line"><span class="comment">// 出队操作</span></span><br><span class="line">head = head.next;</span><br></pre></td></tr></table></figure><h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4>用数组实现的队列当出队时会造成空间浪费，所以需要数据搬移，利用循环队列来解决这个问题。<div><img src="https://note.youdao.com/yws/api/personal/file/WEBd76a8be0ce852584fe5a019711d19c4c?method=download&shareKey=380fa5043148fbbde2945c10905a9f42" style="with: 300px; height: 300px"></div></li></ul><p>关键的地方是如何判断堆满和队空的条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">head = (head + <span class="number">1</span>) % n;</span><br><span class="line">tail = (tail + <span class="number">1</span>) % n;</span><br></pre></td></tr></table></figure><h4 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h4><p>队列为空时出队操作会被阻塞，此时还无数据可取；队列满时入队被阻塞直到队列中有空闲位置。类似于 生产者-消费者 模型。当多个线程同时操作队列时就会出现线程安全问题。</p><h4 id="并发队列"><a href="#并发队列" class="headerlink" title="并发队列"></a>并发队列</h4><p>线程安全的队列叫做并发队列，需要在出队、入队操作上加锁。基于数组的循环队列利用 CAS 原子操作可以实现高效的并发队列。</p><div style="text-align:center;margin-top:50px;margin-bottom:50px;">    <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h2&gt;&lt;h3 id=&quot;什么是队列&quot;&gt;&lt;a href=&quot;#什么是队列&quot; class=&quot;headerlink&quot; title=&quot;什么是队列&quot;&gt;&lt;/a&gt;什么是队
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构和算法/数据结构与算法之美/6.递归</title>
    <link href="https://zcy-fover.github.io/2020/02/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/6.%E9%80%92%E5%BD%92/"/>
    <id>https://zcy-fover.github.io/2020/02/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/6.%E9%80%92%E5%BD%92/</id>
    <published>2020-02-22T07:46:41.146Z</published>
    <updated>2020-02-29T06:06:13.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="递归简介"><a href="#递归简介" class="headerlink" title="递归简介"></a>递归简介</h3><p>把规模大的问题转化为规模小的相似子问题来处理，子问题要有明显的结束条件。所有的所有的递归问题都可以用递归公示来表示。</p><h3 id="递归需要满足的条件"><a href="#递归需要满足的条件" class="headerlink" title="递归需要满足的条件"></a>递归需要满足的条件</h3><p>1、一个问题的解可以拆分为几个子问题的解</br><br>2、这个问题与分解之后的子问题，除了数据规模不同，求解思路完全相同</br><br>3、存在递归终止条件</p><h3 id="递归优缺点"><a href="#递归优缺点" class="headerlink" title="递归优缺点"></a>递归优缺点</h3><p><strong>优点</strong>：代码表达能力强，简介</br><br><strong>缺点</strong>：<br>1、空间复杂度高</br><br>2、堆栈溢出风险，可记录堆栈深度，达到一定时抛出异常</br><br>3、存在重复计算，利用散列表揭露某个字问题的解</br><br>4、过多的函数计算会耗时较多</p><h3 id="如何写递归代码"><a href="#如何写递归代码" class="headerlink" title="如何写递归代码"></a>如何写递归代码</h3><p>写出递推公式，找出终止条件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; class=&quot;headerlink&quot; title=&quot;递归&quot;&gt;&lt;/a&gt;递归&lt;/h2&gt;&lt;h3 id=&quot;递归简介&quot;&gt;&lt;a href=&quot;#递归简介&quot; class=&quot;headerlink&quot; title=&quot;递归简介&quot;&gt;&lt;/a&gt;递归简介&lt;/h
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构和算法/数据结构与算法之美/7.排序</title>
    <link href="https://zcy-fover.github.io/2020/02/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/7.%E6%8E%92%E5%BA%8F/"/>
    <id>https://zcy-fover.github.io/2020/02/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/7.%E6%8E%92%E5%BA%8F/</id>
    <published>2020-02-22T07:46:16.878Z</published>
    <updated>2020-02-29T06:12:44.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><table><thead><tr><th>算法</th><th>时间复杂度</th><th>是否基于比较</th></tr></thead><tbody><tr><td>冒泡、插入、选择</td><td>$O(n^2)$</td><td>是</td></tr><tr><td>快排、归并</td><td>$O(nlogn)$</td><td>是</td></tr><tr><td>桶、计数、基数</td><td>$O(n)$</td><td>否</td></tr><tr><td>### 排序算法分析</td><td></td><td></td></tr><tr><td>#### 算法的执行效率</td><td></td><td></td></tr><tr><td>- <strong>最好、最坏、平均情况时间复杂度比较</strong>：根据数据的特点(无序、基本有序等)选择合适的算法<br></td><td></td><td></td></tr><tr><td>- <strong>时间复杂度的系数、常数、低阶</strong>：数据规模很大时一般忽略了这几个量，但是当同一阶的算法比较时也需要把这几个量考虑进来<br></td><td></td><td></td></tr><tr><td>- <strong>比较次数和交换次数</strong>：基于比较的算法有两个操作：比较和移动，在分析效率时也需要考虑。</td><td></td><td></td></tr><tr><td>#### 算法的内存消耗</td><td></td><td></td></tr><tr><td>- 数据量较大时，执行时也需要考虑内存的消耗，<strong>原地排序</strong>特指空间复杂度是 $O(1)$ 的排序算法。</td><td></td><td></td></tr><tr><td>#### 排序算法的稳定性</td><td></td><td></td></tr><tr><td>- <strong>稳定性</strong>：排序队列中存在值相同的元素，经过排序之后想等元素之间原有的先后顺序不变。（这个特点主要实际项目中一组对象的排序时比较重要）</td><td></td><td></td></tr><tr><td>### 冒泡排序</td><td></td><td></td></tr><tr><td>比较相邻的两个元素，并且移动元素让其满足大小关系要求。经过一次冒泡至少有一个元素移动到他应该在的位置。</td><td></td><td></td></tr><tr><td>#### 复杂度分析</td><td></td><td></td></tr><tr><td><strong>稳定性</strong>：冒泡排序中相等的两个元素不做交换时是稳定的排序算法<br></td><td></td><td></td></tr><tr><td><strong>空间复杂度</strong>：只需要常量级的临时空间，空间复杂度为 $O(1)$，是一个原地排序算法<br></td><td></td><td></td></tr><tr><td><strong>时间复杂度</strong>：</td><td></td><td></td></tr><tr><td>- 最好的情况下只需要一次冒泡：时间复杂度为：$O(1)$</td><td></td><td></td></tr><tr><td>- 最坏的情况下是需要 n 次，时间复杂度为：$O(n^2)$</td><td></td><td></td></tr><tr><td>- 平均时间复杂度：$O(n^2)$</td><td></td><td></td></tr><tr><td>#### 有序度</td><td></td><td></td></tr><tr><td>数组中具有有序关系的元素对的个数，比如 <code>[2,4,3,1,5,6]</code> 这组数据的有序度就是 11，分别是 <code>[2,4][2,3][2,5][2,6][4,5][4,6][3,5][3,6][1,5][1,6][5,6]</code>。对于一个倒序数组，比如 <code>[6,5,4,3,2,1]</code>，有序度是 0；对于一个完全有序的数组，比如 <code>[1,2,3,4,5,6]</code>，有序度为 $n<em>(n-1)/2$，完全有序的情况称为满有序度。即有 *</em>逆序度=满有序度-有序度**。<br></td><td></td><td></td></tr><tr><td>排序过程，就是有序度增加，逆序度减少的过程，最后达到满有序度。<br></td><td></td><td></td></tr><tr><td>### 插入排序</td><td></td><td></td></tr><tr><td>通过比较将无序队列中的元素不断的插入到有序队列中。插入时要保证有序队列是一直有序的。</td><td></td><td></td></tr><tr><td>#### 复杂度分析</td><td></td><td></td></tr><tr><td><strong>稳定性</strong>：出现相等的元素可以保持插入到前面元素的后面，即是稳定的。<br></td><td></td><td></td></tr><tr><td><strong>空间复杂度</strong>：插入排序不需要额外的空间，复杂度为 $O(1)$，是原地排序。<br></td><td></td><td></td></tr><tr><td><strong>时间复杂度</strong>：</td><td></td><td></td></tr><tr><td>- 最好的情况下只需要一次冒泡：时间复杂度为：$O(1)$</td><td></td><td></td></tr><tr><td>- 最坏的情况下是需要 n 次，时间复杂度为 $O(n^2)$。</td><td></td><td></td></tr><tr><td>- 平均时间复杂度为 $O(n^2)$</td><td></td><td></td></tr><tr><td>### 选择排序</td><td></td><td></td></tr><tr><td>区分有序和无序队列，每次从无序队列中找出最小元素发到有序队列的末尾。</td><td></td><td></td></tr><tr><td>#### 复杂度分析</td><td></td><td></td></tr><tr><td><strong>稳定性</strong>：不能保证稳定性。例如：5，8，5，2，9第一次找到最小元素 2，与第一个 5 交换位置，那第一个 5 和中间的 5 顺序就变了。<br></td><td></td><td></td></tr><tr><td><strong>空间复杂度</strong>：插入排序不需要额外的空间，复杂度为 $O(1)$，是原地排序。<br></td><td></td><td></td></tr><tr><td><strong>时间复杂度</strong>：</td><td></td><td></td></tr><tr><td>- 最好的情况下只需要一次冒泡：时间复杂度为：$O(1)$</td><td></td><td></td></tr><tr><td>- 最坏的情况下是需要 n 次，时间复杂度为 $O(n^2)$。</td><td></td><td></td></tr><tr><td>- 平均时间复杂度为 $O(n^2)$</td><td></td><td></td></tr></tbody></table><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并排序采用分治思想，将整体划分为小部分，最后归并在一起达到整体有序。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>分治和递归比较相像，分治是一种解决问题的思想，递归是一种编程技巧。归并排序的递归公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 递推公式</span><br><span class="line">merge_sort(p...r) &#x3D; merge(merge_sort(p...q), merge_sort(q + 1, r))</span><br><span class="line">&#x2F;&#x2F; 终止条件，当子数组不可再分解</span><br><span class="line">p &gt;&#x3D; r</span><br></pre></td></tr></table></figure><p>伪代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A 数组，n 数组大小 </span></span><br><span class="line">merge_sort(A, n) &#123;</span><br><span class="line">    merge_sort_c(A, <span class="number">0</span>, n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归函数</span></span><br><span class="line">merge_sort_c(A, p, r) &#123;</span><br><span class="line">    <span class="comment">//终止条件</span></span><br><span class="line">    <span class="keyword">if</span> p &gt;= r then <span class="keyword">return</span></span><br><span class="line">    <span class="comment">//取p-r中间位置q</span></span><br><span class="line">    q = (p + r) / <span class="number">2</span></span><br><span class="line">    merge_sort_c(A, p, q)</span><br><span class="line">    merge_sort_c(A, q + <span class="number">1</span>, r)</span><br><span class="line">    <span class="comment">//将有序数组A[p, q], A[q + 1, r]合并到A[p, r]中</span></span><br><span class="line">    merge(A[p, r], A[p, q], A[q + <span class="number">1</span>, r])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>merge 函数将有序子数组合并，伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">merge(A[p, r], A[p, q], A[q + <span class="number">1</span>, r]) &#123;</span><br><span class="line">    <span class="keyword">var</span> i = p, j = q + <span class="number">1</span>, k = <span class="number">0</span></span><br><span class="line">    <span class="comment">//申请一个和 A[p, r]一样大的数组</span></span><br><span class="line">    <span class="keyword">var</span> temp = <span class="keyword">new</span> Array[<span class="number">0</span>, r - p]</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= q AND j &lt;= r) <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> A[i] &lt; A[j] &#123;</span><br><span class="line">            temp[k++] = A[i++]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[k++] = A[j++]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断哪个子数组中只有剩余元素将其拷贝到temp</span></span><br><span class="line">    <span class="keyword">var</span> start = i, end = q</span><br><span class="line">    <span class="keyword">if</span> j &lt;= r then start = j, end = r</span><br><span class="line">    <span class="comment">//将剩余数组拷贝到临时数组中</span></span><br><span class="line">    <span class="keyword">while</span> start &lt;= end <span class="keyword">do</span> &#123;</span><br><span class="line">        temp[k++] = A[start++]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将临时数组拷贝到 A 数组中</span></span><br><span class="line">    A = temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><h5 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h5><p>归并排序是否稳定主要是最后的 merge 函数，合并的时候如果遇到值相等的元素，保持 A[p, q] 的元素在前即可保证稳定性。</p><h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>归并排序采用了分治的思想，时间复杂度是求解各个子问题的和加上最后归并的时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;将问题 a 分解为 b 和 c，K是最后合并b和c的时间 </span><br><span class="line">T(a) &#x3D; T(b) + T(c) + K</span><br></pre></td></tr></table></figure><p>归并排序的复杂度公示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">T(1) &#x3D; C;</span><br><span class="line"></span><br><span class="line">T(n) &#x3D; 2*T(n&#x2F;2) + n;</span><br><span class="line"></span><br><span class="line">T(n) &#x3D; 2*T(n&#x2F;2) + n</span><br><span class="line">     &#x3D; 2*(2*T(n&#x2F;4) + n&#x2F;2) + n &#x3D; 4*T(n&#x2F;4) + 2*n</span><br><span class="line">     &#x3D; 4*(2*T(n&#x2F;8) + n&#x2F;4) + 2*n &#x3D; 8*T(n&#x2F;8) + 3*n</span><br><span class="line">     &#x3D; 8*(2*T(n&#x2F;16) + n&#x2F;8) + 3*n &#x3D; 16*T(n&#x2F;16) + 4*n</span><br><span class="line">     ......</span><br><span class="line">     &#x3D; 2^k * T(n&#x2F;2^k) + k * n</span><br><span class="line">     ......</span><br></pre></td></tr></table></figure><p>达到终止条件即 $T(n/2^k) = T(1)$ 时，有 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n&#x2F;2^k &#x3D; 1</span><br><span class="line"></span><br><span class="line">k &#x3D; nlog_2n</span><br><span class="line"></span><br><span class="line">T(n) &#x3D; 2^kT(n&#x2F;2^k) + kn &#x3D; 2^kC + kn &#x3D; nC + nlog_2n</span><br></pre></td></tr></table></figure><p>归并排序和原数组的有序程度无关，时间复杂度都是 $nlog_2n$</p><h5 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h5><p>归并排序需要开辟和原数组一样大的空间辅助排序，空间复杂度时 $O(n)$</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序也利用分治思想，对 A[p, r] 进行排序，选择 p-r 之间任意一个数据 pivot 作为分区点，遍历 p-r 的数据，将小于 pivot 的数据移到左边，大于 pivot 的数据放到右边，pivot 的位置为 q，原数组分为 A[p, q-1]、A[q] 和 A[q+1, r]，如此区分直到区间缩小为1，则所有数据都有序。</p><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 递推公式：</span><br><span class="line">quick_sort(p, r) &#x3D; quick_sort(p, q-1) + quick_sort(q+1, r)</span><br><span class="line">&#x2F;&#x2F;终止条件：</span><br><span class="line">p &gt;&#x3D; r</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 快速排序，A是数组，n表示数组的大小</span><br><span class="line">quick_sort(A, n) &#123;</span><br><span class="line">  quick_sort_c(A, 0, n-1)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 快速排序递归函数，p,r为下标</span><br><span class="line">quick_sort_c(A, p, r) &#123;</span><br><span class="line">  if p &gt;&#x3D; r then return</span><br><span class="line">  </span><br><span class="line">  q &#x3D; partition(A, p, r) &#x2F;&#x2F; 获取分区点</span><br><span class="line">  quick_sort_c(A, p, q-1)</span><br><span class="line">  quick_sort_c(A, q+1, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">partition(A, p, r) &#123;</span><br><span class="line">  pivot :&#x3D; A[r]</span><br><span class="line">  i :&#x3D; p</span><br><span class="line">  for j :&#x3D; p to r-1 do &#123;</span><br><span class="line">    if A[j] &lt; pivot &#123;</span><br><span class="line">      swap A[i] with A[j]</span><br><span class="line">      i :&#x3D; i+1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  swap A[i] with A[r]</span><br><span class="line">  return i</span><br></pre></td></tr></table></figure><p>这里分区函数的处理类似于插入排序，将 A[p, r-1] 分为两部分，A[p, i-1] 的元素都小于 pivot，暂叫做已处理区间，每次从未处理区间 A[i, r-1] 取出一个元素和 pivot 比较，如果小于则交换到未处理区间</p><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><h5 id="稳定性-1"><a href="#稳定性-1" class="headerlink" title="稳定性"></a>稳定性</h5><p>由于分区函数存在元素交换，所以快速排序是不稳定的算法</p><h5 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>正常情况下，如果分区合理则快速排序的时间复杂度与归并排序一样是 $O(nlog_2n)$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T(1) &#x3D; C；   n&#x3D;1时，只需要常量级的执行时间，所以表示为C。</span><br><span class="line">T(n) &#x3D; 2*T(n&#x2F;2) + n； n&gt;1</span><br></pre></td></tr></table></figure><p>如果选择的最后一个分区元素是最大的，则分区就不均衡，会退化成 $O(n^2)$</p><h5 id="空间复杂度-1"><a href="#空间复杂度-1" class="headerlink" title="空间复杂度"></a>空间复杂度</h5><p>在排序过程中，分区函数的实现在原数组中，原地处理。空间复杂度是 $O(1)$</p><h4 id="归并排序与快速排序区别"><a href="#归并排序与快速排序区别" class="headerlink" title="归并排序与快速排序区别"></a>归并排序与快速排序区别</h4><ul><li>归并排序：先递归调用然后合并处理。从下往上先处理子问题。</li><li>快速排序：先分区在递归调用，从上往下处理，到最后已经有序。<h4 id="选择分区点"><a href="#选择分区点" class="headerlink" title="选择分区点"></a>选择分区点</h4></li><li>三位取中法：从区间的首、中、尾分别选取三个元素，选取三个元素的中位元素位置作为分区点</li><li>随机法：随机选取元素作为分区点，降低最大元素成为分区点的概率<h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3>先对原有的值域进行划分，将元素区分到每个桶中，然后每个桶各自排序，最后将桶合并。桶排序是针对一些有特征的数据集效果较好。<h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4></li><li>值域划分，通过规则将每个元素映射到对应的桶，确定桶的个数。需要根据数据集的特征来确定映射规则。例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; f(x) 是元素 x 所在桶的编号；length 是原数据集的大小</span><br><span class="line">f(x) &#x3D; (x - min) &#x2F; length</span><br><span class="line">bucketNum &#x3D; (max - min) &#x2F; length + 1</span><br></pre></td></tr></table></figure></li><li>排序算法，每个桶的排序算法可以自定。<h4 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><h5 id="时间复杂度-2"><a href="#时间复杂度-2" class="headerlink" title="时间复杂度"></a>时间复杂度</h5>数据集有 n 个元素，桶的个数为 m，如果是均匀的划分，每个桶内的元素个数为 $k = n/m$。桶内使用快速排序来实现，每个桶的时间复杂度是 $O(klogk)$，m 个桶的时间为 $O(mklogk)$，$k = n/m$ 则有 $O(nlog(n/m))$，当桶的个数接近 n 时，则时间复杂度接近为 $O(n)$。<h5 id="空间复杂度-2"><a href="#空间复杂度-2" class="headerlink" title="空间复杂度"></a>空间复杂度</h5>需要申请 m 个桶空间，整体的空间复杂度是 $O(m + n)$<h5 id="稳定性-2"><a href="#稳定性-2" class="headerlink" title="稳定性"></a>稳定性</h5>桶排序的稳定性与每个桶内所采用的排序算法相关<h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3>通过辅助数组，遍历原集合将每个元素标记在对应的位置，遇到相同的元素则对应的位置计数器自增。<h4 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h4></li><li>计算辅助数组的大小<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">size &#x3D; max + 1</span><br></pre></td></tr></table></figure></li><li>遍历待排序集合，将每个元素出现的次数记录到辅助数组中</li><li>计算每个元素的最终位置，从后往前遍历保证稳定性</li><li>例如，数组 <code>A[2, 4, 5, 3, 4, 1]</code>：</li><li>辅助数组大小为 6，遍历后得到 <code>C[0, 1, 1, 1, 2, 1]</code></li><li>计算小于等于每个元素的个数，可以通过 C 数组得到，即为 <code>C[i - 1] + C[i]</code>，得到 <code>C[0, 1, 2, 3, 5, 6]</code></li><li>临时数组 R 存放排序后的元素，从后往前遍历数组 A，<code>A[5] = 1</code>，对应的小于等于 1 的元素 <code>C[1]</code> 是 1，则元素 1 应该排在 R 的第一个位置即 <code>R[0] = 1</code>，同时 <code>C[1]</code> 的值自减 1；<code>A[4] = 4</code>，小于等于 4 的元素 <code>C[4] = 5</code>，则 <code>A[4]</code> 元素放在 <code>R[4]</code> 的位置。同时 <code>C[4]</code> 自减 1；……循环到数组 A 被遍历完。</li><li>最后得到的 R 数组就是数组 A 排序后的结果。<h4 id="复杂度分析-3"><a href="#复杂度分析-3" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><h5 id="时间复杂度-3"><a href="#时间复杂度-3" class="headerlink" title="时间复杂度"></a>时间复杂度</h5>原数组大小是 N，辅助数组大小是 M，原数组存在多次遍历，但是去掉系数后时间复杂度是 $O(N + M)$<h5 id="空间复杂度-3"><a href="#空间复杂度-3" class="headerlink" title="空间复杂度"></a>空间复杂度</h5>申请了一个辅助排序的数组，空间复杂度是 $O(N + M)$<h5 id="稳定性-3"><a href="#稳定性-3" class="headerlink" title="稳定性"></a>稳定性</h5>如果在确定了元素位置后直接输出，是不稳定的，通过上述事例中的处理则是稳定的<h4 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h4>计数排序适用在范围不大的数据集中，而且要求数据是正整数，对于负数或者小数需要将其处理为整数。<h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3>将元素先按照低位排序，在按照高位排序。元素位数不够的，按照最大元素的位数在不够的元素前面补 0。<h4 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h4></li><li>确定最大元素及其位数</li><li>申请一个基数数组 <code>C[]</code> 用于统计每一位元素出现的次数</li><li>计算元素排序后的位置，这与计数排序中类似，计算小于等于 <code>C[i]</code> 的个数</li><li>申请一个临时数组 <code>R[]</code> 存储排序后的元素<h4 id="复杂度分析-4"><a href="#复杂度分析-4" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><h5 id="时间复杂度-4"><a href="#时间复杂度-4" class="headerlink" title="时间复杂度"></a>时间复杂度</h5>如果最大的元素只有一位，则时间复杂度是 $O(n)$，最大元素的位数为 k，则基数排序的时间复杂度是 $O(k*n)$<h5 id="空间复杂度-4"><a href="#空间复杂度-4" class="headerlink" title="空间复杂度"></a>空间复杂度</h5>空间复杂度是 $O(n + k)$<h5 id="稳定性-4"><a href="#稳定性-4" class="headerlink" title="稳定性"></a>稳定性</h5>与计数排序类似，实现过程中的处理可以保证稳定性</li></ul><div style="text-align:center;margin-top:50px;margin-bottom:50px;">    <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;排序算法&quot;&gt;&lt;a href=&quot;#排序算法&quot; class=&quot;headerlink&quot; title=&quot;排序算法&quot;&gt;&lt;/a&gt;排序算法&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算法&lt;/th&gt;
&lt;th&gt;时间复杂度&lt;/th&gt;
&lt;th&gt;是否基于比较&lt;/th&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据存储/缓存/CsCache设计</title>
    <link href="https://zcy-fover.github.io/2020/02/22/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E7%BC%93%E5%AD%98/CsCache%E8%AE%BE%E8%AE%A1/"/>
    <id>https://zcy-fover.github.io/2020/02/22/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E7%BC%93%E5%AD%98/CsCache%E8%AE%BE%E8%AE%A1/</id>
    <published>2020-02-22T07:40:41.945Z</published>
    <updated>2020-02-22T07:40:41.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CsCache缓存实现"><a href="#CsCache缓存实现" class="headerlink" title="CsCache缓存实现"></a>CsCache缓存实现</h2><h3 id="缓存架构介绍"><a href="#缓存架构介绍" class="headerlink" title="缓存架构介绍"></a>缓存架构介绍</h3><blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/WEB428ba4f09ab7b0b0e322cddf281d927f?method=download&shareKey=b5328a35916b4989be2b2393ca0d6ce8" alt="CsCache缓存分层图" title="">                </div>                <div class="image-caption">CsCache缓存分层图</div>            </figure><ul><li>客户端层：使用者直接通过该层与数据进行交互</li><li>缓存提供层：对缓存管理层的生命周期进行维护，负责缓存管理层的创建、保存、获取和销毁</li><li>缓存管理层：对缓存客户端的生命周期进行维护，负责客户端的创建、保存、获取以及销毁</li><li>缓存存储层：负责以什么样的形式存储数据</li></ul><blockquote><ul><li>基本存储层：以普通的ConcurrentHashMap为存储核心，不淘汰数据</li><li>LRU存储层：以最近最少使用原则进行数据存储和缓存淘汰</li><li>Weak存储层：以弱引用为原则的数据存储和缓存淘汰机制</li></ul></blockquote></blockquote><div style="text-align:center;margin-top:50px;margin-bottom:50px;">    <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CsCache缓存实现&quot;&gt;&lt;a href=&quot;#CsCache缓存实现&quot; class=&quot;headerlink&quot; title=&quot;CsCache缓存实现&quot;&gt;&lt;/a&gt;CsCache缓存实现&lt;/h2&gt;&lt;h3 id=&quot;缓存架构介绍&quot;&gt;&lt;a href=&quot;#缓存架构介绍&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据存储/MySQL/MySQL并发与事务</title>
    <link href="https://zcy-fover.github.io/2020/01/20/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL/MySQL%E5%B9%B6%E5%8F%91%E4%B8%8E%E4%BA%8B%E5%8A%A1/"/>
    <id>https://zcy-fover.github.io/2020/01/20/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL/MySQL%E5%B9%B6%E5%8F%91%E4%B8%8E%E4%BA%8B%E5%8A%A1/</id>
    <published>2020-01-20T08:59:40.000Z</published>
    <updated>2020-03-28T00:30:06.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL并发与事务"><a href="#MySQL并发与事务" class="headerlink" title="MySQL并发与事务"></a>MySQL并发与事务</h2><h3 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h3><p>MySQL 通过锁解决并发问题，一般有两种类型共享锁、排他锁，也叫读锁、写锁。</p><h3 id="锁粒度"><a href="#锁粒度" class="headerlink" title="锁粒度"></a>锁粒度</h3><p>加锁后就会影响系统的性能，需要在锁的性能损耗和数据安全性之间寻求平衡。</p><h4 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h4><p>用户写数据时需要先获得写锁，这会阻碍该表的所有的读写操作，读锁之间互不影响。写锁可以插到锁队列的读锁前面，反之则不行。</p><h4 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h4><p>行级锁可以最大程度的支持并发处理，但这同时增大了锁的开销，MySQL 行级锁是在存储引擎层实现，服务层没有相关设计。</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务的特征：原子性、一致性、隔离性、持久性，即ACID</p><p><strong>原子性</strong>：一个事务被视为一个不可分割的最小工作单元，整个事务必须全部提交或者全部回滚</p><p><strong>一致性</strong>：数据库从一个一致性的状态转换到另一个一致性的状态</p><p><strong>隔离性</strong>：通常情况下，一个事务所做的修改在最终提交前对于其他事务是不可见的</p><p><strong>持久性</strong>：一旦事务提交，其所做的修改就会永久保存到数据库中</p><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p><strong>未提交读(READ UNCOMMITTED)</strong>：事务中的修改即使没有提交对于其他事务也是可见的，事务可以读取未提交的数据，称之为脏读。</p><p><strong>提交读(READ COMMITTED)</strong>：一个事务开始时，只能看见已经提交的事务所做的修改。即一个事务从开始到提交所做的修改对于其他事务是不可见的。也叫不可重复读。</p><p><strong>可重复读(REPEATABLE READ)</strong>：解决了脏读问题，保证了一个事务中多次读取同一个数据结果是一致的，但是无法解决幻读。幻读是指当一个事务在读取某个范围的记录时，另一个事务在这个范围中插入了新的记录，再次读取会产生不同的结果。可重复读是 MySQL 的默认隔离级别。</p><p><strong>可串行化(SERIALIZABLE)</strong>：强制事务串行化，会在读取的每行数据上加锁，避免了幻读。可能会造成大量的锁超时。</p><table><thead><tr><th>隔离级别</th><th>脏读可能性</th><th>不可重复读可能性</th><th>幻读可能性</th><th>加锁读</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>YES</td><td>YES</td><td>YES</td><td>NO</td></tr><tr><td>READ COMMITTED</td><td>NO</td><td>YES</td><td>YES</td><td>NO</td></tr><tr><td>REPEATABLE READ</td><td>NO</td><td>NO</td><td>YES</td><td>NO</td></tr><tr><td>SERIALIZABLE</td><td>NO</td><td>NO</td><td>NO</td><td>YES</td></tr></tbody></table><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>死锁指两个或者多个事务在同一资源上相互占用，并请求对方占用的资源，导致恶性循环。多个事务同时锁定同一资源时，也会产生死锁。</p><p>InnoDB 存储引擎可以检测死锁的循环依赖并立即返回错误，InnoDB 目前处理死锁的方式是将持有最少行级锁(写锁)的事务进行回滚。</p><h3 id="MySQL-中的事务"><a href="#MySQL-中的事务" class="headerlink" title="MySQL 中的事务"></a>MySQL 中的事务</h3><p><strong>自动提交(AUTOCOMMIT)</strong>：MySQL 默认采用自动提交模式，<code>SHOW VARIABLES LIKE &#39;AUTOCOMMIT&#39;</code>使用命令查看，1 或者 <code>ON</code> 表示启用，0 或者 <code>OFF</code> 表示禁用。在执行 DDL 相关命令时会强制执行 COMMIT 提交当前活动的事务。可以通过 <code>SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED</code> 设置事务的隔离级别。</p><p><strong>在事务中混合使用存储引擎</strong>：事务是由下层存储引擎实现的，所以在同一个事务中使用多个存储引擎是不可靠的。如果混合使用了事务性和非事务性的表，在提交事务时不会有什么问题，但是回滚时非事务性表上的变更无法回退。</p><p><strong>隐式锁定和显示锁定</strong>：InnoDB 执行的是两阶段锁定协议，在事务执行过程中随时可以锁定，只有当事务提交或者回滚之后锁才回释放，所有的锁在同一时刻释放，是隐式锁定；InnoDB 支持通过特定语句 <code>LOCK TABLES</code> 进行显示锁定。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MySQL并发与事务&quot;&gt;&lt;a href=&quot;#MySQL并发与事务&quot; class=&quot;headerlink&quot; title=&quot;MySQL并发与事务&quot;&gt;&lt;/a&gt;MySQL并发与事务&lt;/h2&gt;&lt;h3 id=&quot;并发控制&quot;&gt;&lt;a href=&quot;#并发控制&quot; class=&quot;head
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>middle-service/search/elasticsearch/elasticsearch安装</title>
    <link href="https://zcy-fover.github.io/2019/02/17/middle-service/search/elasticsearch/elasticsearch%E5%AE%89%E8%A3%85/"/>
    <id>https://zcy-fover.github.io/2019/02/17/middle-service/search/elasticsearch/elasticsearch%E5%AE%89%E8%A3%85/</id>
    <published>2019-02-17T07:27:41.888Z</published>
    <updated>2020-04-09T14:10:09.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>系统：MACOS</li><li>Java 1.8+</li></ul><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><ul><li>版本历史：1.x -&gt; 2.x -&gt; 5.x -&gt; 6.x</li><li>下载的是 6.5.4</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>​     首先在官网上下载压缩包，下载地址<a href="https://www.elastic.co/downloads/elasticsearch#ga-release" target="_blank" rel="noopener">官网</a>，或者在命令行使用<code>wget</code>命令获取，下载后解压即可。</p><h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><p>​    <code>bin</code>存放相关脚本命令</p><p>​    <code>config</code>启动相关配置文件</p><p>​    <code>lib</code>依赖的第三方库</p><p>​    <code>modules</code>模块目录</p><p>​    <code>plugins</code>第三方插件</p><p>​    <code>logs</code>运行后会默认产生的日志文件夹</p><p>​    <code>data</code>运行后产生的数据文件夹</p><h3 id="单实例安装"><a href="#单实例安装" class="headerlink" title="单实例安装"></a>单实例安装</h3><p>​        打开<code>terminal</code>，目录切换至解压后的 elasticsearch 文件夹的 bin 目录下，输入<code>java -version</code>检查 java 版本是否符合，要求在1.8以上。</p><p>​      键入<code>sh elasticsearch</code>后回车，启动服务，默认端口 9200，在浏览器输入<a href="localhost:9200">localhost:9200</a>出现以下信息，启动成功。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"Bc8O_aI"</span>,</span><br><span class="line">  <span class="attr">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="attr">"cluster_uuid"</span> : <span class="string">"xYAoAJt1QFihcu9U-TRQXg"</span>,</span><br><span class="line">  <span class="attr">"version"</span> : &#123;</span><br><span class="line">    <span class="attr">"number"</span> : <span class="string">"6.5.4"</span>,</span><br><span class="line">    <span class="attr">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"build_type"</span> : <span class="string">"tar"</span>,</span><br><span class="line">    <span class="attr">"build_hash"</span> : <span class="string">"d2ef93d"</span>,</span><br><span class="line">    <span class="attr">"build_date"</span> : <span class="string">"2018-12-17T21:17:40.758843Z"</span>,</span><br><span class="line">    <span class="attr">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"lucene_version"</span> : <span class="string">"7.5.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_wire_compatibility_version"</span> : <span class="string">"5.6.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_index_compatibility_version"</span> : <span class="string">"5.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><ul><li><h4 id="Head插件"><a href="#Head插件" class="headerlink" title="Head插件"></a>Head插件</h4></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;系统：MACOS&lt;/li&gt;
&lt;li&gt;Java 1.8+&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;版本&quot;&gt;&lt;a href=&quot;#版本&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java/Thread/Thread-wait-sleep</title>
    <link href="https://zcy-fover.github.io/2019/01/20/java/Thread/Thread-wait-sleep/"/>
    <id>https://zcy-fover.github.io/2019/01/20/java/Thread/Thread-wait-sleep/</id>
    <published>2019-01-20T06:38:22.702Z</published>
    <updated>2019-01-20T06:38:22.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thread-wait-amp-sleep"><a href="#Thread-wait-amp-sleep" class="headerlink" title="Thread wait &amp; sleep"></a>Thread wait &amp; sleep</h1><h2 id="Thread-wait"><a href="#Thread-wait" class="headerlink" title="Thread wait"></a>Thread wait</h2><p><strong>线程等待（Waiting）</strong> 是线程的状态之一。通过 <code>Thread.wait()</code> 进入等待状态的线程会自动放弃 <strong>对象锁（Monitor）</strong>，然后进入线程等待状态。当其他线程调用 <code>notify()</code> 或 <code>notifyAll()</code> ，等待线程进入<strong>可运行状态（Runnable）</strong>，等待 CPU 调度。<a href="./线程的一生.md">线程的一生</a>介绍了线程状态间切换的过程。</p><p>调用 <code>Object.wait()</code> 前，<strong>必须</strong>已经获取了对象锁，否则将抛出 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalMonitorStateException.html" target="_blank" rel="noopener">IllegalMonitorStateException</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">badUsage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// will throw IllegalMonitorStateException</span></span><br><span class="line">        lock.wait();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goodUsage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            lock.wait();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Thread-sleep"><a href="#Thread-sleep" class="headerlink" title="Thread sleep"></a>Thread sleep</h2><p>处于 sleep 的线程也进入 <strong>等待</strong> 状态。与 <code>Thread.wait()</code> 不同是：线程不会因为 sleep 而放弃对象锁。当然，在任何情况下都可以调用 <code>Thread.sleep()</code> 方法，即使是未获得任何对象锁的前提下。</p><p>处于 sleep 下的线程，可能被其他线程<strong>中断（Interrupt）</strong>，中断响应后将抛出 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/InterruptedException.html" target="_blank" rel="noopener">InterruptedException</a>。<a href="./何时需要线程中断">何时需要线程中断</a>中介绍了更多中断的内容。</p><h2 id="Thread-await"><a href="#Thread-await" class="headerlink" title="Thread await"></a>Thread await</h2><p><code>wait()</code> 方法属于 <code>Object</code> 类，<code>await()</code> 方法属于 <code>Condition</code> 类。</p><p>两者都是需要在获取锁的前提下调用，调用成功后放弃锁。前者获取对象锁，后者获取显式锁（Java 中 <code>Lock</code> 的实现类）。</p><p><code>Object.notify()</code> 随机唤醒一个等待线程，<code>Condition.signal()</code> 唤醒指定的等待线程。这是使用上最大的不同。</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p><a href="./线程的一生.md">线程的一生</a></p><p><a href="./何时需要线程中断">何时需要线程中断</a></p><p><a href="https://www.cnblogs.com/dolphin0520/p/3920385.html" target="_blank" rel="noopener">Java并发编程：线程间协作的两种方式：wait、notify、notifyAll和Condition - 海子</a></p><h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><p><a rel="license noopener" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png" /></a>本作品采用<a rel="license noopener" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p><p align="center">  <img src="assets/support.jpg" width="240px"/><br />感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Thread-wait-amp-sleep&quot;&gt;&lt;a href=&quot;#Thread-wait-amp-sleep&quot; class=&quot;headerlink&quot; title=&quot;Thread wait &amp;amp; sleep&quot;&gt;&lt;/a&gt;Thread wait &amp;amp; sle
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java/Thread/线程的一生</title>
    <link href="https://zcy-fover.github.io/2019/01/20/java/Thread/%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%80%E7%94%9F/"/>
    <id>https://zcy-fover.github.io/2019/01/20/java/Thread/%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%80%E7%94%9F/</id>
    <published>2019-01-20T06:38:22.701Z</published>
    <updated>2019-01-20T06:38:22.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程的一生"><a href="#线程的一生" class="headerlink" title="线程的一生"></a>线程的一生</h1><p>线程是 CPU 调度的基本单位。Java 中线程状态分为 6 种：</p><ul><li>New：创建状态</li><li>Runnable：可运行状态</li><li>Waiting：等待状态</li><li>Timed Waiting：限时等待状态</li><li>Blocking：阻塞状态</li><li>Terminated：结束状态</li></ul><p><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.State.html" target="_blank" rel="noopener">Thread.State</a> 中介绍了各个状态的含义。</p><h2 id="Runable"><a href="#Runable" class="headerlink" title="Runable"></a>Runable</h2><p><strong>创建（new）</strong> 后的线程对象，调用 <code>Thread.start()</code> 方法进入 <strong>可运行（Runnable）</strong> 状态。</p><p><strong>可运行</strong> 线程并没有立即执行，而是分为了两步：ready to run 和 running。因为线程进入可运行状态后仍然需要等待某些资源，最常见的是等待 CPU 调度资源或 IO 资源。</p><p>线程执行结束后，进入了 <strong>结束（Terminated）</strong> 状态。</p><h2 id="Waiting"><a href="#Waiting" class="headerlink" title="Waiting"></a>Waiting</h2><p>线程会以 3 种不同方式进入 <strong>等待（Waiting）</strong> 状态，然后以各自的方式被唤醒。唤醒后的线程并没有直接进入 <strong>可运行</strong> 状态，而是参与了锁竞争。下面详细的介绍了这个过程。</p><blockquote><p>  任何处于等待状态下的线程，均允许响应中断。但是，仍然需要参与锁竞争，获得锁权限后才会抛出 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/InterruptedException.html" target="_blank" rel="noopener">InterruptedException</a>。</p></blockquote><h3 id="Object-wait"><a href="#Object-wait" class="headerlink" title="Object.wait()"></a>Object.wait()</h3><p><code>Object.wait()</code> 调用后，线程需要先放弃对象锁（若事先未获得锁，则抛出 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalMonitorStateException.html" target="_blank" rel="noopener">IllegalMonitorStateException</a>），然后被推进 <strong>线程等待队列（Thread Waiting Set</strong>），等待其他线程的唤醒。</p><p>其他线程调用 <code>Object.notify()</code> 会 <strong>随机</strong> 唤醒等待队列中的一个线程。为了公平性，该线程并没有直接进入可运行状态，而是重新开始了锁竞争，成功获取锁权限后才进入可运行状态。否则，线程会因为竞争锁失败而进入 <strong>阻塞（Blocking）</strong>，一直到获取锁权限。</p><p><code>Object.notifyAll()</code> 会唤醒等待队列中的所有线程，后续过程与 <code>Object.wait()</code> 相同。</p><p>特别注意：</p><ol><li><p>等待线程仍然可以响应中断，但是需要竞争到锁权限后才会抛出 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/InterruptedException.html" target="_blank" rel="noopener">InterruptedException</a></p></li><li><p>等待线程有可能（概率尽管很小）出现 <strong>意外唤醒（Surprise Wakeup）</strong>，因此通常在循环中调用 <code>wait()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object object = <span class="keyword">new</span> Object();</span><br><span class="line">....</span><br><span class="line"><span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">    <span class="keyword">while</span> (condition) &#123;</span><br><span class="line">        object.wait();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Thread-join"><a href="#Thread-join" class="headerlink" title="Thread.join()"></a>Thread.join()</h3><p>Thread.join() 方法是为了等待某一个线程进入 <strong>终止（Terminated）</strong> 状态，当线程执行完毕，等待结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> Thread();</span><br><span class="line">t.start();</span><br><span class="line"><span class="comment">// waiting for t finished.</span></span><br><span class="line">t.join();</span><br></pre></td></tr></table></figure><p><code>Thread.join()</code> 的底层原理是基于 <code>Object.wait()</code> 实现的，通过循环判断线程是否存活来决定是否继续等待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">        wait(delay);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LockSupport-park"><a href="#LockSupport-park" class="headerlink" title="LockSupport.park()"></a>LockSupport.park()</h3><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/LockSupport.html" target="_blank" rel="noopener">LockSupport</a> 是 Java 中用于支持 <strong>线程阻塞原语（Thread Blocking Primitives，又称 PV 原语）</strong> 的基础工具类，位于 java.util.concurrent.locks 包下。<code>Lock</code> 与 <code>Condition</code> 都是基于 LockSupport 实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">Condition cond = lock.newCondition();</span><br></pre></td></tr></table></figure><p>PV 原语用于空闲资源申请和释放，P 操作用于申请一个空闲资源，V 操作用于释放空闲资源，<a href="./操作系统的线程管理.md">操作系统的线程管理</a> 中介绍了 PV 原语的作用和原理。</p><p><code>park</code> 方法等同于 P 操作，<code>unpark</code> 等同于 V 操作。调用 <code>park</code> 方法无法获取空闲资源时，线程会进入等待状态，直到其他线程调用 <code>unpark</code> 方法释放资源。</p><p>特别注意的是，park 方法进入的等待的线程，有可能被意外唤醒（与 Object.wait() 中的意外唤醒相同），为了安全起见，通常都会在循环中调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">    LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Timed-Waiting"><a href="#Timed-Waiting" class="headerlink" title="Timed Waiting"></a>Timed Waiting</h2><p><strong>限时等待（Timed Waiting）</strong> 与 <strong>等待（Waiting）</strong> 状态相似，但是它可以在超时后在没有外界的影响下自我唤醒。</p><p>下面是关于各个限时等待方法的参数对于边界值的处理方式：</p><table><thead><tr><th align="center"></th><th align="center">等于 0</th><th align="center">小于 0</th></tr></thead><tbody><tr><td align="center">Thread.sleep(millis)</td><td align="center">立即唤醒</td><td align="center"><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html" target="_blank" rel="noopener">IllegalArgumentException</a></td></tr><tr><td align="center">Thread.join(millis)</td><td align="center">与 <code>jion()</code> 相同</td><td align="center"><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html" target="_blank" rel="noopener">IllegalArgumentException</a></td></tr><tr><td align="center">Object.wait(timeout)</td><td align="center">与 wait() 相同</td><td align="center"><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html" target="_blank" rel="noopener">IllegalArgumentException</a></td></tr><tr><td align="center">LockSupport.parkNanos</td><td align="center">无任何操作，直接返回</td><td align="center">无任何操作，直接返回</td></tr><tr><td align="center">LockSupport.parkUtil</td><td align="center">无任何操作，直接返回</td><td align="center">无任何操作，直接返回</td></tr></tbody></table><p>注：使用 LockSupport.parkNanos 和 LockSupport.parkUtil 时 <strong>必须</strong> 保证等待参数大于 0，否则方法无效。</p><h2 id="Terminated"><a href="#Terminated" class="headerlink" title="Terminated"></a>Terminated</h2><p>执行完任务的线程，会进入 <strong>结束（Terminated）</strong> 状态。</p><p>以下是 Java 线程状态变化流程图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="assets/线程的生命周期.jpg" alt="thread_lifecycle" title="">                </div>                <div class="image-caption">thread_lifecycle</div>            </figure><h2 id="Tick-Tick"><a href="#Tick-Tick" class="headerlink" title="Tick, Tick"></a>Tick, Tick</h2><p>线程状态是 Java 多线程“游戏”中的基本规则。本篇重点讲解的线程等待与唤醒，恰恰是这场游戏中最复杂、最关键的一环。Java 中诸多熟知的多线程工具，例如：可重入锁、Condition、Thread.join 等都是基于线程等待实现的。</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p><a href="./操作系统的线程管理.md">操作系统的线程管理</a></p><p><a href="https://www.baeldung.com/java-thread-lifecycle" target="_blank" rel="noopener">Life Cycle of a Thread in Java | Baeldung</a></p><h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><p><a rel="license noopener" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png" /></a>本作品采用<a rel="license noopener" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p><p align="center">  <img src="assets/support.jpg" width="240px"/><br />感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线程的一生&quot;&gt;&lt;a href=&quot;#线程的一生&quot; class=&quot;headerlink&quot; title=&quot;线程的一生&quot;&gt;&lt;/a&gt;线程的一生&lt;/h1&gt;&lt;p&gt;线程是 CPU 调度的基本单位。Java 中线程状态分为 6 种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New：创建状态&lt;/l
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java/jvm/Java的引用与回收</title>
    <link href="https://zcy-fover.github.io/2019/01/20/java/jvm/Java%E7%9A%84%E5%BC%95%E7%94%A8%E4%B8%8E%E5%9B%9E%E6%94%B6/"/>
    <id>https://zcy-fover.github.io/2019/01/20/java/jvm/Java%E7%9A%84%E5%BC%95%E7%94%A8%E4%B8%8E%E5%9B%9E%E6%94%B6/</id>
    <published>2019-01-20T06:38:22.701Z</published>
    <updated>2019-01-20T06:38:22.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-的引用与回收"><a href="#Java-的引用与回收" class="headerlink" title="Java 的引用与回收"></a>Java 的引用与回收</h1><p>Java 中引用类型中主要包含了：强引用、软引用、弱引用、虚引用（本篇不涉及）。</p><p>强引用：通过 <code>new</code> 创建的引用，被强引用指向的对象，<strong>不会被 gc 回收</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object ref = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><p>软引用：通过 <code>SoftReference</code> 包裹的引用，<strong>内存不足</strong>时，如果没有强引用指向它则被 gc 回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SoftReference weakRef = <span class="keyword">new</span> SoftReference(<span class="keyword">new</span> Object);</span><br></pre></td></tr></table></figure><p>弱引用：通过 <code>WeakReference</code> 包裹的引用，<strong>下一次 gc</strong> 时，如果没有强引用指向它则被 gc 回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WeakReference weakRef = <span class="keyword">new</span> WeakReference(<span class="keyword">new</span> Object);</span><br></pre></td></tr></table></figure><h2 id="软引用-amp-弱引用的使用"><a href="#软引用-amp-弱引用的使用" class="headerlink" title="软引用 &amp; 弱引用的使用"></a>软引用 &amp; 弱引用的使用</h2><p>软引用一般用于<strong>可伸缩式缓存</strong>，即缓存本身的大小不固定，可随着存储空间的增加而增加。因为软引用只有在<strong>内存不足时，才会被 gc 回收</strong>。</p><p>基于弱引用的回收特性，最常见的一种用法是 <code>WeakHashMap</code>。弱引用还可以解决 <a href="https://en.wikipedia.org/wiki/Lapsed_listener_problem" target="_blank" rel="noopener">Lapsed listener problem</a>。</p><p>当出现“内存坏账”的时候，它可以解决“坏账”对象的回收问题。例如，使用 <code>ThreadLocal</code> 容器时，可以将 <code>WeakReference</code> 作为元素，这样可以不用考虑被引用对象的回收问题。</p><h3 id="何时被回收"><a href="#何时被回收" class="headerlink" title="何时被回收"></a>何时被回收</h3><p>当使用软引用或弱引用的时候，要明白创建了 2 个对象：<strong>引用对象（Reference）</strong>和<strong>被引用对象（Referent）</strong>。被引用对象根据约定会被 gc 回收。但是由于引用对象是强引用，不会被 gc 自动回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ref1 and object A</span></span><br><span class="line">Reference ref1 = <span class="keyword">new</span> WeakReference(<span class="keyword">new</span> Object());</span><br><span class="line"><span class="comment">// ref2 and object B</span></span><br><span class="line">Reference ref2 = <span class="keyword">new</span> SoftReference(<span class="keyword">new</span> Object());</span><br><span class="line"></span><br><span class="line"><span class="comment">// release refs by handle</span></span><br><span class="line"><span class="keyword">if</span> (ref1.get() == <span class="keyword">null</span>) ref1 = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (ref2.get() == <span class="keyword">null</span>) ref2 = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>其中，gc 会在约定下回收 <code>A</code>、<code>B</code> 两个对象，<code>ref1</code> 和 <code>ref2</code> 不会被 gc 回收。</p><p>如果不希望被引用对象 <code>A</code> 被 gc 回收，需要使用强引用 <code>N</code> 重新指向对象，让对象 <code>A</code> 处于<strong>可达</strong>状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ref1 and object A</span></span><br><span class="line">Reference ref1 = <span class="keyword">new</span> WeakReference(<span class="keyword">new</span> Object());</span><br><span class="line">Object N = ref1.get();</span><br></pre></td></tr></table></figure><blockquote><p> <strong>可达性</strong>是 JVM 在内存回收时，判断对象是否可以被回收的标准，更多关于内存回收的内容在 <a href="./JVM内存回收.md">JVM 内存回收</a></p></blockquote><h3 id="ReferenceQueue"><a href="#ReferenceQueue" class="headerlink" title="ReferenceQueue"></a>ReferenceQueue</h3><p><strong>引用队列（ReferenceQueue）</strong> 可以和 Reference 配合使用。当 gc 会收了 Referent 后，会将 Reference 放入队列中，以此通知用户 Referent 已经被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ReferenceQueue&lt;Object&gt; refQueue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line">WeakReference&lt;Object&gt; ref = <span class="keyword">new</span> WeakReference&lt;&gt;(<span class="keyword">new</span> Object(), refQueue);</span><br><span class="line">System.out.println(ref + <span class="string">" - "</span> + ref.get());  <span class="comment">// java.lang.ref.WeakReference@198e2867 - java.lang.Object@12f40c25</span></span><br><span class="line">System.gc();</span><br><span class="line">System.out.println(refQueue.remove()); <span class="comment">// java.lang.ref.WeakReference@198e2867</span></span><br></pre></td></tr></table></figure><h2 id="Tick-Tick"><a href="#Tick-Tick" class="headerlink" title="Tick, Tick"></a>Tick, Tick</h2><p>本篇重点讲解引用的回收：gc 回收的是 Referent，而不是 Reference。用于提醒读者，在后续的开发中，不要因使用了 Reference 却没有手动的清理 Reference 对象而出现内存泄漏。</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p><a href="./JVM内存回收.md">JVM 内存回收</a></p><p><a href="https://www.baeldung.com/java-weak-reference" target="_blank" rel="noopener">Weak References in Java | Baeldung</a></p><p><a href="https://www.baeldung.com/java-soft-references" target="_blank" rel="noopener">Soft References in Java | Baeldung</a></p><p><a href="https://en.wikipedia.org/wiki/Lapsed_listener_problem" target="_blank" rel="noopener">Lapsed listener problem | Wikipedia</a></p><h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><p><a rel="license noopener" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png" /></a>本作品采用<a rel="license noopener" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p><p align="center">  <img src="assets/support.jpg" width="240px"/><br />感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-的引用与回收&quot;&gt;&lt;a href=&quot;#Java-的引用与回收&quot; class=&quot;headerlink&quot; title=&quot;Java 的引用与回收&quot;&gt;&lt;/a&gt;Java 的引用与回收&lt;/h1&gt;&lt;p&gt;Java 中引用类型中主要包含了：强引用、软引用、弱引用、虚引用（本
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>net-work/okhttp/OkHttpClient3架构简介</title>
    <link href="https://zcy-fover.github.io/2019/01/20/net-work/okhttp/OkHttpClient3%E6%9E%B6%E6%9E%84%E7%AE%80%E4%BB%8B/"/>
    <id>https://zcy-fover.github.io/2019/01/20/net-work/okhttp/OkHttpClient3%E6%9E%B6%E6%9E%84%E7%AE%80%E4%BB%8B/</id>
    <published>2019-01-20T06:38:22.700Z</published>
    <updated>2019-01-20T06:38:22.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OkHttpClient3-架构简介"><a href="#OkHttpClient3-架构简介" class="headerlink" title="OkHttpClient3 架构简介"></a>OkHttpClient3 架构简介</h1><p>OkHttp 旨在提供简单、稳定、高效的 HTTP Client 服务，并且支持 HTTP 2.0 以及 WebSocket。</p><h2 id="总体架构分-6-层"><a href="#总体架构分-6-层" class="headerlink" title="总体架构分 6 层"></a>总体架构分 6 层</h2><p>Protocols Layer 涵盖了 OkHttp 支持的所有“功能”，实现了复杂的协议通讯和 TSL 握手与验证。</p><p>Connection Layer 为“稳定、高效”而努力。除了单纯的实现了链路通讯，还实现了连接池（ConnectionPool）、链路复用（StreamAllocation）、失败链路黑名单（RouteDatabase）。</p><p>Cache Layer 用于缓存 Response，提高请求效率。</p><p>IO Layer 是基于 okio 的 IO 层，属于基础模块。</p><p>Interface Layer 是面向用户的接口层，目标是为用户提供简单的 API。OkHttp 将所有的需要暴露给用户的接口全部集中在了 <code>OkHttpClient</code>，方便用户的使用。<code>OkHttpClient</code> 类是<strong>外观模式</strong>的一个优秀案例。</p><p>Interceptor Layer 是其他 5 层的纽带，贯穿了整体的请求与响应流程。将这一复杂流程巧妙的划分为 5 部分，然后用拦截器分别实现各个子流程。同时，暴露给用户，方便用户接入自己的拦截器。</p><p>下图简单展示了请求与响应在 Interceptor 中的过程。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="assets/okhttp%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94.jpg" alt="OkHttp请求与响应流程图" title="">                </div>                <div class="image-caption">OkHttp请求与响应流程图</div>            </figure><h2 id="拦截器简介（选读）"><a href="#拦截器简介（选读）" class="headerlink" title="拦截器简介（选读）"></a>拦截器简介（选读）</h2><ul><li>RetryAndFllowupInterceptor：创建 Stream、失败重试和重定向</li><li>BridgeInterceptor：从网络模型来看，它是传输层和应用层的桥梁，负责将用户的 Request 转换成网络可以理解的 Request；将来自网络的 Response 转换成易于用户使用的 Response</li><li>CacheInterceptor：缓存获取与插入</li><li>ConnectInterceptor：开启一个连接，即从 Stream 中获取一个 RealConnection</li><li>CallServerInterceptor：最后一个拦截器，用于向服务器发起原始的请求，并接收原始的响应</li></ul><h2 id="系统架构图"><a href="#系统架构图" class="headerlink" title="系统架构图"></a>系统架构图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="assets/okhttp系统架构图.jpg" alt="OkHttp系统架构图" title="">                </div>                <div class="image-caption">OkHttp系统架构图</div>            </figure><h2 id="Tick-Tick"><a href="#Tick-Tick" class="headerlink" title="Tick, Tick"></a>Tick, Tick</h2><p>学习的过程应当尽可能的从宏观到微观。把握整体的脉络，走进了迷宫里才能方寸不乱，有张有弛。本篇从俯视的角度去了解 OkHttp。从<strong>它到底想解决什么问题</strong>开始，到它的整体设计如何围绕这些核心命题而展开。</p><p>“宏观到微观，问题驱动”，笔者的心得。欢迎大家一起分享自己的学习技巧，互相学习。</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p><a href="./OkHttpClient3连接池模型.md">OkHttpClient3 连接池模型</a></p><h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><p><a rel="license noopener" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png" /></a>本作品采用<a rel="license noopener" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p><p align="center">  <img src="assets/support.jpg" width="240px"/><br />感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OkHttpClient3-架构简介&quot;&gt;&lt;a href=&quot;#OkHttpClient3-架构简介&quot; class=&quot;headerlink&quot; title=&quot;OkHttpClient3 架构简介&quot;&gt;&lt;/a&gt;OkHttpClient3 架构简介&lt;/h1&gt;&lt;p&gt;OkHttp
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>os/操作系统的线程管理</title>
    <link href="https://zcy-fover.github.io/2019/01/20/os/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>https://zcy-fover.github.io/2019/01/20/os/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/</id>
    <published>2019-01-20T06:38:22.699Z</published>
    <updated>2019-01-20T06:38:22.699Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系统的线程管理"><a href="#操作系统的线程管理" class="headerlink" title="操作系统的线程管理"></a>操作系统的线程管理</h1><blockquote><p> 蛮荒之地，笔者正在火速开垦……</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;操作系统的线程管理&quot;&gt;&lt;a href=&quot;#操作系统的线程管理&quot; class=&quot;headerlink&quot; title=&quot;操作系统的线程管理&quot;&gt;&lt;/a&gt;操作系统的线程管理&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 蛮荒之地，笔者正在火速开垦……&lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java/Thread/何时需要线程中断</title>
    <link href="https://zcy-fover.github.io/2019/01/05/java/Thread/%E4%BD%95%E6%97%B6%E9%9C%80%E8%A6%81%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD/"/>
    <id>https://zcy-fover.github.io/2019/01/05/java/Thread/%E4%BD%95%E6%97%B6%E9%9C%80%E8%A6%81%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD/</id>
    <published>2019-01-05T07:47:47.139Z</published>
    <updated>2019-01-05T07:47:47.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="何时需要线程中断"><a href="#何时需要线程中断" class="headerlink" title="何时需要线程中断"></a>何时需要线程中断</h1><blockquote><p>  蛮荒之地，笔者正在火速开垦……</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;何时需要线程中断&quot;&gt;&lt;a href=&quot;#何时需要线程中断&quot; class=&quot;headerlink&quot; title=&quot;何时需要线程中断&quot;&gt;&lt;/a&gt;何时需要线程中断&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  蛮荒之地，笔者正在火速开垦……&lt;/p&gt;
&lt;/blockquot
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>net-work/okhttp/OkHttpClient3连接池模型</title>
    <link href="https://zcy-fover.github.io/2019/01/05/net-work/okhttp/OkHttpClient3%E8%BF%9E%E6%8E%A5%E6%B1%A0%E6%A8%A1%E5%9E%8B/"/>
    <id>https://zcy-fover.github.io/2019/01/05/net-work/okhttp/OkHttpClient3%E8%BF%9E%E6%8E%A5%E6%B1%A0%E6%A8%A1%E5%9E%8B/</id>
    <published>2019-01-05T07:47:47.136Z</published>
    <updated>2019-01-05T07:47:47.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OkHttpClient3-连接池模型"><a href="#OkHttpClient3-连接池模型" class="headerlink" title="OkHttpClient3 连接池模型"></a>OkHttpClient3 连接池模型</h1><p>OkHttp 的连接池与 JDBC 连接池有所不同。JDBC 的连接池往往面向<strong>单一目标</strong>服务器，而 OkHttp 中，多数情况下 HTTP 请求需要面向多台不同的服务器，因此 OkHttp 的连接池需要面向<strong>多目标</strong>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="assets/jdbc_ok_connections.jpg" alt="客户端与服务器关系图" title="">                </div>                <div class="image-caption">客户端与服务器关系图</div>            </figure><h2 id="获取连接"><a href="#获取连接" class="headerlink" title="获取连接"></a>获取连接</h2><p><code>StreamAllocation#findConnections()</code>方法用于获取一个<strong>连接（RealConnection，本文简称 cnn）</strong>，cnn 可能来自线程池，创建新连接。</p><h3 id="HTTP-2-连接复用"><a href="#HTTP-2-连接复用" class="headerlink" title="HTTP 2 连接复用"></a>HTTP 2 连接复用</h3><blockquote><p>OkHttp 的连接复用与连接的创建和回收过程关联紧密，并且还涉及到了一个大角色——<code>StreamAllocation</code></p></blockquote><p>HTTP 2.0 中，一个连接可以同时发送多个请求。所以 OkHttp 需要解决：如何让一个连接被多个线程使用，同时要确保线程安全，以及准确及时的回收<strong>空闲连接</strong>。</p><p>cnn 的复用是通过 <code>StreamAllocation</code> 实现的。<code>StreamAllocation</code> 可以看作是 cnn 的一个“分身”，一个 cnn 拥有众多的 <code>StreamAllocation</code>。用户使用连接的时，会获取 <code>StreamAllocation</code>，从而获取它背后真正的 cnn与服务器通讯。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="assets/streams_and_cnn.jpg" alt="StreamAllocation和Connection关系图" title="">                </div>                <div class="image-caption">StreamAllocation和Connection关系图</div>            </figure><p>下面从 Java 层面展示了两者的关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* RealConnection class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RealConnection</span> <span class="keyword">extends</span> <span class="title">Http2Connection</span>.<span class="title">Listener</span> <span class="keyword">implements</span> <span class="title">Connection</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Current streams carried by this connection. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> List&lt;Reference&lt;StreamAllocation&gt;&gt; allocations = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* StreamAllocation class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamAllocation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RealConnection connection;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个 cnn 拥有一组 <code>StreamAllocation</code> 软连接集合， <code>StreamAllocation</code> 持有唯一一个 cnn。当<strong>用户</strong>获取一个连接时，会向特定的一个 <code>StreamAllocation</code> 发出申请，然后返回一个真正当连接。多个线程间可能会从不同的 <code>StreamAllocation</code> 获取同一个 cnn。一个线程持有一个<strong>唯一</strong>  <code>StreamAllocation</code>。</p><blockquote><p> 这里的用户是广义的，泛指连接的需求方，通常是一个线程。而并非真实的一个用户。</p></blockquote><h2 id="连接销毁"><a href="#连接销毁" class="headerlink" title="连接销毁"></a>连接销毁</h2><blockquote><p>我们采用“倒叙”的方式铺开连接池的管理，从销毁讲起，后面还包括：连接的获取、连接的创建和线程安全保障</p></blockquote><p>cnn 维护在 <code>ConnectionPool#connections</code> 中，数据结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;RealConnection&gt; connections = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成这个清理工作的，是一个线程，它的处理方式很简单：</p><ol><li><p>connection pool 中没有任何<strong>空闲连接</strong>时，线程关闭</p></li><li><p>connection pool 中没有<strong>待清理</strong>的连接时，线程等待（waiting，默认等待 5 min）</p></li><li><p>connection pool 中存在<strong>需要清理</strong>的连接时，执行清理任务</p></li><li><p>当有新的 cnn 加入到 connection pool 时，清理线程开启。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(RealConnection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> (Thread.holdsLock(<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">if</span> (!cleanupRunning) &#123;</span><br><span class="line">            cleanupRunning = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">// start the cleanup thread</span></span><br><span class="line">            executor.execute(cleanupRunnable);</span><br><span class="line">        &#125;</span><br><span class="line">        connections.add(connection);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>连接池清理工作包括：<strong>寻找无效连接</strong>和<strong>销毁无效连接</strong>，空闲连接的判断是第一步的核心。</p><p>cnn 维护了一个 <code>StreamAllocation</code> <strong>软连接集合</strong>用于对连接的使用情况进行追踪与计数。当没有任何线程使用 cnn 时，无法从集合中获取<strong>未被回收</strong>的 <code>StreamAllocation</code> 对象 。通过这样当方式，我们可以轻松的判断：”当前连接是否是处于空闲状态？“。</p><p>OkHttp 是允许部分空闲连接的存在的，只有<strong>超过最大空闲连接数量（maxIdleConnections）</strong>或者<strong>空闲时间过长的连接（keepAliveDurationNs）</strong>，才被定义为“无效连接“，然后被清理线程销毁。</p><p>如同我们猜想的一样，<strong>销毁</strong>的最后一步，一定是将 cnn 从 <code>connections</code> 移除，并关闭 socket。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">cleanup</span><span class="params">(<span class="keyword">long</span> now)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (longestIdleDurationNs &gt;= <span class="keyword">this</span>.keepAliveDurationNs</span><br><span class="line">        || idleConnectionCount &gt; <span class="keyword">this</span>.maxIdleConnections) &#123;</span><br><span class="line">            <span class="comment">// 1. remove cnn from connections</span></span><br><span class="line">            connections.remove(longestIdleConnection);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 2. close socket</span></span><br><span class="line">        <span class="comment">// Close, ignoring any uncheck exceptions. Does nothing if socket is null.</span></span><br><span class="line">        closeQuietly(longestIdleConnection.socket());</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结束了上面过程，简单梳理一下。清理连接的整体思路是：通过 <code>cleanupRunnable</code> 线程来执行清理任务，通过线程等待的方式不断的执行。<code>StreamAllocation</code> 软连接集合的引入，追踪了连接的被使用情况，解决了“空闲连接”定义的问题。该思路与 gc 回收算法中的“引用计数”算法大致相同。清理线程将无效的连接销毁，完成清理任务。</p><h2 id="获取连接-amp-创建连接"><a href="#获取连接-amp-创建连接" class="headerlink" title="获取连接 &amp; 创建连接"></a>获取连接 &amp; 创建连接</h2><p>获取连接的过程包含了连接的创建。获取连接最初是由 <code>ConnectInterceptor</code> 拦截器发起的。拦截器模式是 OkHttp 整体流程的主干，贯穿了整体请求与响应流程，<a href="./OkHttpClient3架构简介.md">OkHttpClient3 架构简介</a> 包含了 OkHttp 拦截器在整体架构中的地位与应用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ConnectInterceptor class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// get a new stream</span></span><br><span class="line">        HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* StreamAllocation class */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> HttpCodec <span class="title">newStream</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// find a connection</span></span><br><span class="line">          RealConnection resultConnection = findHealthyConnection(connectTimeout, readTimeout,</span><br><span class="line">  ...</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RouteException(e);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>OkHttp 优先尝试从 <code>ConnectionPool</code> 中获取连接，获取成功后计数加 1；如果获取失败，会创建一个新的连接，并将新连接加入到 connections 中，计数加 1。</p><p>计数过程是把 <code>StreamAllocation</code> 对象加入到 cnn 的“影子”集合中，<code>StreamAllocation#acquire()</code> 完成了这项工作。</p><h3 id="获取连接-1"><a href="#获取连接-1" class="headerlink" title="获取连接"></a>获取连接</h3><p>获取 cnn 就是遍历 connections ，找到一个“合适”的连接返回。OkHttp 要求 HTTP 1.x 中，一个 cnn 最多拥有 1 个 Stream，HTTP 2.0 中可以拥有多个（默认为 Integer.MAX_VALUE）。合适连接要求如下：</p><ol><li>steam 没有达到创建的上限</li><li>host 相同</li></ol><p>计数加 1，并将合适的 cnn 成功返回给用户，完成 HTTP 请求。</p><blockquote><p>这里合适连接的要求，仅停留在 HTTP 1.x，HTTP 2.0 获取连接做了一些<strong>协议上</strong>的处理，不是本篇重点，这里不详述。</p></blockquote><h3 id="创建连接"><a href="#创建连接" class="headerlink" title="创建连接"></a>创建连接</h3><p>当从 <code>ConnectionPool</code> 获取连接失败后，会选择创建新的连接。并将新的连接加入到 <code>connections</code> 中，计数加 1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamAllocation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> RealConnection <span class="title">findConnection</span><span class="params">(...)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        RealConnection result = <span class="keyword">null</span>;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// create new RealConnection</span></span><br><span class="line">        result = <span class="keyword">new</span> RealConnection(connectionPool, selectedRoute);</span><br><span class="line">        <span class="comment">// add stream to connection allocations</span></span><br><span class="line">        acquire(result, <span class="keyword">false</span>);</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// Pool the connection.</span></span><br><span class="line">        Internal.instance.put(connectionPool, result);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>连接的获取与创建过程，通过创建对象，并将新创建的对象加入到连接池中，计数加 1。本质上来看是连接池的连接容器（<code>Deque&lt;RealConnection&gt;</code>）的 <code>add()</code> 和计数器计数。</p><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><blockquote><p>本节所介绍的线程安全仅仅是有关连接池的线程安全。更多线程模型介绍在 <a href="./OkHttpClient3线程模型.md">OkHttpClient3 线程模型</a>。</p></blockquote><p>线程安全的核心是解决 <strong>共享资源在竞争条件下的状态不确定</strong> 问题。解决过程中的关键一步在于：找出可能处于竞争条件的共享变量。</p><p>其中，被 <code>final</code> 修饰的基础变量、<code>Unmofied</code> 容器、无访问通路的私有变量和局部变量，任何情况下都处于非竞争条件。更多关于线程的介绍在 <a href="./操作系统的线程管理.md">操作系统的线程管理</a>。</p><blockquote><p> <strong>竞争条件（Race Condition， 又称竞太条件）</strong>：多个进程读写共享资源，最终的结果取决于进程运行的一个精确的时序，这样的情形称之为<strong>竞争条件</strong>，例如：缓冲区的并发访问问题。</p></blockquote><h3 id="Connection-Pool-的共享变量"><a href="#Connection-Pool-的共享变量" class="headerlink" title="Connection Pool 的共享变量"></a>Connection Pool 的共享变量</h3><p><code>ConnectionPool</code> 作为 <code>OkHttpClient</code> 的一个 <code>final</code> 成员，随着 <code>OkHttpClient</code> 的创建而创建。一个 <code>OkHttpClient</code> 持有唯一一个 <code>ConnectionPool</code>，即 <code>ConnectionPool</code> 相对于 <code>OkHttpClient</code> 是单例模式。</p><p>OkHttp 的连接池类中，成员信息如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor executor = <span class="keyword">new</span> ThreadPoolExecutor(...);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxIdleConnections;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> keepAliveDurationNs;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Runnable cleanupRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;RealConnection&gt; connections = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    <span class="keyword">final</span> RouteDatabase routeDatabase = <span class="keyword">new</span> RouteDatabase();</span><br><span class="line">    <span class="keyword">boolean</span> cleanupRunning;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，共享变量有三个：</p><ul><li><code>connections</code>：缓存连接，在线程<strong>创建</strong>、<strong>获取</strong>、<strong>销毁</strong>时使用</li><li><code>routeDatabase</code>：缓存失败的链路，监视器类</li><li><code>cleanupRunning</code>：清理线程开启的标志</li></ul><h3 id="Connctons"><a href="#Connctons" class="headerlink" title="Connctons"></a>Connctons</h3><p>OkHttp 在任何地方都使用了对象锁来保证访问 connections 的正确性，由于 <code>ConnetionPool</code> 对于 <code>OkHttpClient</code> 而言是单例，对象锁可以解决并发冲突。</p><h3 id="RouteDataBase"><a href="#RouteDataBase" class="headerlink" title="RouteDataBase"></a>RouteDataBase</h3><p>一个 HTTP URL 根据 DNS 解析的结果往往会存在多条 HTTP <strong>链路（Route）</strong>，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.1.1.1 www.abc.com</span><br><span class="line">1.1.1.2 www.abc.com</span><br></pre></td></tr></table></figure><p>OkHttp 维护来一个失败链路的黑明单，用于记录和规避连接失败的场景，提升连接的成功率。为了保证并发安全，OkHttp 采用了<strong>监视器模式</strong>实现该类。</p><h3 id="cleanupRunning"><a href="#cleanupRunning" class="headerlink" title="cleanupRunning"></a>cleanupRunning</h3><p>cleanupRuning 变量只在 <code>put()</code> 和 <code>cleanup()</code> 方法中用到，这两方法均使用了对象锁来保证。</p><h2 id="Tick-Tick"><a href="#Tick-Tick" class="headerlink" title="Tick, Tick"></a>Tick, Tick</h2><p>本篇文档偏重于讲解 OkHttp 线程模型的“骨骼”，其中的细节没有过多的涉及。目的是了解连接池的核心——<strong>安全高效的获取连接和回收连接</strong>，这是最有“营养”的部分。关于 HTTP 的协议、代理、路由等，没有停留太久，这些不是本篇的重点。更多的介绍在 <a href="HTTP2.0的价值在哪里.md">HTTP 2.0 的价值在哪里</a>。</p><p>照猫画虎，笔者仿照 OkHttp3 连接池模型写了一个 <a href="./samples/okhttp/connection-pool/">Demo</a>，欢迎各位大牛探讨与斧正。</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p><a href="./Thread-wait-sleep.md">Thread wait &amp; sleep</a></p><p><a href="./OkHttpClient3架构简介">OkHttpClient3 架构简介</a></p><p><a href="./Java的引用与回收.md">Java 的引用与回收</a></p><p><a href="./OkHttpClient3线程模型.md">OkHttpClient3 线程模型</a></p><p><a href="./操作系统的线程管理.md">操作系统的线程管理</a></p><p><a href="HTTP2.0的价值在哪里.md">HTTP 2.0 的价值在哪里</a></p><h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><p><a rel="license noopener" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png" /></a>本作品采用<a rel="license noopener" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p><p align="center">  <img src="assets/support.jpg" width="240px"/><br />感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OkHttpClient3-连接池模型&quot;&gt;&lt;a href=&quot;#OkHttpClient3-连接池模型&quot; class=&quot;headerlink&quot; title=&quot;OkHttpClient3 连接池模型&quot;&gt;&lt;/a&gt;OkHttpClient3 连接池模型&lt;/h1&gt;&lt;p&gt;Ok
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>net-work/netty/Linux网络IO模型简介</title>
    <link href="https://zcy-fover.github.io/2019/01/05/net-work/netty/Linux%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B/"/>
    <id>https://zcy-fover.github.io/2019/01/05/net-work/netty/Linux%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B/</id>
    <published>2019-01-05T06:54:02.980Z</published>
    <updated>2019-01-05T08:32:24.420Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Linux内核将所有外设看作文件，文件的读写操作会返回一个文件描述符fd（file descriptor）</li><li>socket的响应描述符为socketfd</li><li>描述符就是一个数字指向内核中的一个结构体（文件区域、路径属性等）</li></ul><table><thead><tr><th align="center">阻塞IO模型</th><th align="center">非阻塞IO模型</th><th align="center">IO复用模型</th><th align="center">信号驱动IO模型</th><th align="center">异步IO</th></tr></thead><tbody><tr><td align="center">所有文件操作阻塞执行，执行完一个在执行下一个</td><td align="center">多个文件操作可以一起处理，各自应用进程轮询对应的内核数据</td><td align="center">通过Linux提供的select/poll处理，进程将多个fd传给select或者poll系统调用，阻塞在select，这样select/poll就可以检测是否有fd处于就绪状态。</td><td align="center">当数据准备就绪时，为该进程生成一个SIGIO信号，通知进程来读取数据。</td><td align="center"></td></tr><tr><td align="center">以socket接口为例：进程空间调用recvFrom，其系统调用知道数据包到达且被写到应用进程缓冲区或者发生错误时返回，在此期间一直在等待。进程从开始调用recvFrom开始一直被占用所以叫阻塞模型。</td><td align="center">recvFrom从应用到内核，如果缓冲区没有数据的话，就会返回一个EWOULDBLOCK错误，一般都对非阻塞IO模型进行轮询检查内核是不是有数据到来。</td><td align="center">顺序扫描，支持的fd有限；还提供epoll系统调用，基于事件驱动方式代替顺序扫描，性能更好</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Linux内核将所有外设看作文件，文件的读写操作会返回一个文件描述符fd（file descriptor）&lt;/li&gt;
&lt;li&gt;socket的响应描述符为socketfd&lt;/li&gt;
&lt;li&gt;描述符就是一个数字指向内核中的一个结构体（文件区域、路径属性等）&lt;/li&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据存储/缓存/redis数据结构整理</title>
    <link href="https://zcy-fover.github.io/2019/01/01/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E7%BC%93%E5%AD%98/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/"/>
    <id>https://zcy-fover.github.io/2019/01/01/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E7%BC%93%E5%AD%98/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/</id>
    <published>2019-01-01T13:18:50.746Z</published>
    <updated>2020-02-22T07:37:30.250Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis-数据结构"><a href="#Redis-数据结构" class="headerlink" title="Redis 数据结构"></a>Redis 数据结构</h2><ul><li><p>扁平化的特点，不存在数据库中列表查询一类的操作</p></li><li><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3></li></ul><blockquote><ul><li><h4 id="Value对象的通用数据结构"><a href="#Value对象的通用数据结构" class="headerlink" title="Value对象的通用数据结构"></a>Value对象的通用数据结构</h4></li></ul><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> type:<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> encoding:<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> lru:REDIS_LRU_BITS;</span><br><span class="line">    <span class="keyword">int</span> refcount;</span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line">&#125;robj;</span><br></pre></td></tr></table></figure><ul><li><strong>type</strong>：指String、List等结构化类型</li><li><strong>encoding</strong>：encoding指的是这些接口规划类型具体的实现（承载）方式，同一个类型可以有多个实现方式，例如String可以用int来承载，也可以用封装的cha[]来承载，List可以用ziplist或者链表来承载</li><li><strong>lru</strong>：表示本对象的空转时长，用于有限内存下长久不访问的对象的清理</li><li><strong>refcount</strong>：应用计数用于对象的垃圾回收</li><li><strong>ptr</strong>：指向的是以encoding方式实现这个对象的实际承载者的地址，例如String对象对应的sds地址</li></ul></blockquote><ul><li><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4></li></ul><blockquote><ul><li><p>Redis中的String可以表示字符串、整数、浮点数三种类型，由Redis完成相互间的自动转型</p></li><li><h5 id="基本操作："><a href="#基本操作：" class="headerlink" title="基本操作："></a>基本操作：</h5></li></ul><blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/WEBda5af15f4bd8cfc917bf6764295d3d05?method=download&shareKey=c5e74b3ff893de9a0f9e53fffce19803" alt="Redis-String操作" title="">                </div>                <div class="image-caption">Redis-String操作</div>            </figure></blockquote></blockquote><ul><li><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4></li></ul><blockquote><ul><li><h5 id="基本操作：-1"><a href="#基本操作：-1" class="headerlink" title="基本操作："></a>基本操作：</h5></li></ul><blockquote><ul><li>RPUSH/LPUSH：RPUSH将元素添加在列表尾，L则是将元素添加在列表头部</li><li>RPOP/LPOP：取出给定key的列表的尾部或头部的元素并删除元素</li><li>LINDEX：去除给定的key对应列表索引的某个元素</li><li>LRANGE：取出给定key的索引范围内的元素，例如LRANGE key1 0, 3即取出前四个元素</li><li>LTRIM：将给定key的列表索引范围的元素去除</li><li>BLPOP/BRPOP：BRPOP key1 key2 60，60秒内，key1非空则从key1对应的列表中pop最右元素，否则从key2中pop最右元素；如果60秒内两个列表始终为空，则超时返回</li><li>BLPOPPUSH/BRPOPPUSH：BRPOPPUSH key1 key2 60即60秒内如果key1对应的列表非空，则把key1列表的最右元素pop，并且放到key2最后</li></ul></blockquote></blockquote><ul><li><h4 id="Map："><a href="#Map：" class="headerlink" title="Map："></a>Map：</h4></li></ul><blockquote><ul><li><h5 id="基本操作：-2"><a href="#基本操作：-2" class="headerlink" title="基本操作："></a>基本操作：</h5></li></ul><blockquote><ul><li>HGET：返回给定key， field的值</li><li>HSET：设置给定key，field的值</li><li>HMGET：返回给定key，field1、field2…的值</li><li>HMSET：设置给定key，多个field的值</li><li>HGETALL：获取给定key的所有field和value</li><li>HDEL：删除给定key， field元素</li><li>HKEYS：获取给定的key的所有field名字</li><li>HVALS：获取给定key的所有value</li><li>HLEN：获取给定的key的字段数量</li><li>HINCRBY：HINCRBY key field increment，给定key的field元素value自增整数</li><li>HINCRBYFLOAT：HINCRBYFLOAT key field increment ，给定key的field元素value自增浮点数</li><li>HEXISTS：检查指定key field是否存在</li><li>HSETNX：HSETNX key field value只有当field字段不存在时，设置该元素</li></ul></blockquote></blockquote><ul><li><h4 id="Set："><a href="#Set：" class="headerlink" title="Set："></a>Set：</h4></li></ul><blockquote><ul><li><h5 id="基本操作：-3"><a href="#基本操作：-3" class="headerlink" title="基本操作："></a>基本操作：</h5></li></ul><blockquote><ul><li>SADD/SREM/SISMEMBER：实现向SET中增加、删除元素，以及检查元素是否存在</li><li>SCAD/SMEMBERS/SRANDMEMBER：实现统计元素个数、列出所有元素、随机获取元素的操作</li></ul></blockquote></blockquote><ul><li><h4 id="Sorted-Set："><a href="#Sorted-Set：" class="headerlink" title="Sorted-Set："></a>Sorted-Set：</h4></li></ul><blockquote><ul><li>ZRANK：确定某个KEY值在本sorted-set内按照顺序排在第几位</li><li>ZRANGE：例如ZRANGE key start stop，获取sorted-set中排名为start和stop间的数据</li><li>ZRANGESCOPE：ZRANGEBYSCOPE key min max获取sorted-set中scope介于min和max之间的数据</li><li>ZSCOPE：确定某个key值在本sorted-set内对应的value</li><li>ZINCRBY</li></ul></blockquote></blockquote><div style="text-align:center;margin-top:50px;margin-bottom:50px;">    <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Redis-数据结构&quot;&gt;&lt;a href=&quot;#Redis-数据结构&quot; class=&quot;headerlink&quot; title=&quot;Redis 数据结构&quot;&gt;&lt;/a&gt;Redis 数据结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;扁平化的特点，不存在数据库中列表查询一类的操作&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>net-work/okhttp/OKHTTP学习</title>
    <link href="https://zcy-fover.github.io/2019/01/01/net-work/okhttp/OKHTTP%E5%AD%A6%E4%B9%A0/"/>
    <id>https://zcy-fover.github.io/2019/01/01/net-work/okhttp/OKHTTP%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-01-01T13:18:05.057Z</published>
    <updated>2020-02-22T08:09:24.081Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="来自王老板的分享"><a href="#来自王老板的分享" class="headerlink" title="来自王老板的分享"></a>来自王老板的分享</h3><hr><ul><li><h4 id="OKHTTP系统架构模型"><a href="#OKHTTP系统架构模型" class="headerlink" title="OKHTTP系统架构模型"></a>OKHTTP系统架构模型</h4><blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/WEB9e4bbbf07a817a01ec22c1a1a31441ba?method=download&shareKey=8c44fb8fb19908f544c6b69c2cb092fe" alt="OKHTTP系统架构模型（王召）" title="">                </div>                <div class="image-caption">OKHTTP系统架构模型（王召）</div>            </figure></blockquote></li><li><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/WEB2ca932c063b86848d2f74bc7e947afe1?method=download&shareKey=58b16acfb566415f4584f2d2827b949e" alt="线程模型（王召）" title="">                </div>                <div class="image-caption">线程模型（王召）</div>            </figure></blockquote></li><li><h4 id="连接池（ConnectionPool）"><a href="#连接池（ConnectionPool）" class="headerlink" title="连接池（ConnectionPool）"></a>连接池（ConnectionPool）</h4><blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/WEB836d1ae35e85ab4395a0844d2898e1b5?method=download&shareKey=c580266e778718604830b1b5e0072e32" alt="连接池模型（王召）" title="">                </div>                <div class="image-caption">连接池模型（王召）</div>            </figure></blockquote></li></ul></blockquote><blockquote><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><hr><ul><li>概述<blockquote><ul><li>如何创建</li><li>如何管理</li><li>如何回收</li></ul></blockquote></li><li>要解决的问题<blockquote><ul><li>连接池上限</li><li>什么时候释放哪些连接</li><li>有链接超时的情况</li></ul></blockquote></li></ul></blockquote><blockquote><h4 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h4><hr><ul><li><p>协议</p><blockquote><ul><li>HTTP 1.0</li><li>HTTP 1.1</li><li>HTTP 2</li><li>SPDY 3.1</li><li>QUIK (Quick UDP Internet Connection)</li></ul></blockquote></li><li><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><blockquote></blockquote></li><li><h5 id="put新连接"><a href="#put新连接" class="headerlink" title="put新连接"></a>put新连接</h5><blockquote><ul><li><p>先检查空闲连接，将其清理</p></li><li><p>放入新的连接</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(RealConnection connection)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> (Thread.holdsLock(<span class="keyword">this</span>));</span><br><span class="line">    <span class="keyword">if</span> (!cleanupRunning) &#123;</span><br><span class="line">       cleanupRunning = <span class="keyword">true</span>;</span><br><span class="line">      executor.execute(cleanupRunnable);</span><br><span class="line">    &#125;</span><br><span class="line">    connections.add(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Runnable cleanupRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//循环执行清理操作</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//返回清理执行等待的纳秒数</span></span><br><span class="line">            <span class="keyword">long</span> waitNanos = cleanup(System.nanoTime());</span><br><span class="line">            <span class="keyword">if</span> (waitNanos == -<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (waitNanos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> waitMillis = waitNanos / <span class="number">1000000L</span>;</span><br><span class="line">                waitNanos -= (waitMillis * <span class="number">1000000L</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (ConnectionPool.<span class="keyword">this</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        ConnectionPool.<span class="keyword">this</span>.wait(waitMillis, (<span class="keyword">int</span>) waitNanos);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote></li><li><h5 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h5><blockquote><ul><li><p>如何找到闲置的连接</p><blockquote><ul><li>通过<code>pruneAndGetAllocationCount(connection, now)</code>判断当前连接是不是在用</li><li>当<code>idleDurationNs</code>纳秒数超过<code>keepAliveDurationNs</code>或者<code>idleConnectionCount</code>超过<code>maxIdleConnections</code>时，直接将当前连接移除</li><li>上面情况不满足时，当<code>idleConnectionCount &gt; 0</code>返回允许等待的时间差值</li><li>当<code>inUseConnectionCount &gt; 0</code>返回keepAlive的最大时间</li><li>当前无连接不需要清理</li></ul></blockquote></li><li><p>如何判断连接是否在用</p><blockquote><ul><li>主要检查<code>Reference</code>的<code>StreamAllocation</code>是否为空，为空则说明有连接泄漏，程序有异常，不为空则返回<code>Reference</code>的列表size</li></ul></blockquote></li></ul></blockquote></li></ul></blockquote><div style="text-align:center;margin-top:50px;margin-bottom:50px;">    <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;来自王老板的分享&quot;&gt;&lt;a href=&quot;#来自王老板的分享&quot; class=&quot;headerlink&quot; title=&quot;来自王老板的分享&quot;&gt;&lt;/a&gt;来自王老板的分享&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;OKHTTP系统架构模型&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据存储/缓存/网站架构中的缓存结构整理</title>
    <link href="https://zcy-fover.github.io/2019/01/01/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E7%BC%93%E5%AD%98/%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E4%B8%AD%E7%9A%84%E7%BC%93%E5%AD%98%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/"/>
    <id>https://zcy-fover.github.io/2019/01/01/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E7%BC%93%E5%AD%98/%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E4%B8%AD%E7%9A%84%E7%BC%93%E5%AD%98%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/</id>
    <published>2019-01-01T13:16:21.593Z</published>
    <updated>2020-02-22T07:38:51.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网站架构中的缓存"><a href="#网站架构中的缓存" class="headerlink" title="网站架构中的缓存"></a>网站架构中的缓存</h2><blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/F0430B67472F4B11B8577A56CC026CA4?method=download&shareKey=8d33adf1c1a85fbb1ed7c5d80c67f852" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><h4 id="网站架构缓存如图可分为："><a href="#网站架构缓存如图可分为：" class="headerlink" title="网站架构缓存如图可分为："></a>网站架构缓存如图可分为：</h4><blockquote><h4 id="客户端缓存"><a href="#客户端缓存" class="headerlink" title="客户端缓存"></a>客户端缓存</h4><blockquote><ul><li>页面缓存<blockquote><p>将之前渲染的页面保存为文件，当用户再次访问时可以避开网络连接，从而减少负载，提升性能和用户体验。</p></blockquote></li><li>浏览器缓存</li></ul><blockquote><p>HTTP1.0：与服务器约定规则进行，在服务器侧设置Expires的HTTP头来告诉客户端在重新请求文件之前多久是安全的，可以使用if-midified-since的条件请求来清空缓存，比较文件最初的下载时间和最后的更新时间，如果文件没有改变可以用304-Not Modified应答客户端</p><p>HTTP1.1：缓存系统被形式化引入了e-Tag标签，e-Tag标签是文件或者对象的唯一标识，当询问服务器某一个资源的e-Tag标签是否有效，有效会生成304-Not Modified；否则返回200提供正确的文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://note.youdao.com/yws/api/personal/file/WEBb567791a999bb7f27b16a79d0c258432?method=download&shareKey=d9fe97b682b4e9bcef1909cd8093a87f" alt="e-Tag流程图" title="">                </div>                <div class="image-caption">e-Tag流程图</div>            </figure><p>Cache-Control/Expires和Last-Modified/ETag一期使用时，Cache-Control/Expires的优先级要高于后者。即当本地缓存根据Cache-Control/Expires判断还在有效期内时，就不会在去服务器询问修改时间和实体标识了。</p><p>在html页面可以添加（并不是所有浏览器都支持）</p><pre><code class="html"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"Pragma"</span> <span class="attr">CONTENT</span>=<span class="string">"no-cache"</span>&gt;</span></code></pre></blockquote><ul><li>APP上缓存</li></ul><blockquote><p>数据库缓存：把文件的相关信息（URL、路径、下载时间、过期时间）等放到数据库中，下次查询先从数据库中查询做对比</p><p>文件缓存：使用文件操作的API获取文件的最后修改时间。图片和其他配置类文件的缓存时间不一样。图片的缓存时间可能可以持续到下次清空缓存，但是配置文件可能会被更新；在不同网络环境下缓存的更新时间也可以不一样</p></blockquote></blockquote><h4 id="网络中缓存"><a href="#网络中缓存" class="headerlink" title="网络中缓存"></a>网络中缓存</h4><blockquote><ul><li>WEB代理缓存</li></ul><blockquote><p>正向代理</p><p>反向代理：客户端向代理服务发送请求，反向代理自己判断向何处发送请求，然后将从源服务获取到的内容返回给客户端</p><p>透明代理：客户端根本不需要知道有代理服务器的存在，又代理服务器改变客户端的请求报文，并传送真实的IP地址</p><p>匿名代理：加密的透明代理</p></blockquote><ul><li>边缘缓存</li></ul><blockquote><p>反向代理服务和用户来源于同一个网络，用户访问反向代理服务就会得到较高质量的响应，这种反向代理缓存叫做边缘缓存</p><p>边缘缓存的商业化服务-CDN</p><p>CDN缓存也是通过HTTP响应头的Cache-Control:max-age字段来设置CDN边缘节点的数据缓存时间，当客户端向CDN节点请求数据时，CDN回先判断缓存时间是否过期，没有过期则将缓存返回给客户端，过期则像服务器请求数据并更新本地缓存。</p></blockquote></blockquote><h4 id="服务端缓存"><a href="#服务端缓存" class="headerlink" title="服务端缓存"></a>服务端缓存</h4><blockquote><ul><li>数据库缓存</li></ul><blockquote><p>query cache：作用于MySQL实例，主要针对于select语句，MySQL将接收到的select语句以字符串进行hash，然后在query cache中进行查找，如果有就返回query cache的内容。</p><p>query cache：需要query_cache_size和query_cache_type；前者设置缓存大小，后者表示在那种场景下使用（0-OFF，1-ON，2-DEMAND）</p><p>Qcache inserts表示多少次未命中然后插入；Qcache lowmem prunes值大则说明缓存不够；Qcache hits值非常大，则说明使用缓存较频繁；Qcache free blocks表明缓存区的碎片，如果较多需要清理.    </p></blockquote><blockquote><p>InnoDB缓存：innodb_buffer_pool_size设置缓存InnoDB索引及数据块的内存区域大小；table_cache设置高速缓存的数量。</p></blockquote><ul><li>平台级缓存</li></ul><blockquote><p>EhCache：</p><blockquote><ul><li>轻量快速：线程机制为大型高并发系统设计</li><li>良性伸缩：数据可以伸缩到数G字节，节点可以到数百个</li><li>简洁灵活：运行时缓存设置，存活时间、空闲时间、内存和缓存存放的最大数目可以在运行时修改</li><li>标准支持：</li><li>强扩展性：节点发现，冗余器和监听器可插件化</li><li>数据持久：缓存的数据在机器重启后可以在磁盘上获取</li><li>缓存监听：提供对缓存事件之后的处理机制</li><li>分布式缓存：支持高性能的分布式缓存，兼具灵活性和扩展性</li></ul></blockquote></blockquote><ul><li>应用级缓存</li></ul><blockquote><p>Redis：</p></blockquote><blockquote><p>应用缓存技术：</p><ul><li>缓存命中：缓存中有这一对象，则使用缓存的数据</li><li>没有命中：cache miss ，缓存中还有空间的时候，没有命中的对象就会被放入缓存中</li><li>存储成本：没有命中缓存，需要从数据库中取出数据放入缓存，这个过程消耗的时间和空间叫做存储成本</li><li>缓存失效：存储在缓存中的数据要被更新时，则原数据就失效了</li><li>替代策略：当缓存已经满了，有新的数据来，需要从缓存中去除一条旧的数据放入新的数据，如何去除如何插入新的需要有替代策略</li></ul></blockquote><blockquote><p>替代策略：</p><ul><li>Least-Recently-Used（LRU）：替换掉最近最少请求的对象</li><li>Least-Frequently-Used（LFU）：替换掉访问次数最少的对象</li><li>Least-Recently-Used 2（LRU2）：把最近访问两次的对象放入缓存，会把最近两次使用最少的缓存对象去除，需要跟踪对象两次，访问负载会增加</li><li>Two  Queues（2Q）：把被访问的数据放到KRU的缓存中，如果这个对象在被访问一次，就把这个对象放到第二个、更大的LRU缓存中，使用多级缓存</li><li>SIZE：替换占用空间最大的对象，这样会导致某些小对象可能一直存在与缓存中</li><li>LRU-Threshold：不缓存超过某一大小的对象，其他与LRU相同</li><li>Log(size)+LRU：替换最大的对象，size相同时按照LRU处理</li><li>Hyper-G：LFU的改进，同时考虑上一次访问时间和大小</li><li>Pitkow/Recker：替换最近最少使用的对象，除非所有对象都是今天使用的；如果都是今天则替换掉最大的对象</li><li>Lowest-Latency-First：替换下载时间最少的文件</li><li>Hybrid Hybrid：减少平均延迟，对缓存中的每个文档计算一个保留效用，保留效用最小的对象会被替换掉</li><li>Lowest Relative Value（LRV）：计算保留效用，替换保留效用最低的对象</li><li>Adaptive Replacement Cache（APC）：介于LRU和LFU中间，由两个LRU组成，第一个LRU包含最近只被使用过一次的，第二个包含最近被使用过两次的，以此得到新的和常用的对象；APC可以自我调节，访问负载较小</li><li>Most Recently Used（MRU）：MRU与LRU是相对的，移除最近被最多使用的对象；（减少因为计算寻找最少最近的耗时）</li><li>First in First out（FIFO）：通过队列跟踪缓存对象，最先进入的对象最先被踢走</li><li>Random Cache：随意替换，效果比FIFO好，有些情况比LRU好</li></ul></blockquote><blockquote><p>云缓存服务：动态扩容、数据多备、自动容灾、成本较低</p></blockquote></blockquote></blockquote></blockquote><div style="text-align:center;margin-top:50px;margin-bottom:50px;">    <img src="https://note.youdao.com/yws/api/personal/file/C2C6FCFDC10942B6A3532E6F0928E455?method=download&shareKey=c554dacfc5193c29d4b35682aa1226d9" /></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;网站架构中的缓存&quot;&gt;&lt;a href=&quot;#网站架构中的缓存&quot; class=&quot;headerlink&quot; title=&quot;网站架构中的缓存&quot;&gt;&lt;/a&gt;网站架构中的缓存&lt;/h2&gt;&lt;blockquote&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
      
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java/jvm/JVM内存回收</title>
    <link href="https://zcy-fover.github.io/2019/01/01/java/jvm/JVM%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6/"/>
    <id>https://zcy-fover.github.io/2019/01/01/java/jvm/JVM%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6/</id>
    <published>2019-01-01T13:02:10.914Z</published>
    <updated>2019-01-01T13:02:10.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM-内存回收"><a href="#JVM-内存回收" class="headerlink" title="JVM 内存回收"></a>JVM 内存回收</h1><blockquote><p> 蛮荒之地，笔者正在火速开垦……</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JVM-内存回收&quot;&gt;&lt;a href=&quot;#JVM-内存回收&quot; class=&quot;headerlink&quot; title=&quot;JVM 内存回收&quot;&gt;&lt;/a&gt;JVM 内存回收&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 蛮荒之地，笔者正在火速开垦……&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>net-work/http/HTTP2.0的价值在哪里</title>
    <link href="https://zcy-fover.github.io/2019/01/01/net-work/http/HTTP2.0%E7%9A%84%E4%BB%B7%E5%80%BC%E5%9C%A8%E5%93%AA%E9%87%8C/"/>
    <id>https://zcy-fover.github.io/2019/01/01/net-work/http/HTTP2.0%E7%9A%84%E4%BB%B7%E5%80%BC%E5%9C%A8%E5%93%AA%E9%87%8C/</id>
    <published>2019-01-01T13:02:10.914Z</published>
    <updated>2019-01-01T13:02:10.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP-2-0-的价值在哪里"><a href="#HTTP-2-0-的价值在哪里" class="headerlink" title="HTTP 2.0 的价值在哪里"></a>HTTP 2.0 的价值在哪里</h1><blockquote><p> 蛮荒之地，笔者正在火速开垦……</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTP-2-0-的价值在哪里&quot;&gt;&lt;a href=&quot;#HTTP-2-0-的价值在哪里&quot; class=&quot;headerlink&quot; title=&quot;HTTP 2.0 的价值在哪里&quot;&gt;&lt;/a&gt;HTTP 2.0 的价值在哪里&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 蛮荒之地
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>net-work/okhttp/OkHttpClient3线程模型</title>
    <link href="https://zcy-fover.github.io/2019/01/01/net-work/okhttp/OkHttpClient3%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    <id>https://zcy-fover.github.io/2019/01/01/net-work/okhttp/OkHttpClient3%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</id>
    <published>2019-01-01T13:02:10.914Z</published>
    <updated>2019-01-01T13:02:10.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OkHttpClient3-线程模型"><a href="#OkHttpClient3-线程模型" class="headerlink" title="OkHttpClient3 线程模型"></a>OkHttpClient3 线程模型</h1><blockquote><p> 蛮荒之地，笔者正在火速开垦……</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OkHttpClient3-线程模型&quot;&gt;&lt;a href=&quot;#OkHttpClient3-线程模型&quot; class=&quot;headerlink&quot; title=&quot;OkHttpClient3 线程模型&quot;&gt;&lt;/a&gt;OkHttpClient3 线程模型&lt;/h1&gt;&lt;blockquo
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
